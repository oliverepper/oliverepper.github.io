<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content"><channel><title>oliep</title><description>Golf Professional &amp; Professional Software Developer</description><link>https://oliver-epper.de</link><language>en</language><lastBuildDate>Wed, 17 Jun 2020 21:38:41 +0200</lastBuildDate><pubDate>Wed, 17 Jun 2020 21:38:41 +0200</pubDate><ttl>250</ttl><atom:link href="https://oliver-epper.de/feed.rss" rel="self" type="application/rss+xml"/><item><guid isPermaLink="true">https://oliver-epper.de/posts/automatically-stamp-an-object-with-a-unique-pin</guid><title>Automatically stamp an object with a unique pin</title><description>Stamp an object with an unique pin before saving into the database</description><link>https://oliver-epper.de/posts/automatically-stamp-an-object-with-a-unique-pin</link><pubDate>Wed, 17 Jun 2020 09:41:00 +0200</pubDate><content:encoded><![CDATA[<p>I recently started using Vapor and I love it! Using Swift on the server is sweet and Vapor has a really nice API. I wanted to do a "simple" thing that turned out to be harder than I initially thought it would be but Swift and Vapor made it actually fun to strive for a nice solution.</p><h2>What I wanted to do</h2><p>Imagine that you want to store something away but first put a little sticker on it. You have a box full of things to store, a sheet of stickers and the cabinet where you want to put the things. So:</p><pre><code><div class="highlight"><span></span><span class="n">take_a_thing</span>
<span class="n">take_a_sticker</span>
<span class="n">put_sticker_on_thing</span>
<span class="n">put_thing_in_cabinet</span>
</div></code></pre><p>Easy, isn't it?</p><p>The <code>take_a_sticker</code> part can be tricky. What if you have someone that helps you and you both grab the same sticker? Clearly you want to SELECT and DELETE the sticker (from a database) in an atomic operation.</p><h2>How to implement the ModelMiddleware?</h2><p>With Vapor you can register a <code>ModelMiddleware</code> that you can use to provide lifecycle functions for your model. Let's say you want to hook into the create process:</p><pre><code><div class="highlight"><span></span><span class="kd">struct</span> <span class="nc">ThingMiddleware</span><span class="p">:</span> <span class="n">ModelMiddleware</span> <span class="p">{</span>
    <span class="kd">func</span> <span class="nf">create</span><span class="p">(</span><span class="n">model</span><span class="p">:</span> <span class="n">Thing</span><span class="p">,</span> <span class="n">on</span> <span class="n">db</span><span class="p">:</span> <span class="n">Database</span><span class="p">,</span> <span class="n">next</span><span class="p">:</span> <span class="n">AnyModelResponder</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="n">EventLoopFuture</span><span class="p">&lt;</span><span class="nb">Void</span><span class="p">&gt;</span> <span class="p">{</span>
        <span class="bp">print</span><span class="p">(</span><span class="s">&quot;This will happen before the create&quot;</span><span class="p">)</span>
        <span class="n">next</span><span class="p">.</span><span class="n">create</span><span class="p">(</span><span class="n">model</span><span class="p">,</span> <span class="n">on</span><span class="p">:</span> <span class="n">db</span><span class="p">).</span><span class="bp">map</span> <span class="p">{</span>
            <span class="bp">print</span><span class="p">(</span><span class="s">&quot;This will happen after the create&quot;</span><span class="p">)</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</div></code></pre><p>Isn't it cool how Swift infers the type for the ThingMiddleware through the create functions model parameter? It doesn't require you to write:</p><pre><code><div class="highlight"><span></span><span class="kd">struct</span> <span class="nc">ThingMiddleware</span><span class="p">:</span> <span class="n">ModelMiddleware</span> <span class="p">{</span>
    <span class="kd">typealias</span> <span class="n">model</span> <span class="p">=</span> <span class="n">Thing</span>

    <span class="kd">func</span> <span class="nf">create</span><span class="p">(</span><span class="n">model</span><span class="p">:</span> <span class="n">Model</span><span class="p">,</span> <span class="n">on</span> <span class="n">db</span><span class="p">:</span> <span class="n">Database</span><span class="p">,</span> <span class="n">next</span><span class="p">:</span> <span class="n">AnyModelResponder</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="n">EventLoopFuture</span><span class="p">&lt;</span><span class="nb">Void</span><span class="p">&gt;</span> <span class="p">{</span>
        <span class="c1">// ...</span>
    <span class="p">}</span>
<span class="p">}</span>
</div></code></pre><p>So we're handling with Futures here.</p><p>Let's try to express the pseudocode from above. What about this:</p><pre><code><div class="highlight"><span></span><span class="c1">// ATTENTION: THIS DOES NOT WORK!</span>
<span class="kd">struct</span> <span class="nc">PinErrror</span><span class="p">:</span> <span class="n">Error</span> <span class="p">{</span> <span class="p">}</span>

<span class="kd">struct</span> <span class="nc">ClientConfigMiddleware</span><span class="p">:</span> <span class="n">ModelMiddleware</span> <span class="p">{</span>
    <span class="kd">func</span> <span class="nf">create</span><span class="p">(</span><span class="n">model</span><span class="p">:</span> <span class="n">ClientConfig</span><span class="p">,</span> <span class="n">on</span> <span class="n">db</span><span class="p">:</span> <span class="n">Database</span><span class="p">,</span> <span class="n">next</span><span class="p">:</span> <span class="n">AnyModelResponder</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="n">EventLoopFuture</span><span class="p">&lt;</span><span class="nb">Void</span><span class="p">&gt;</span> <span class="p">{</span>
        <span class="k">return</span> <span class="kc">self</span><span class="p">.</span><span class="n">getPin</span><span class="p">(</span><span class="n">from</span><span class="p">:</span> <span class="n">db</span><span class="p">).</span><span class="n">flatMap</span> <span class="p">{</span> <span class="n">pin</span> <span class="k">in</span>
            <span class="n">model</span><span class="p">.</span><span class="n">pin</span> <span class="p">=</span> <span class="n">pin</span>
            <span class="k">return</span> <span class="n">next</span><span class="p">.</span><span class="n">create</span><span class="p">(</span><span class="n">model</span><span class="p">,</span> <span class="n">on</span><span class="p">:</span> <span class="n">db</span><span class="p">)</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="kd">private</span> <span class="kd">func</span> <span class="nf">getPin</span><span class="p">(</span><span class="n">from</span> <span class="n">db</span><span class="p">:</span> <span class="n">Database</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="n">EventLoopFuture</span><span class="p">&lt;</span><span class="nb">Int</span><span class="p">&gt;</span> <span class="p">{</span>
        <span class="k">guard</span> <span class="kd">let</span> <span class="nv">sql</span> <span class="p">=</span> <span class="n">db</span> <span class="k">as</span><span class="p">?</span> <span class="n">SQLDatabase</span> <span class="k">else</span> <span class="p">{</span>
            <span class="bp">fatalError</span><span class="p">()</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="n">sql</span><span class="p">.</span><span class="n">raw</span><span class="p">(</span><span class="s">&quot;SELECT * FROM pins LIMIT 1&quot;</span><span class="p">).</span><span class="bp">first</span><span class="p">().</span><span class="n">flatMapThrowing</span> <span class="p">{</span> <span class="n">row</span> <span class="k">in</span>
            <span class="k">if</span> <span class="kd">let</span> <span class="nv">pin</span> <span class="p">=</span> <span class="k">try</span><span class="p">?</span> <span class="n">row</span><span class="p">?.</span><span class="n">decode</span><span class="p">(</span><span class="n">column</span><span class="p">:</span> <span class="s">&quot;pin&quot;</span><span class="p">,</span> <span class="k">as</span><span class="p">:</span> <span class="nb">Int</span><span class="p">.</span><span class="kc">self</span><span class="p">)</span> <span class="p">{</span>
                <span class="kc">_</span> <span class="p">=</span> <span class="n">sql</span><span class="p">.</span><span class="n">raw</span><span class="p">(</span><span class="s">&quot;DELETE FROM pins WHERE pin=&#39;</span><span class="si">\(</span><span class="nb">String</span><span class="si">(</span><span class="n">pin</span><span class="si">))</span><span class="s">&#39;&quot;</span><span class="p">).</span><span class="n">run</span><span class="p">()</span>
                <span class="k">return</span> <span class="n">pin</span>
            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                <span class="k">throw</span> <span class="n">PinErrror</span><span class="p">()</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</div></code></pre><p>The logic basically says:</p><pre><code><div class="highlight"><span></span><span class="n">create</span><span class="p">:</span>
	<span class="k">return</span> <span class="n">getNextSticker</span><span class="p">.</span><span class="n">if_ok</span>
		<span class="n">put_sticker_on_model</span>
		<span class="n">save_model</span>

<span class="n">getNextSticker</span><span class="p">:</span>
	<span class="k">return</span> <span class="kr">get</span> <span class="n">sicker_from_db</span><span class="p">.</span><span class="n">if_ok</span>
		<span class="n">delete_sticker_from_db</span><span class="p">.</span><span class="n">if_ok</span>
			<span class="k">return</span> <span class="n">sticker</span>
</div></code></pre><p>That should do it, right?</p><p>Well not quite. With a blocking database driver I guess that would work but what happens in Vapor is that if you create a bunch of model objects they all get the same sticker!</p><p>We need something a bit more clever. After doing a bit of research and asking around the people in the Vapor Discord Tanner the inventor of Vapor pointed me to a post on Stackoverflow that had a great idea for situation that was quite similar:</p><h2>Why not call dibs on the row, first?</h2><p>What if the code wouldn't just select (and then delete) the first entry, but mark it with something if it is not marked, yet. For example the current thread-id, a timestamp, or a uuid? Then the code can select that very entry while everyone else can continue with their own marked entries.</p><p>So here's how you can make it work in code:</p><pre><code><div class="highlight"><span></span><span class="kd">struct</span> <span class="nc">PinError</span><span class="p">:</span> <span class="n">Error</span> <span class="p">{</span> <span class="p">}</span>

<span class="kd">struct</span> <span class="nc">ClientConfigMiddleware</span><span class="p">:</span> <span class="n">ModelMiddleware</span> <span class="p">{</span>
    <span class="kd">func</span> <span class="nf">create</span><span class="p">(</span><span class="n">model</span><span class="p">:</span> <span class="n">ClientConfig</span><span class="p">,</span> <span class="n">on</span> <span class="n">db</span><span class="p">:</span> <span class="n">Database</span><span class="p">,</span> <span class="n">next</span><span class="p">:</span> <span class="n">AnyModelResponder</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="n">EventLoopFuture</span><span class="p">&lt;</span><span class="nb">Void</span><span class="p">&gt;</span> <span class="p">{</span>
        <span class="k">return</span> <span class="kc">self</span><span class="p">.</span><span class="n">getNextPin</span><span class="p">(</span><span class="n">from</span><span class="p">:</span> <span class="n">db</span><span class="p">).</span><span class="n">flatMap</span> <span class="p">{</span> <span class="n">pin</span> <span class="k">in</span>
            <span class="n">model</span><span class="p">.</span><span class="n">pin</span> <span class="p">=</span> <span class="n">pin</span>
            <span class="k">return</span> <span class="n">next</span><span class="p">.</span><span class="n">create</span><span class="p">(</span><span class="n">model</span><span class="p">,</span> <span class="n">on</span><span class="p">:</span> <span class="n">db</span><span class="p">)</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="kd">private</span> <span class="kd">func</span> <span class="nf">getNextPin</span><span class="p">(</span><span class="n">from</span> <span class="n">db</span><span class="p">:</span> <span class="n">Database</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="n">EventLoopFuture</span><span class="p">&lt;</span><span class="nb">Int</span><span class="p">&gt;</span> <span class="p">{</span>
        <span class="k">guard</span> <span class="kd">let</span> <span class="nv">sql</span> <span class="p">=</span> <span class="n">db</span> <span class="k">as</span><span class="p">?</span> <span class="n">SQLDatabase</span> <span class="k">else</span> <span class="p">{</span>
            <span class="bp">fatalError</span><span class="p">()</span>
        <span class="p">}</span>
        <span class="kd">let</span> <span class="nv">selector</span> <span class="p">=</span> <span class="n">UUID</span><span class="p">()</span>
        <span class="k">return</span> <span class="n">sql</span><span class="p">.</span><span class="n">raw</span><span class="p">(</span><span class="s">&quot;UPDATE pins SET selector=&#39;</span><span class="si">\(</span><span class="n">selector</span><span class="p">.</span><span class="n">uuidString</span><span class="si">)</span><span class="s">&#39; WHERE pin = (SELECT pin FROM pins WHERE selector IS NULL LIMIT 1)&quot;</span><span class="p">).</span><span class="n">run</span><span class="p">().</span><span class="n">flatMap</span> <span class="p">{</span>
            <span class="k">return</span> <span class="n">sql</span><span class="p">.</span><span class="n">raw</span><span class="p">(</span><span class="s">&quot;SELECT pin FROM pins WHERE selector=&#39;</span><span class="si">\(</span><span class="n">selector</span><span class="p">.</span><span class="n">uuidString</span><span class="si">)</span><span class="s">&#39;&quot;</span><span class="p">).</span><span class="bp">first</span><span class="p">().</span><span class="n">flatMapThrowing</span> <span class="p">{</span> <span class="n">row</span> <span class="k">in</span>
                <span class="k">if</span> <span class="kd">let</span> <span class="nv">pin</span> <span class="p">=</span> <span class="k">try</span><span class="p">?</span> <span class="n">row</span><span class="p">?.</span><span class="n">decode</span><span class="p">(</span><span class="n">column</span><span class="p">:</span> <span class="s">&quot;pin&quot;</span><span class="p">,</span> <span class="k">as</span><span class="p">:</span> <span class="nb">Int</span><span class="p">.</span><span class="kc">self</span><span class="p">)</span> <span class="p">{</span>
                    <span class="k">return</span> <span class="n">pin</span>
                <span class="p">}</span>
                <span class="k">throw</span> <span class="n">PinError</span><span class="p">()</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</div></code></pre><p>So now we have:</p><pre><code><div class="highlight"><span></span><span class="n">create</span><span class="p">:</span>
	<span class="k">return</span> <span class="n">getNextSticker</span><span class="p">.</span><span class="n">if_ok</span>
		<span class="n">put_sticker_on_model</span>
		<span class="n">save_model</span>

<span class="n">getNextSticker</span><span class="p">:</span>
	<span class="k">return</span> <span class="kr">get</span> <span class="n">mark_a_sticker_that_is_not_yet_marked_with_myId</span><span class="p">.</span><span class="n">if_ok</span>
		<span class="k">return</span> <span class="n">select_the_sticker_that_is_marked_with_myId</span><span class="p">.</span><span class="n">if_ok</span>
			<span class="k">return</span> <span class="n">sticker</span>
</div></code></pre><p>The pins table is a prepopulated table that has two columns. One for the actual pin and one called selector that is prepoulated with NULL. The <code>getNextPin</code> function writes a uuid that it saves in the selector column and can then read a pin by selecting the row with the matching selector. Pretty neat, isn't it?</p>]]></content:encoded></item><item><guid isPermaLink="true">https://oliver-epper.de/posts/use-keychain-to-securely-save-data</guid><title>Use Keychain to securely save data</title><description>Save an item in keychain without a third party framework</description><link>https://oliver-epper.de/posts/use-keychain-to-securely-save-data</link><pubDate>Sat, 23 May 2020 09:41:00 +0200</pubDate><content:encoded><![CDATA[<p>If you need to save sensible information like a user password in an iOS app you should use Keychain instead of UserDefaults. While the UserDefaults-API is user-friendly and straight forward the Keychain-API is not. It took me a while to find some information because nearly everyone suggested to use a third-party-framework and I ended up with downloading <a href="https://github.com/jrendel/SwiftKeychainWrapper">SwiftKeyChainWrapper</a>, too.</p><p>But still I want to be able to save data into Keychain without a third-party solution. So I used the library as documentation.</p><h2>Save a string to the Keychain</h2><pre><code><div class="highlight"><span></span><span class="kd">import</span> <span class="nc">Foundation</span>

<span class="kd">struct</span> <span class="nc">KeyChain</span> <span class="p">{</span>
    <span class="kd">static</span> <span class="kd">private</span> <span class="kd">func</span> <span class="nf">getQueryDict</span><span class="p">()</span> <span class="p">-&gt;</span> <span class="p">[</span><span class="nb">String</span><span class="p">:</span><span class="nb">Any</span><span class="p">]</span> <span class="p">{</span>
        <span class="kd">var</span> <span class="nv">keyChainQueryDict</span><span class="p">:</span> <span class="p">[</span><span class="nb">String</span><span class="p">:</span><span class="nb">Any</span><span class="p">]</span> <span class="p">=</span> <span class="p">[</span><span class="n">kSecClass</span> <span class="k">as</span> <span class="nb">String</span><span class="p">:</span><span class="n">kSecClassGenericPassword</span><span class="p">]</span>
        <span class="n">keyChainQueryDict</span><span class="p">[</span><span class="n">kSecAttrService</span> <span class="k">as</span> <span class="nb">String</span><span class="p">]</span> <span class="p">=</span> <span class="s">&quot;MyService&quot;</span>
        <span class="k">return</span> <span class="n">keyChainQueryDict</span>
    <span class="p">}</span>

    <span class="kd">static</span> <span class="kd">func</span> <span class="nf">save</span><span class="p">(</span><span class="kc">_</span> <span class="n">message</span><span class="p">:</span> <span class="nb">String</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="kd">let</span> <span class="nv">data</span> <span class="p">=</span> <span class="n">message</span><span class="p">.</span><span class="n">data</span><span class="p">(</span><span class="n">using</span><span class="p">:</span> <span class="p">.</span><span class="n">utf8</span><span class="p">)</span> <span class="p">{</span>
            <span class="kd">var</span> <span class="nv">keyChainQueryDict</span> <span class="p">=</span> <span class="n">getQueryDict</span><span class="p">()</span>

            <span class="n">keyChainQueryDict</span><span class="p">[</span><span class="n">kSecValueData</span> <span class="k">as</span> <span class="nb">String</span><span class="p">]</span> <span class="p">=</span> <span class="n">data</span>
            <span class="n">keyChainQueryDict</span><span class="p">[</span><span class="n">kSecAttrAccessible</span> <span class="k">as</span> <span class="nb">String</span><span class="p">]</span> <span class="p">=</span> <span class="n">kSecAttrAccessibleWhenUnlocked</span>

            <span class="kd">let</span> <span class="nv">status</span><span class="p">:</span> <span class="n">OSStatus</span> <span class="p">=</span> <span class="n">SecItemAdd</span><span class="p">(</span><span class="n">keyChainQueryDict</span> <span class="k">as</span> <span class="n">CFDictionary</span><span class="p">,</span> <span class="kc">nil</span><span class="p">)</span>

            <span class="k">if</span> <span class="n">status</span> <span class="p">==</span> <span class="n">errSecSuccess</span> <span class="p">{</span>
                <span class="bp">print</span><span class="p">(</span><span class="s">&quot;Message saved&quot;</span><span class="p">)</span>
            <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="n">status</span> <span class="p">==</span> <span class="n">errSecDuplicateItem</span> <span class="p">{</span>
                <span class="n">update</span><span class="p">(</span><span class="n">message</span><span class="p">)</span>
            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                <span class="bp">print</span><span class="p">(</span><span class="n">SecCopyErrorMessageString</span><span class="p">(</span><span class="n">status</span><span class="p">,</span> <span class="kc">nil</span><span class="p">)</span> <span class="p">??</span> <span class="s">&quot;Unknown error&quot;</span><span class="p">)</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</div></code></pre><p>You add an Item to the KeyChain with the function <code>SecItemAdd(_ attributes: CFDictionary, _ result: UnsafeMutablePointer&lt;CFTypeRef?&gt;?) -&gt; OSStatus</code>.</p><p>So you pass in a dictionary and receive a result code. If the result code equals <code>errSecSuccess</code> you're golden! <code>errSecDuplicateItem</code> tells you that an entry for the key you provided already exists.</p><p>So how do you pass in the key and the data? It's all in the query dictionary. The first entry <code>[kSecClass as String:kSecClassGenericPassword]</code> tells the system that you want to save a generic password. Other options would be a <code>kSecClassInternetPassword</code> or a <code>kSecClassIdentity</code> and there're even more. The other required keys for the dictionary depend on the type you choose here.</p><p>For the generic password I declared a service specifier <code>kSecAttrService</code> with the value <code>"MyService"</code>. By the way since all these keys are CFStrings you need to cast them to a Swift String.</p><p>With the key <code>kSecValueData</code> you pass in the <code>Data</code> that you want to be saved. The key <code>kSecAttrAccessible</code> is used to specify when an item can be retrieved from the secure store. In the case of <code>kSecAttrAccessibleWhenUnlocked</code> we can receive the item when the device is unlocked. Other possible values are:</p><ul><li><code>kSecAttrAccessibleAfterFirstUnlock</code> Item data can only be accessed once the device has been unlocked after a restart. This is recommended for items that need to be accesible by background applications. Items with this attribute will migrate to a new device when using encrypted backups.</li><li><code>kSecAttrAccessibleAlways</code> Item data can always be accessed regardless of the lock state of the device. This is not recommended for anything except system use. Items with this attribute will migrate to a new device when using encrypted backups.</li><li><code>kSecAttrAccessibleWhenPasscodeSetThisDeviceOnly</code> Item data can only be accessed while the device is unlocked. This is recommended for items that only need to be accessible while the application is in the foreground and requires a passcode to be set on the device. Items with this attribute will never migrate to a new device, so after a backup is restored to a new device, these items will be missing. This attribute will not be available on devices without a passcode. Disabling the device passcode will cause all previously protected items to be deleted.</li><li><code>kSecAttrAccessibleWhenUnlockedThisDeviceOnly</code> Item data can only be accessed while the device is unlocked. This is recommended for items that only need be accessible while the application is in the foreground. Items with this attribute will never migrate to a new device, so after a backup is restored to a new device, these items will be missing.</li><li><code>kSecAttrAccessibleAfterFirstUnlockThisDeviceOnly</code> Item data can only be accessed once the device has been unlocked after a restart. This is recommended for items that need to be accessible by background applications. Items with this attribute will never migrate to a new device, so after a backup is restored to a new device these items will be missing.</li><li><code>kSecAttrAccessibleAlwaysThisDeviceOnly</code> Item data can always be accessed regardless of the lock state of the device. This option is not recommended for anything except system use. Items with this attribute will never migrate to a new device, so after a backup is restored to a new device, these items will be missing.</li></ul><p>So after the dictionary is properly configured we can call <code>SecItemAdd</code> and by this save an item in the Keychain. That's all there is to it 😎</p><h2>Update an item in the Keychain</h2><p>If the key for your item already exists you'll receive <code>errSecDuplicateItem</code> as the result of callling <code>SecItemAdd</code>. You can update your item like this:</p><pre><code><div class="highlight"><span></span>    <span class="kd">static</span> <span class="kd">func</span> <span class="nf">update</span><span class="p">(</span><span class="kc">_</span> <span class="n">message</span><span class="p">:</span> <span class="nb">String</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="kd">let</span> <span class="nv">data</span> <span class="p">=</span> <span class="n">message</span><span class="p">.</span><span class="n">data</span><span class="p">(</span><span class="n">using</span><span class="p">:</span> <span class="p">.</span><span class="n">utf8</span><span class="p">)</span> <span class="p">{</span>
            <span class="kd">let</span> <span class="nv">keyChainQueryDict</span> <span class="p">=</span> <span class="n">getQueryDict</span><span class="p">()</span>

            <span class="kd">let</span> <span class="nv">updateDict</span> <span class="p">=</span> <span class="p">[</span><span class="n">kSecValueData</span><span class="p">:</span><span class="n">data</span><span class="p">]</span>

            <span class="kd">let</span> <span class="nv">status</span><span class="p">:</span> <span class="n">OSStatus</span> <span class="p">=</span> <span class="n">SecItemUpdate</span><span class="p">(</span><span class="n">keyChainQueryDict</span> <span class="k">as</span> <span class="n">CFDictionary</span><span class="p">,</span> <span class="n">updateDict</span> <span class="k">as</span> <span class="n">CFDictionary</span><span class="p">)</span>

            <span class="k">if</span> <span class="n">status</span> <span class="p">==</span> <span class="n">errSecSuccess</span> <span class="p">{</span>
                <span class="bp">print</span><span class="p">(</span><span class="s">&quot;Entry updated.&quot;</span><span class="p">)</span>
            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                <span class="bp">print</span><span class="p">(</span><span class="n">SecCopyErrorMessageString</span><span class="p">(</span><span class="n">status</span><span class="p">,</span> <span class="kc">nil</span><span class="p">)</span> <span class="p">??</span> <span class="s">&quot;Unknown error&quot;</span><span class="p">)</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
</div></code></pre><p>So now we need a second dictionary since calling <code>SecItemUpdate</code>requires us to provide two dictionaries as parameter. The second just contains the data that we want to update for the key <code>kSecValueData</code>.</p><h2>Reading an item from the Keychain</h2><pre><code><div class="highlight"><span></span><span class="kd">static</span> <span class="kd">func</span> <span class="nf">load</span><span class="p">()</span> <span class="p">-&gt;</span> <span class="nb">String</span><span class="p">?</span> <span class="p">{</span>
        <span class="kd">var</span> <span class="nv">keyChainQueryDict</span> <span class="p">=</span> <span class="n">getQueryDict</span><span class="p">()</span>

        <span class="n">keyChainQueryDict</span><span class="p">[</span><span class="n">kSecMatchLimit</span> <span class="k">as</span> <span class="nb">String</span><span class="p">]</span> <span class="p">=</span> <span class="n">kSecMatchLimitOne</span>
        <span class="n">keyChainQueryDict</span><span class="p">[</span><span class="n">kSecReturnData</span> <span class="k">as</span> <span class="nb">String</span><span class="p">]</span> <span class="p">=</span> <span class="n">kCFBooleanTrue</span>

        <span class="kd">var</span> <span class="nv">result</span><span class="p">:</span> <span class="nb">AnyObject</span><span class="p">?</span>
        <span class="kd">let</span> <span class="nv">status</span> <span class="p">=</span> <span class="n">SecItemCopyMatching</span><span class="p">(</span><span class="n">keyChainQueryDict</span> <span class="k">as</span> <span class="n">CFDictionary</span><span class="p">,</span> <span class="p">&amp;</span><span class="n">result</span><span class="p">)</span>

        <span class="k">if</span> <span class="n">status</span> <span class="p">==</span> <span class="n">noErr</span> <span class="p">{</span>
            <span class="k">if</span> <span class="kd">let</span> <span class="nv">data</span> <span class="p">=</span> <span class="n">result</span> <span class="k">as</span><span class="p">?</span> <span class="n">Data</span> <span class="p">{</span>
                <span class="k">return</span> <span class="nb">String</span><span class="p">(</span><span class="n">data</span><span class="p">:</span> <span class="n">data</span><span class="p">,</span> <span class="n">encoding</span><span class="p">:</span> <span class="p">.</span><span class="n">utf8</span><span class="p">)</span>
            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                <span class="bp">print</span><span class="p">(</span><span class="s">&quot;Could not retrieve data&quot;</span><span class="p">)</span>
            <span class="p">}</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="bp">print</span><span class="p">(</span><span class="n">SecCopyErrorMessageString</span><span class="p">(</span><span class="n">status</span><span class="p">,</span> <span class="kc">nil</span><span class="p">)</span> <span class="p">??</span> <span class="s">&quot;Unknown error&quot;</span><span class="p">)</span>
        <span class="p">}</span>

        <span class="k">return</span> <span class="kc">nil</span>
    <span class="p">}</span>
</div></code></pre><p>The function <code>SecItemCopyMatching(_ query: CFDictionary, _ result: UnsafeMutablePointer&lt;CFTypeRef?&gt;?) -&gt; OSStatus</code> copies an Item into its second parameter if the item matches the query dictionary passed in the first parameter. The query dictionary is configured to return only one item and return it as <code>Data</code>. This is configured with the keys <code>kSecMatchLimit</code> and <code>kSecReturnData</code>. If the operations succeeded you can cast the result object to data and build the String you originally saved from it.</p><p>So after looking into this I would suggest you simply use <a href="https://github.com/jrendel/SwiftKeychainWrapper">SwiftKeychainWrapper</a> like everyone else suggests 😃</p><h2>Update: A stripped down version of SwiftKeychainWrapper (only Strings)</h2><pre><code><div class="highlight"><span></span><span class="kd">import</span> <span class="nc">Foundation</span>

<span class="c1">// This is a stripped down version of SwiftKeychainWraper</span>
<span class="c1">// https://github.com/jrendel/SwiftKeychainWrapper</span>
<span class="kd">class</span> <span class="nc">KeychainWrapper</span> <span class="p">{</span>
    <span class="kd">static</span> <span class="kd">let</span> <span class="nv">standard</span> <span class="p">=</span> <span class="n">KeychainWrapper</span><span class="p">()</span>

    <span class="kd">private</span> <span class="kd">init</span><span class="p">()</span> <span class="p">{}</span>

    <span class="kd">func</span> <span class="nf">string</span><span class="p">(</span><span class="n">forKey</span> <span class="n">key</span><span class="p">:</span> <span class="nb">String</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="nb">String</span><span class="p">?</span> <span class="p">{</span>
        <span class="k">guard</span> <span class="kd">let</span> <span class="nv">keychainData</span> <span class="p">=</span> <span class="n">data</span><span class="p">(</span><span class="n">forKey</span><span class="p">:</span> <span class="n">key</span><span class="p">)</span> <span class="k">else</span> <span class="p">{</span>
            <span class="k">return</span> <span class="kc">nil</span>
        <span class="p">}</span>

        <span class="k">return</span> <span class="nb">String</span><span class="p">(</span><span class="n">data</span><span class="p">:</span> <span class="n">keychainData</span><span class="p">,</span> <span class="n">encoding</span><span class="p">:</span> <span class="p">.</span><span class="n">utf8</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="kd">func</span> <span class="nf">set</span><span class="p">(</span><span class="kc">_</span> <span class="n">value</span><span class="p">:</span> <span class="nb">String</span><span class="p">,</span> <span class="n">forKey</span> <span class="n">key</span><span class="p">:</span> <span class="nb">String</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="kd">let</span> <span class="nv">data</span> <span class="p">=</span> <span class="n">value</span><span class="p">.</span><span class="n">data</span><span class="p">(</span><span class="n">using</span><span class="p">:</span> <span class="p">.</span><span class="n">utf8</span><span class="p">)</span> <span class="p">{</span>
            <span class="kr">set</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">forKey</span><span class="p">:</span> <span class="n">key</span><span class="p">)</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="kd">func</span> <span class="nf">removeObject</span><span class="p">(</span><span class="n">forKey</span> <span class="n">key</span><span class="p">:</span> <span class="nb">String</span><span class="p">)</span> <span class="p">{</span>
        <span class="kd">let</span> <span class="nv">keychainQueryDictionary</span> <span class="p">=</span> <span class="n">setupKeychainQueryDictionary</span><span class="p">(</span><span class="n">forKey</span><span class="p">:</span> <span class="n">key</span><span class="p">)</span>
        <span class="n">SecItemDelete</span><span class="p">(</span><span class="n">keychainQueryDictionary</span> <span class="k">as</span> <span class="n">CFDictionary</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="kd">private</span> <span class="kd">func</span> <span class="nf">data</span><span class="p">(</span><span class="n">forKey</span> <span class="n">key</span><span class="p">:</span> <span class="nb">String</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="n">Data</span><span class="p">?</span> <span class="p">{</span>
        <span class="kd">var</span> <span class="nv">keychainQueryDictionary</span> <span class="p">=</span> <span class="n">setupKeychainQueryDictionary</span><span class="p">(</span><span class="n">forKey</span><span class="p">:</span> <span class="n">key</span><span class="p">)</span>
        <span class="n">keychainQueryDictionary</span><span class="p">[</span><span class="n">kSecMatchLimit</span> <span class="k">as</span> <span class="nb">String</span><span class="p">]</span> <span class="p">=</span> <span class="n">kSecMatchLimitOne</span>
        <span class="n">keychainQueryDictionary</span><span class="p">[</span><span class="n">kSecReturnData</span> <span class="k">as</span> <span class="nb">String</span><span class="p">]</span> <span class="p">=</span> <span class="n">kCFBooleanTrue</span>

        <span class="kd">var</span> <span class="nv">result</span><span class="p">:</span> <span class="nb">AnyObject</span><span class="p">?</span>
        <span class="kd">let</span> <span class="nv">status</span> <span class="p">=</span> <span class="n">SecItemCopyMatching</span><span class="p">(</span><span class="n">keychainQueryDictionary</span> <span class="k">as</span> <span class="n">CFDictionary</span><span class="p">,</span> <span class="p">&amp;</span><span class="n">result</span><span class="p">)</span>

        <span class="k">return</span> <span class="n">status</span> <span class="p">==</span> <span class="n">noErr</span> <span class="p">?</span> <span class="n">result</span> <span class="k">as</span><span class="p">?</span> <span class="n">Data</span> <span class="p">:</span> <span class="kc">nil</span>
    <span class="p">}</span>

    <span class="kd">private</span> <span class="kd">func</span> <span class="nf">set</span><span class="p">(</span><span class="kc">_</span> <span class="n">data</span><span class="p">:</span> <span class="n">Data</span><span class="p">,</span> <span class="n">forKey</span> <span class="n">key</span><span class="p">:</span> <span class="nb">String</span><span class="p">)</span> <span class="p">{</span>
        <span class="kd">var</span> <span class="nv">keychainQuerDictionary</span> <span class="p">=</span> <span class="n">setupKeychainQueryDictionary</span><span class="p">(</span><span class="n">forKey</span><span class="p">:</span> <span class="n">key</span><span class="p">)</span>
        <span class="n">keychainQuerDictionary</span><span class="p">[</span><span class="n">kSecValueData</span> <span class="k">as</span> <span class="nb">String</span><span class="p">]</span> <span class="p">=</span> <span class="n">data</span>

        <span class="kd">let</span> <span class="nv">status</span> <span class="p">=</span> <span class="n">SecItemAdd</span><span class="p">(</span><span class="n">keychainQuerDictionary</span> <span class="k">as</span> <span class="n">CFDictionary</span><span class="p">,</span> <span class="kc">nil</span><span class="p">)</span>

        <span class="k">if</span> <span class="n">status</span> <span class="p">==</span> <span class="n">errSecDuplicateItem</span> <span class="p">{</span>
            <span class="n">update</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">forKey</span><span class="p">:</span> <span class="n">key</span><span class="p">)</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="kd">private</span> <span class="kd">func</span> <span class="nf">update</span><span class="p">(</span><span class="kc">_</span> <span class="n">data</span><span class="p">:</span> <span class="n">Data</span><span class="p">,</span> <span class="n">forKey</span> <span class="n">key</span><span class="p">:</span> <span class="nb">String</span><span class="p">)</span> <span class="p">{</span>
        <span class="kd">let</span> <span class="nv">keychainQueryDictionary</span> <span class="p">=</span> <span class="n">setupKeychainQueryDictionary</span><span class="p">(</span><span class="n">forKey</span><span class="p">:</span> <span class="n">key</span><span class="p">)</span>
        <span class="kd">let</span> <span class="nv">updateDictionary</span> <span class="p">=</span> <span class="p">[</span><span class="n">kSecValueData</span><span class="p">:</span><span class="n">data</span><span class="p">]</span>

        <span class="n">SecItemUpdate</span><span class="p">(</span><span class="n">keychainQueryDictionary</span> <span class="k">as</span> <span class="n">CFDictionary</span><span class="p">,</span> <span class="n">updateDictionary</span> <span class="k">as</span> <span class="n">CFDictionary</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="kd">private</span> <span class="kd">func</span> <span class="nf">setupKeychainQueryDictionary</span><span class="p">(</span><span class="n">forKey</span> <span class="n">key</span><span class="p">:</span> <span class="nb">String</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="p">[</span><span class="nb">String</span><span class="p">:</span><span class="nb">Any</span><span class="p">]</span> <span class="p">{</span>
        <span class="kd">var</span> <span class="nv">keychainQueryDictionary</span><span class="p">:</span> <span class="p">[</span><span class="nb">String</span><span class="p">:</span><span class="nb">Any</span><span class="p">]</span> <span class="p">=</span> <span class="p">[</span><span class="n">kSecClass</span> <span class="k">as</span> <span class="nb">String</span><span class="p">:</span><span class="n">kSecClassGenericPassword</span><span class="p">]</span>
        <span class="n">keychainQueryDictionary</span><span class="p">[</span><span class="n">kSecAttrService</span> <span class="k">as</span> <span class="nb">String</span><span class="p">]</span> <span class="p">=</span> <span class="n">Bundle</span><span class="p">.</span><span class="n">main</span><span class="p">.</span><span class="n">bundleIdentifier</span><span class="p">!</span>

        <span class="k">if</span> <span class="kd">let</span> <span class="nv">encodedKey</span> <span class="p">=</span> <span class="n">key</span><span class="p">.</span><span class="n">data</span><span class="p">(</span><span class="n">using</span><span class="p">:</span> <span class="p">.</span><span class="n">utf8</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">keychainQueryDictionary</span><span class="p">[</span><span class="n">kSecAttrAccount</span> <span class="k">as</span> <span class="nb">String</span><span class="p">]</span> <span class="p">=</span> <span class="n">encodedKey</span>
        <span class="p">}</span>

        <span class="k">return</span> <span class="n">keychainQueryDictionary</span>
    <span class="p">}</span>
<span class="p">}</span>
</div></code></pre>]]></content:encoded></item><item><guid isPermaLink="true">https://oliver-epper.de/posts/how-to-create-a-self-sizing-gauge-componen-in-swiftui</guid><title>How to create a self-sizing gauge component in SwiftUI</title><description>How to create a self-sizing gauge component in swiftui</description><link>https://oliver-epper.de/posts/how-to-create-a-self-sizing-gauge-componen-in-swiftui</link><pubDate>Fri, 8 May 2020 09:41:00 +0200</pubDate><content:encoded><![CDATA[<p>SwiftUI is really great and building custom UI is actually pretty straight forward. Let's use <em>function builders</em> and <em>preference keys</em> to build a component that looks like this:</p><figure>
    <picture>
        <source srcset="/images/Gauges-dark.png" media="(prefers-color-scheme: dark)">
        <img src="https://oliver-epper.de/images/Gauges.png" alt="gauges">
    </picture>
</figure><p>The gauge features a center view that the user can either provide or the gauge will automatically show a text presenting it's value. So once we have our gauge component ready it can be used like this:</p><pre><code><div class="highlight"><span></span><span class="c1">// Simplest use possible, the Gauge will construct a centerView that shows: &#39;\(value) %&#39;.</span>
<span class="c1">// To prevent constant resizings when passing in other values the centerView width is calculated</span>
<span class="c1">// from the string: &#39;100 %&#39;</span>
<span class="n">Gauge</span><span class="p">(</span><span class="n">value</span><span class="p">:</span> <span class="n">value</span><span class="p">)</span>

<span class="c1">// provide your own centerView.</span>
<span class="n">Gauge</span><span class="p">(</span><span class="n">value</span><span class="p">:</span> <span class="n">value</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">Text</span><span class="p">(</span><span class="s">&quot;This is a fixed text&quot;</span><span class="p">)</span>
<span class="p">}</span>

<span class="c1">// use an image</span>
<span class="n">Gauge</span><span class="p">(</span><span class="n">value</span><span class="p">:</span> <span class="n">value</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">Image</span><span class="p">(</span><span class="n">systemName</span><span class="p">:</span> <span class="s">&quot;headphones&quot;</span><span class="p">)</span>
        <span class="p">.</span><span class="n">resizable</span><span class="p">()</span>
        <span class="p">.</span><span class="n">frame</span><span class="p">(</span><span class="n">width</span><span class="p">:</span> <span class="mi">55</span><span class="p">,</span> <span class="n">height</span><span class="p">:</span> <span class="mi">55</span><span class="p">)</span>
<span class="p">}</span>
</div></code></pre><p>The gauge will automatically adjust its size depending on the size of the center view.</p><h2>How is this built?</h2><pre><code><div class="highlight"><span></span><span class="kd">import</span> <span class="nc">SwiftUI</span>

<span class="kd">public</span> <span class="kd">struct</span> <span class="nc">Gauge</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;:</span> <span class="n">View</span> <span class="k">where</span> <span class="n">T</span><span class="p">:</span> <span class="n">View</span> <span class="p">{</span>
    <span class="kd">let</span> <span class="nv">centerView</span><span class="p">:</span> <span class="n">T</span>
    <span class="kd">let</span> <span class="nv">value</span><span class="p">:</span> <span class="nb">Double</span>
    
    <span class="kd">let</span> <span class="nv">thickness</span><span class="p">:</span> <span class="n">CGFloat</span> <span class="p">=</span> <span class="mi">5</span>
    <span class="kd">let</span> <span class="nv">scale</span><span class="p">:</span> <span class="n">CGFloat</span> <span class="p">=</span> <span class="mf">1.777</span>
    
    <span class="kd">let</span> <span class="nv">gradient</span> <span class="p">=</span> <span class="n">AngularGradient</span><span class="p">(</span>
        <span class="n">gradient</span><span class="p">:</span> <span class="n">Gradient</span><span class="p">(</span>
            <span class="n">colors</span><span class="p">:</span> <span class="p">[</span>
                <span class="p">.</span><span class="n">red</span><span class="p">,</span>
                <span class="p">.</span><span class="n">green</span>
            <span class="p">]</span>
        <span class="p">),</span>
        <span class="n">center</span><span class="p">:</span> <span class="p">.</span><span class="n">center</span>
    <span class="p">)</span>
    
    <span class="p">@</span><span class="n">State</span> <span class="kd">private</span> <span class="kd">var</span> <span class="nv">diameter</span><span class="p">:</span> <span class="n">CGFloat</span> <span class="p">=</span> <span class="mi">0</span>
    
    <span class="kd">public</span> <span class="kd">init</span><span class="p">(</span><span class="n">value</span><span class="p">:</span> <span class="nb">Double</span><span class="p">,</span> <span class="p">@</span><span class="n">GaugeBuilder</span> <span class="n">builder</span><span class="p">:</span> <span class="p">()</span> <span class="p">-&gt;</span> <span class="n">T</span><span class="p">)</span> <span class="p">{</span>
        <span class="kc">self</span><span class="p">.</span><span class="n">value</span> <span class="p">=</span> <span class="n">value</span>
        <span class="kc">self</span><span class="p">.</span><span class="n">centerView</span> <span class="p">=</span> <span class="n">builder</span><span class="p">()</span>
    <span class="p">}</span>
    
    <span class="kd">public</span> <span class="kd">var</span> <span class="nv">body</span><span class="p">:</span> <span class="n">some</span> <span class="n">View</span> <span class="p">{</span>
        <span class="n">ZStack</span> <span class="p">{</span>
            <span class="n">centerView</span><span class="p">.</span><span class="n">background</span><span class="p">(</span>
                <span class="n">GeometryReader</span> <span class="p">{</span> <span class="n">proxy</span> <span class="k">in</span>
                    <span class="n">Color</span><span class="p">.</span><span class="n">clear</span><span class="p">.</span><span class="n">preference</span><span class="p">(</span><span class="n">key</span><span class="p">:</span> <span class="n">GaugeWidthPreferenceKey</span><span class="p">.</span><span class="kc">self</span><span class="p">,</span> <span class="n">value</span><span class="p">:</span> <span class="n">proxy</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">width</span><span class="p">)</span>
                <span class="p">}</span>
            <span class="p">)</span>
            <span class="n">Group</span> <span class="p">{</span>
                <span class="n">Circle</span><span class="p">()</span>
                    <span class="p">.</span><span class="n">stroke</span><span class="p">(</span><span class="n">Color</span><span class="p">.</span><span class="n">primary</span><span class="p">.</span><span class="n">opacity</span><span class="p">(</span><span class="mf">0.2</span><span class="p">),</span> <span class="n">style</span><span class="p">:</span> <span class="p">.</span><span class="kd">init</span><span class="p">(</span><span class="n">lineWidth</span><span class="p">:</span> <span class="n">thickness</span><span class="o">/</span><span class="n">scale</span><span class="p">,</span> <span class="n">dash</span><span class="p">:</span> <span class="p">[</span><span class="mi">5</span><span class="p">]))</span>
                <span class="n">Circle</span><span class="p">()</span>
                    <span class="p">.</span><span class="n">trim</span><span class="p">(</span><span class="n">from</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="n">to</span><span class="p">:</span> <span class="n">CGFloat</span><span class="p">(</span><span class="n">value</span><span class="o">/</span><span class="mi">100</span><span class="p">))</span>
                    <span class="p">.</span><span class="n">stroke</span><span class="p">(</span><span class="n">gradient</span><span class="p">,</span> <span class="n">style</span><span class="p">:</span> <span class="p">.</span><span class="kd">init</span><span class="p">(</span><span class="n">lineWidth</span><span class="p">:</span> <span class="n">thickness</span><span class="p">))</span>
            <span class="p">}</span>
            <span class="p">.</span><span class="n">padding</span><span class="p">(</span><span class="n">thickness</span><span class="o">/</span><span class="mi">2</span><span class="p">)</span>
            <span class="p">.</span><span class="n">rotationEffect</span><span class="p">(.</span><span class="n">degrees</span><span class="p">(</span><span class="mi">90</span><span class="p">))</span>
            <span class="p">.</span><span class="n">frame</span><span class="p">(</span><span class="n">width</span><span class="p">:</span> <span class="n">diameter</span><span class="p">,</span> <span class="n">height</span><span class="p">:</span> <span class="n">diameter</span><span class="p">)</span>
        <span class="p">}.</span><span class="n">onPreferenceChange</span><span class="p">(</span><span class="n">GaugeWidthPreferenceKey</span><span class="p">.</span><span class="kc">self</span><span class="p">)</span> <span class="p">{</span> <span class="n">width</span> <span class="k">in</span>
            <span class="kc">self</span><span class="p">.</span><span class="n">diameter</span> <span class="p">=</span> <span class="n">width</span> <span class="o">*</span> <span class="kc">self</span><span class="p">.</span><span class="n">scale</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">extension</span> <span class="nc">Gauge</span> <span class="k">where</span> <span class="n">T</span> <span class="p">==</span> <span class="n">ZStack</span><span class="p">&lt;</span><span class="n">TupleView</span><span class="o">&lt;</span><span class="p">(</span><span class="n">Text</span><span class="p">,</span> <span class="n">Text</span><span class="p">)</span><span class="o">&gt;&gt;</span> <span class="p">{</span>
    <span class="kd">public</span> <span class="kd">init</span><span class="p">(</span><span class="n">value</span><span class="p">:</span> <span class="nb">Double</span><span class="p">)</span> <span class="p">{</span>
        <span class="kc">self</span><span class="p">.</span><span class="n">value</span> <span class="p">=</span> <span class="n">value</span>
        <span class="kc">self</span><span class="p">.</span><span class="n">centerView</span> <span class="p">=</span> <span class="n">ZStack</span> <span class="p">{</span>
            <span class="n">Text</span><span class="p">(</span><span class="s">&quot;100 %&quot;</span><span class="p">).</span><span class="n">foregroundColor</span><span class="p">(.</span><span class="n">clear</span><span class="p">)</span>
            <span class="n">Text</span><span class="p">(</span><span class="s">&quot;</span><span class="si">\(</span><span class="n">value</span><span class="p">,</span> <span class="n">specifier</span><span class="p">:</span> <span class="s">&quot;%.0f&quot;</span><span class="si">)</span><span class="s"> %&quot;</span><span class="p">)</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="p">@</span><span class="n">_functionBuilder</span>
<span class="kd">struct</span> <span class="nc">GaugeBuilder</span> <span class="p">{</span>
    <span class="kd">static</span> <span class="kd">func</span> <span class="nf">buildBlock</span><span class="p">&lt;</span><span class="n">T</span><span class="p">:</span> <span class="n">View</span><span class="p">&gt;(</span><span class="kc">_</span> <span class="n">centerView</span><span class="p">:</span> <span class="n">T</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="n">T</span> <span class="p">{</span>
        <span class="n">centerView</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">struct</span> <span class="nc">GaugeWidthPreferenceKey</span><span class="p">:</span> <span class="n">PreferenceKey</span> <span class="p">{</span>
    <span class="kd">typealias</span> <span class="n">Value</span> <span class="p">=</span> <span class="n">CGFloat</span>
    <span class="kd">static</span> <span class="kd">var</span> <span class="nv">defaultValue</span><span class="p">:</span> <span class="n">CGFloat</span> <span class="p">=</span> <span class="mi">0</span>
    
    <span class="kd">static</span> <span class="kd">func</span> <span class="nf">reduce</span><span class="p">(</span><span class="n">value</span><span class="p">:</span> <span class="kr">inout</span> <span class="n">CGFloat</span><span class="p">,</span> <span class="n">nextValue</span><span class="p">:</span> <span class="p">()</span> <span class="p">-&gt;</span> <span class="n">CGFloat</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">value</span> <span class="p">=</span> <span class="n">nextValue</span><span class="p">()</span>
    <span class="p">}</span>
<span class="p">}</span>
</div></code></pre><p>So that's the complete thing. There are a few things worth mentioning.</p><h3>Function Builder</h3><p>This is the magic behind the nice SwiftUI DSL. The <code>buildBlock</code> function returns what gets passed as the trailing closure to the Gauge. So instead of this:</p><pre><code><div class="highlight"><span></span><span class="n">Gauge</span><span class="p">(</span><span class="n">value</span><span class="p">:</span> <span class="n">value</span><span class="p">,</span> <span class="n">centerView</span><span class="p">:</span> <span class="n">Text</span><span class="p">(</span><span class="s">&quot;</span><span class="si">\(</span><span class="n">value</span><span class="si">)</span><span class="s"> %&quot;</span><span class="p">)</span>
</div></code></pre><p>you can write:</p><pre><code><div class="highlight"><span></span><span class="n">Gauge</span><span class="p">(</span><span class="n">value</span><span class="p">:</span> <span class="n">value</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">Text</span><span class="p">(</span><span class="s">&quot;</span><span class="si">\(</span><span class="n">value</span><span class="si">)</span><span class="s"> %&quot;</span><span class="p">)</span>
<span class="p">}</span>
</div></code></pre><h3>Preference Key</h3><p>In SwiftUI preference keys provide the possibility for a child view to pass values up to it's ancestors. While <code>@Environment</code>-objects are visible to child views, <code>PreferenceKeys</code> are visible to parents. What we want to achieve is that the Gauge knows the width of it's <code>centerView</code> and adjusts the circles accordingly. So we add the <code>.background</code>-modifier to the <code>centerView</code> and fill its background with a transparent color. We use the <code>GeometryReader</code>'s proxy to get the size of the invisible Color and save that in the <code>GaugeWidthPreferenceKey</code>.</p><p>Now we can use the <code>.onPreferenceChange</code>-modifier on the outer ZStack to calculate the diameter of our circles. Since diamater is a <code>@State</code>-property the body property of the Gauge will be evaluated and our circles are drawn with the desired diameter. Very cool!</p><h3>Providing a default center view</h3><p>There's one more thing required to make the Gauge work without the need to provide a centerView. We need an initializer that takes only the value as an argument. This can be done with an extension of the Gauge using conditional conformance.</p><h3>Why conformance to <code>ZStack&lt;TupleView&lt;(Text, Text)&gt;&gt;</code>?</h3><p>In order to prevent the Gauge to change its size with every different value between 0 and 100 % I build a default centerView that has the invisible string "100 %" and centered on top of that the string representing the actual value. So the <code>centerView</code> will always have the same width.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://oliver-epper.de/posts/a-deprecated-way-to-save-codables</guid><title>A deprecated way to save Codables – but why?</title><description>Saving one Codable a time directly to a file handle.</description><link>https://oliver-epper.de/posts/a-deprecated-way-to-save-codables</link><pubDate>Fri, 21 Feb 2020 09:41:00 +0100</pubDate><content:encoded><![CDATA[<p>I was looking for a way to save a lot of Codables that emerge over a potentially long timespan. Just keeping them in memory looked like the obvious thing to do but I wanted something failsafe and persistent.</p><p>Saving a Codable to a file in Swift couldn’t be easier: <code>JSONEncoder.encode(T)</code> returns <code>Data</code>. That can be written to an <code>URL</code> via <code>write(to: URL)</code>.</p><p>But what if I want to append?</p><p>I for sure don’t want to load the data from a file, decode it into a JSON array, append the new Codable to the array, encode the array to data and then use that data to overwrite the file.</p><p>I do the following:</p><p>An instance of <code>CodableFileBuffer&lt;T&gt;</code> keeps an open FileHandle on an URL and whenever I call <code>append(codable)</code> on that buffer it encodes to data and writes that data to the file handle.</p><pre><code><div class="highlight"><span></span><span class="kd">public</span> <span class="kd">func</span> <span class="nf">append</span><span class="p">(</span><span class="kc">_</span> <span class="n">codable</span><span class="p">:</span> <span class="n">T</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// encode codable</span>
    <span class="k">guard</span> <span class="kd">let</span> <span class="nv">data</span> <span class="p">=</span> <span class="k">try</span><span class="p">?</span> <span class="n">encoder</span><span class="p">.</span><span class="n">encode</span><span class="p">(</span><span class="n">codable</span><span class="p">)</span> <span class="k">else</span> <span class="p">{</span>
        <span class="bp">fatalError</span><span class="p">(</span><span class="s">&quot;Cannot encode </span><span class="si">\(</span><span class="n">codable</span><span class="si">)</span><span class="s">&quot;</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="c1">// write to FileHandle</span>
    <span class="n">fileHandle</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
    <span class="n">fileHandle</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="s">&quot;,&quot;</span><span class="p">.</span><span class="n">data</span><span class="p">(</span><span class="n">using</span><span class="p">:</span> <span class="p">.</span><span class="n">utf8</span><span class="p">)</span><span class="o">!</span><span class="p">)</span>

    <span class="c1">// log</span>
    <span class="n">os_log</span><span class="p">(</span><span class="s">&quot;Did append codable to CodableFileBuffer at: %@&quot;</span><span class="p">,</span> <span class="n">log</span><span class="p">:</span> <span class="n">OSLog</span><span class="p">.</span><span class="n">CodableFileBuffer</span><span class="p">,</span> <span class="n">type</span><span class="p">:</span> <span class="p">.</span><span class="n">debug</span><span class="p">,</span> <span class="n">fileURL</span><span class="p">.</span><span class="n">lastPathComponent</span><span class="p">)</span>
<span class="p">}</span>
</div></code></pre><p>This could use a little more error handling but it is just for demo purpose. Bare with me.</p><p>The only thing not completely obvious happens on line 9. This ist just the comma that is required to form a JSON array. When I create the FileHandle I immediately write an opening square bracket to the file and the <code>retrieve() -&gt; [Codable]</code> function appends the closing square-bracket to the data before it passes it to the JSONDecoder.</p><p>So the files content loos like this:</p><pre><code><div class="highlight"><span></span><span class="c1">// after initializing</span>
<span class="p">[</span>

<span class="c1">// after writing the first codable</span>
<span class="p">[{</span><span class="s">&quot;id&quot;</span><span class="p">:</span><span class="mi">1</span><span class="p">,</span> <span class="s">&quot;key&quot;</span><span class="p">:</span> <span class="s">&quot;value_one&quot;</span><span class="p">},</span>

<span class="c1">// after writing the second codable</span>
<span class="p">[{</span><span class="s">&quot;id&quot;</span><span class="p">:</span><span class="mi">1</span><span class="p">,</span> <span class="s">&quot;key&quot;</span><span class="p">:</span> <span class="s">&quot;value_one&quot;</span><span class="p">},{</span><span class="s">&quot;id&quot;</span><span class="p">:</span><span class="mi">2</span><span class="p">,</span> <span class="s">&quot;key&quot;</span><span class="p">:</span> <span class="s">&quot;another_value&quot;</span><span class="p">},</span>

<span class="c1">// the data that gets passed to the JSONDecoder looks like this</span>
<span class="p">[{</span><span class="s">&quot;id&quot;</span><span class="p">:</span><span class="mi">1</span><span class="p">,</span> <span class="s">&quot;key&quot;</span><span class="p">:</span> <span class="s">&quot;value_one&quot;</span><span class="p">},{</span><span class="s">&quot;id&quot;</span><span class="p">:</span><span class="mi">2</span><span class="p">,</span> <span class="s">&quot;key&quot;</span><span class="p">:</span> <span class="s">&quot;another_value&quot;</span><span class="p">},]</span>
</div></code></pre><p>I know the trailing comma is ugly and no valid json. It would be an easy fix but actually the <code>JSONDecoder</code> is pretty forgiving, here.</p><p>So what do we have now?</p><p>We have a Buffer that can be used like this:</p><pre><code><div class="highlight"><span></span><span class="kd">struct</span> <span class="nc">MyCodable</span><span class="p">:</span> <span class="n">Codable</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nv">id</span><span class="p">:</span> <span class="nb">Int</span>
    <span class="kd">var</span> <span class="nv">key</span><span class="p">:</span> <span class="nb">String</span>
<span class="p">}</span>

<span class="kd">let</span> <span class="nv">buffer</span> <span class="p">=</span> <span class="n">CodableFileBuffer</span><span class="p">&lt;</span><span class="n">MyCodable</span><span class="p">&gt;()</span>

<span class="n">buffer</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">MyCodable</span><span class="p">(</span><span class="n">id</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="n">key</span><span class="p">:</span> <span class="s">&quot;value_one&quot;</span><span class="p">))</span>
<span class="n">buffer</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">MyCodable</span><span class="p">(</span><span class="n">id</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="n">key</span><span class="p">:</span> <span class="s">&quot;another_value&quot;</span><span class="p">))</span>

<span class="kd">let</span> <span class="nv">myCodables</span> <span class="p">=</span> <span class="n">buffer</span><span class="p">.</span><span class="n">retrieve</span><span class="p">()</span>
</div></code></pre><p>Neat, isn’t it?</p><p>I use it to append thousands of Codables and it works pretty nice, so far. I measured it with instruments using tens of thousands to Codables. And I use it on real devices running for days.</p><p>Here’s the complete thing:</p><p><a href="https://github.com/oliverepper/CodableFileBuffer">CodeableFileBuffer</a></p><p>So what’s next?</p><p>I have a few questions I’d like to discuss:</p><ol><li>Why is <code>FileHandle.write</code> deprecated? It sure doesn’t look swifty. It can throw exceptions without beeing marked as throwing.</li><li>How are we supposed to replace this? How does the <code>writeabilityHandler</code> work? Can anyone provide an example?</li><li>What do you think? I guess there must be other or better ways to buffer Codables on disk.</li></ol><p>I’d really appreciate your ideas.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://oliver-epper.de/posts/how-to-use-coredata-inside-xcframework</guid><title>How to use CoreData inside xcframework</title><description>Use CoreData inside xcframework</description><link>https://oliver-epper.de/posts/how-to-use-coredata-inside-xcframework</link><pubDate>Thu, 20 Feb 2020 09:41:00 +0100</pubDate><content:encoded><![CDATA[<p>The company I work for distributes a binary framework that records data on an iPhone. Since I am in charge of that framework and I enjoy working with CoreData I wanted to use it to store the collected data. Sadly my first attempt of doing this resulted in an error when I tried to use the framework inside an actual app.</p><blockquote><p>@NSManaged not allowed on computed properties</p></blockquote><p>This is coming from the generated .swiftinterface file so there is not much you can do about it. With a little research and some help I found the good news:</p><p>[[ModuleInterfaces] Don't diagnose @NSManaged properties with accessors #27676](https://github.com/apple/swift/pull/27676)</p><p>So there is a fix 🤗</p><h2>Get the fix</h2><p>At the time of writing all you need to do is to download and use the Xcode beta (11.4) which comes with a newer version of the Swift compiler that already has the fix. The rest is then pretty straight forward.</p><h2>Create the DataModel</h2><p>You can use File-&gt;New and then search for „Data Model“ in the template chooser. I will call it `MyDataModel for demo purpose.</p><h2>Create an instance of NSPersistentContainer in your framework code</h2><p>This might not be obvious at first, but it is not hard. When you create an app with core data you get the following code inside your AppDelegate:</p><pre><code><div class="highlight"><span></span><span class="kr">lazy</span> <span class="kd">var</span> <span class="nv">persistentContainer</span><span class="p">:</span> <span class="n">NSPersistentContainer</span> <span class="p">=</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nv">container</span> <span class="p">=</span> <span class="n">NSPersistentContainer</span><span class="p">(</span><span class="n">name</span><span class="p">:</span> <span class="s">&quot;DemoApp&quot;</span><span class="p">)</span>
  <span class="n">container</span><span class="p">.</span><span class="n">loadPersistentStores</span><span class="p">(</span><span class="n">completionHandler</span><span class="p">:</span> <span class="p">{</span> <span class="p">(</span><span class="n">storeDescription</span><span class="p">,</span> <span class="n">error</span><span class="p">)</span> <span class="k">in</span>
    <span class="k">if</span> <span class="kd">let</span> <span class="nv">error</span> <span class="p">=</span> <span class="n">error</span> <span class="k">as</span> <span class="bp">NSError</span><span class="p">?</span> <span class="p">{</span>
      <span class="bp">fatalError</span><span class="p">(</span><span class="s">&quot;Unresolved error </span><span class="si">\(</span><span class="n">error</span><span class="si">)</span><span class="s">, </span><span class="si">\(</span><span class="n">error</span><span class="p">.</span><span class="n">userInfo</span><span class="si">)</span><span class="s">&quot;</span><span class="p">)</span>
    <span class="p">}</span>
  <span class="p">})</span>
  <span class="k">return</span> <span class="n">container</span>
<span class="p">}()</span>
</div></code></pre><p>While the initializer <code>init(name: String)</code> of <code>NSPersistentContainer</code> is pretty convenient we can’t use it, because in the context of the running app it simply couldn’t find the model. We need to use <code>init(name: String, managedObjectModel: NSManagedObjectModel)</code> to get the container. <code>NSManagedObjectModel</code> has an initializer that takes an <code>URL</code>.</p><p>So update the above to this instead:</p><pre><code><div class="highlight"><span></span><span class="kr">lazy</span> <span class="kd">var</span> <span class="nv">persistentContainer</span><span class="p">:</span> <span class="n">NSPersistentContainer</span> <span class="p">=</span> <span class="p">{</span>
    <span class="kd">let</span> <span class="nv">modelName</span> <span class="p">=</span> <span class="s">&quot;MyDataModel&quot;</span>
    <span class="k">guard</span> <span class="kd">let</span> <span class="nv">modelDir</span> <span class="p">=</span> <span class="n">Bundle</span><span class="p">(</span><span class="k">for</span><span class="p">:</span> <span class="n">type</span><span class="p">(</span><span class="n">of</span><span class="p">:</span> <span class="kc">self</span><span class="p">)).</span><span class="n">url</span><span class="p">(</span><span class="n">forResource</span><span class="p">:</span> <span class="n">modelName</span><span class="p">,</span> <span class="n">withExtension</span><span class="p">:</span> <span class="s">&quot;momd&quot;</span><span class="p">)</span> <span class="k">else</span> <span class="p">{</span> <span class="bp">fatalError</span><span class="p">()</span> <span class="p">}</span>
    <span class="k">guard</span> <span class="kd">let</span> <span class="nv">mom</span> <span class="p">=</span> <span class="bp">NSManagedObjectModel</span><span class="p">(</span><span class="n">contentsOf</span><span class="p">:</span> <span class="n">modelDir</span><span class="p">)</span> <span class="k">else</span> <span class="p">{</span> <span class="bp">fatalError</span><span class="p">()</span> <span class="p">}</span>

    <span class="kd">let</span> <span class="nv">container</span> <span class="p">=</span> <span class="n">NSPersistentContainer</span><span class="p">(</span><span class="n">name</span><span class="p">:</span> <span class="n">modelName</span><span class="p">,</span> <span class="n">managedObjectModel</span><span class="p">:</span> <span class="n">mom</span><span class="p">)</span>
    <span class="n">container</span><span class="p">.</span><span class="n">loadPersistentStores</span><span class="p">(</span><span class="n">completionHandler</span><span class="p">:</span> <span class="p">{</span> <span class="p">(</span><span class="n">storeDescription</span><span class="p">,</span> <span class="n">error</span><span class="p">)</span> <span class="k">in</span>
        <span class="k">if</span> <span class="kd">let</span> <span class="nv">error</span> <span class="p">=</span> <span class="n">error</span> <span class="k">as</span> <span class="bp">NSError</span><span class="p">?</span> <span class="p">{</span>
            <span class="bp">fatalError</span><span class="p">(</span><span class="s">&quot;Unresolved error </span><span class="si">\(</span><span class="n">error</span><span class="si">)</span><span class="s">, </span><span class="si">\(</span><span class="n">error</span><span class="p">.</span><span class="n">userInfo</span><span class="si">)</span><span class="s">&quot;</span><span class="p">)</span>
        <span class="p">}</span>
    <span class="p">})</span>
    <span class="k">return</span> <span class="n">container</span>
<span class="p">}()</span>
</div></code></pre><h2>Final</h2><p>Please be aware, that a CoreData App has a <code>saveContext</code> function that gets automatically called by the <code>SceneDelegate</code> when the scene enters the background. If you want to use CoreData in a framework I guess you’ll decide when to save by yourself, anyways.</p>]]></content:encoded></item></channel></rss>