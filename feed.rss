<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>oliep</title><description>Golf Professional &amp; Professional Software Developer</description><link>https://oliver-epper.de</link><language>en</language><lastBuildDate>Wed, 7 Jul 2021 09:43:53 +0200</lastBuildDate><pubDate>Wed, 7 Jul 2021 09:43:53 +0200</pubDate><ttl>250</ttl><atom:link href="https://oliver-epper.de/feed.rss" rel="self" type="application/rss+xml"/><item><guid isPermaLink="true">https://oliver-epper.de/posts/swift-and-cpp-interoperability-with-grpc-part1</guid><title>Swift and C++ interoperability with gRPC part 1</title><description>Let's (mis-)use gRPC to create Swift and C++ interoperability</description><link>https://oliver-epper.de/posts/swift-and-cpp-interoperability-with-grpc-part1</link><pubDate>Thu, 1 Jul 2021 09:41:00 +0200</pubDate><content:encoded><![CDATA[<h2>Prolog</h2><p>This is going to be fun. I will show you how you can embed a gRPC server written in C++ in a Swift programm that you can run on a Mac or an iPhone. I'll use another gRPC server written in Swift so that not only the Swift part can call into C++ via gRPC but the C++ part can call into Swift via gRPC as well – all in the same process, of course :-D</p><h2>But why?</h2><p>Well first it's <strong>fun</strong>, second you can learn a few things along the way and third: Given the right situation and constraints this can be a great idea!</p><h2>Warning</h2><p>There're definitely a few other – more straight forward ways – of doing Swift/C++ interoperability; not all great though and with different trade offs. If you read through the end you know enough to decide wether or not this is for you.</p><p><em>I do want to mention that Swift is – by far – the coolest programming language that I've came across and that it runs on Darwin, Linux and Windows and that you should really revistit your life choices if you manouvered yourself in the corner googleing for an article like this ;)</em></p><h2>Start easy - create a demo library</h2><p>Let's first create a little library in C++ that uses some random dependencies and cross-compile that for iPhone, iPhone simulators and the Mac running on Intel or Apple-Silicon. To enable multi-architectures we'll use fat-libs and to enable multi-platform support we'll stuff these fat-libs into a xcframework. All will be done via CMake, the <a href="https://github.com/leetal/ios-cmake">ios-cmake</a> toolchain and a small shell script.</p><h3>chukle library</h3><p>Start by creating a directory and a few files:</p><pre><code><div class="highlight"><span></span>mkdir chuckle <span class="o">&amp;&amp;</span>
touch chuckle/<span class="o">{</span>chuckle.cpp,chuckle.h,Cli.cpp,CMakeLists.txt<span class="o">}</span>
</div></code></pre><p>And add the following content:</p><h4>chuckle.h</h4><pre><code><div class="highlight"><span></span><span class="cp">#ifndef CHUCKLE_CHUCKLE_H</span>
<span class="cp">#define CHUCKLE_CHUCKLE_H</span>

<span class="cp">#include</span> <span class="cpf">&lt;string&gt;</span><span class="cp"></span>

<span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">joke</span><span class="p">();</span>

<span class="cp">#endif </span><span class="c1">//CHUCKLE_CHUCKLE_H</span>
</div></code></pre><h4>chuckle.cpp</h4><pre><code><div class="highlight"><span></span><span class="cp">#include</span> <span class="cpf">&quot;chuckle.h&quot;</span><span class="cp"></span>
<span class="cp">#include</span> <span class="cpf">&lt;cpr/cpr.h&gt;</span><span class="cp"></span>
<span class="cp">#include</span> <span class="cpf">&lt;nlohmann/json.hpp&gt;</span><span class="cp"></span>

<span class="k">using</span> <span class="k">namespace</span> <span class="n">cpr</span><span class="p">;</span>
<span class="k">using</span> <span class="n">json</span> <span class="o">=</span> <span class="n">nlohmann</span><span class="o">::</span><span class="n">json</span><span class="p">;</span>

<span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">joke</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">Response</span> <span class="n">r</span> <span class="o">=</span> <span class="n">Get</span><span class="p">(</span><span class="n">Url</span><span class="p">(</span><span class="s">&quot;https://api.chucknorris.io/jokes/random&quot;</span><span class="p">));</span>
    <span class="n">json</span> <span class="n">j</span> <span class="o">=</span> <span class="n">json</span><span class="o">::</span><span class="n">parse</span><span class="p">(</span><span class="n">r</span><span class="p">.</span><span class="n">text</span><span class="p">);</span>

    <span class="k">return</span> <span class="n">j</span><span class="p">[</span><span class="s">&quot;value&quot;</span><span class="p">];</span>
<span class="p">}</span>
</div></code></pre><h4>Cli.cpp</h4><pre><code><div class="highlight"><span></span><span class="cp">#include</span> <span class="cpf">&quot;chuckle.h&quot;</span><span class="cp"></span>
<span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp"></span>

<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">joke</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</div></code></pre><p>and finally</p><h4>CMakeLists.txt</h4><pre><code><div class="highlight"><span></span><span class="nb">cmake_minimum_required</span><span class="p">(</span><span class="s">VERSION</span> <span class="s">3.19</span><span class="p">)</span>
<span class="nb">project</span><span class="p">(</span><span class="s">chuckle</span><span class="p">)</span>

<span class="nb">set</span><span class="p">(</span><span class="s">CMAKE_CXX_STANDARD</span> <span class="s">17</span><span class="p">)</span>

<span class="nb">set</span><span class="p">(</span><span class="s">CPR_BUILD_TESTS</span> <span class="s">OFF</span><span class="p">)</span>
<span class="nb">set</span><span class="p">(</span><span class="s">CPR_BUILD_TESTS_SSL</span> <span class="s">OFF</span><span class="p">)</span>

<span class="nb">include</span><span class="p">(</span><span class="s">FetchContent</span><span class="p">)</span>
<span class="nb">FetchContent_Declare</span><span class="p">(</span>
        <span class="s">cpr</span>
        <span class="s">GIT_REPOSITORY</span> <span class="s">https://github.com/whoshuu/cpr.git</span>
        <span class="s">GIT_TAG</span> <span class="s">1.6.2</span><span class="p">)</span>
<span class="nb">FetchContent_MakeAvailable</span><span class="p">(</span><span class="s">cpr</span><span class="p">)</span>

<span class="nb">FetchContent_Declare</span><span class="p">(</span><span class="s">json</span>
        <span class="s">GIT_REPOSITORY</span> <span class="s">https://github.com/nlohmann/json.git</span>
        <span class="s">GIT_TAG</span> <span class="s">v3.7.3</span><span class="p">)</span>
<span class="nb">FetchContent_GetProperties</span><span class="p">(</span><span class="s">json</span><span class="p">)</span>
<span class="nb">if</span><span class="p">(</span><span class="s">NOT</span> <span class="s">json_POPULATED</span><span class="p">)</span>
    <span class="nb">FetchContent_Populate</span><span class="p">(</span><span class="s">json</span><span class="p">)</span>
    <span class="nb">add_subdirectory</span><span class="p">(</span><span class="o">${</span><span class="nv">json_SOURCE_DIR</span><span class="o">}</span> <span class="o">${</span><span class="nv">json_BINARY_DIR</span><span class="o">}</span> <span class="s">EXCLUDE_FROM_ALL</span><span class="p">)</span>
<span class="nb">endif</span><span class="p">()</span>

<span class="nb">add_library</span><span class="p">(</span><span class="s">chuckle</span> <span class="s">chuckle.cpp</span> <span class="s">chuckle.h</span><span class="p">)</span>
<span class="nb">add_executable</span><span class="p">(</span><span class="s">joke</span> <span class="s">Cli.cpp</span><span class="p">)</span>

<span class="nb">target_link_libraries</span><span class="p">(</span><span class="s">chuckle</span> <span class="s">PRIVATE</span> <span class="s">cpr::cpr</span> <span class="s">nlohmann_json::nlohmann_json</span><span class="p">)</span>
<span class="nb">target_link_libraries</span><span class="p">(</span><span class="s">joke</span> <span class="s">chuckle</span><span class="p">)</span>
</div></code></pre><p>I am not a C++ programmer but I think the C++ code is quite readable. There's a free function <code>joke()</code> that returns a <code>std::string</code> representing a Joke – how usefull is that!</p><p>I used two dependencies for this great programm:</p><ul><li><a href="https://github.com/whoshuu/cpr">C++ Requests: Curl for People</a></li><li><a href="https://github.com/nlohmann/json">JSON for Modern C++</a></li></ul><p>If you never used CMake before – I didn't – let me point out a few things. <code>add_library</code> and <code>add_executable</code> add a target to the CMake project. <code>target_link_libraries</code> configures the linker to link build artefacts into products. In the above example you will end with the library <code>libchuckle</code> that we will use and a command line programm <code>joke</code> that you can run to test the library.</p><p>Both <code>FetchContent</code>-blocks are taken from the documentation from the two libraries that we use. Note that I configured the build of cpr by setting the two variables <code>CPR_BUILD_TESTS</code> and <code>CPR_BUILD_TESTS_SSL</code> to <code>OFF</code>.</p><p>We should be able to print a joke to the terminal, now. From inside the <code>chuckle</code> folder do the following:</p><pre><code><div class="highlight"><span></span>mkdir out <span class="o">&amp;&amp;</span>
<span class="nb">cd</span> out <span class="o">&amp;&amp;</span>
cmake ..
</div></code></pre><p>This will download the dependencies and configure the build system. Once that's done you can build everything with:</p><pre><code><div class="highlight"><span></span>make
</div></code></pre><p>and run the cli:</p><pre><code><div class="highlight"><span></span>./joke
</div></code></pre><blockquote><p>Chuck Norris can mix water and oil.</p></blockquote><p>Let's inspect what we have got so far:</p><ul><li>the <code>joke</code> programm and</li><li><code>libchuckle.dylib</code></li></ul><p>Check the binary with <code>otool -L joke</code> you'll see something like this:</p><pre><code><div class="highlight"><span></span><span class="n">joke</span><span class="p">:</span>
	<span class="p">@</span><span class="n">rpath</span><span class="o">/</span><span class="n">libchuckle</span><span class="p">.</span><span class="n">dylib</span> <span class="p">(</span><span class="n">compatibility</span> <span class="n">version</span> <span class="mf">0.0</span><span class="p">.</span><span class="mi">0</span><span class="p">,</span> <span class="n">current</span> <span class="n">version</span> <span class="mf">0.0</span><span class="p">.</span><span class="mi">0</span><span class="p">)</span>
	<span class="p">@</span><span class="n">rpath</span><span class="o">/</span><span class="n">libcpr</span><span class="p">.</span><span class="mf">1.</span><span class="n">dylib</span> <span class="p">(</span><span class="n">compatibility</span> <span class="n">version</span> <span class="mf">1.0</span><span class="p">.</span><span class="mi">0</span><span class="p">,</span> <span class="n">current</span> <span class="n">version</span> <span class="mf">1.6</span><span class="p">.</span><span class="mi">0</span><span class="p">)</span>
	<span class="p">@</span><span class="n">rpath</span><span class="o">/</span><span class="n">libcurl</span><span class="o">-</span><span class="n">d</span><span class="p">.</span><span class="n">dylib</span> <span class="p">(</span><span class="n">compatibility</span> <span class="n">version</span> <span class="mf">0.0</span><span class="p">.</span><span class="mi">0</span><span class="p">,</span> <span class="n">current</span> <span class="n">version</span> <span class="mf">0.0</span><span class="p">.</span><span class="mi">0</span><span class="p">)</span>
	<span class="o">/</span><span class="n">System</span><span class="o">/</span><span class="n">Library</span><span class="o">/</span><span class="n">Frameworks</span><span class="o">/</span><span class="n">CoreFoundation</span><span class="p">.</span><span class="n">framework</span><span class="o">/</span><span class="n">Versions</span><span class="o">/</span><span class="n">A</span><span class="o">/</span><span class="n">CoreFoundation</span> <span class="p">(</span><span class="n">compatibility</span> <span class="n">version</span> <span class="mf">150.0</span><span class="p">.</span><span class="mi">0</span><span class="p">,</span> <span class="n">current</span> <span class="n">version</span> <span class="mf">1775.118</span><span class="p">.</span><span class="mi">101</span><span class="p">)</span>
	<span class="o">/</span><span class="n">System</span><span class="o">/</span><span class="n">Library</span><span class="o">/</span><span class="n">Frameworks</span><span class="o">/</span><span class="n">Security</span><span class="p">.</span><span class="n">framework</span><span class="o">/</span><span class="n">Versions</span><span class="o">/</span><span class="n">A</span><span class="o">/</span><span class="n">Security</span> <span class="p">(</span><span class="n">compatibility</span> <span class="n">version</span> <span class="mf">1.0</span><span class="p">.</span><span class="mi">0</span><span class="p">,</span> <span class="n">current</span> <span class="n">version</span> <span class="mf">59754.100</span><span class="p">.</span><span class="mi">106</span><span class="p">)</span>
	<span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">lib</span><span class="o">/</span><span class="n">libz</span><span class="p">.</span><span class="mf">1.</span><span class="n">dylib</span> <span class="p">(</span><span class="n">compatibility</span> <span class="n">version</span> <span class="mf">1.0</span><span class="p">.</span><span class="mi">0</span><span class="p">,</span> <span class="n">current</span> <span class="n">version</span> <span class="mf">1.2</span><span class="p">.</span><span class="mi">11</span><span class="p">)</span>
	<span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">lib</span><span class="o">/</span><span class="n">libc</span><span class="o">++</span><span class="p">.</span><span class="mf">1.</span><span class="n">dylib</span> <span class="p">(</span><span class="n">compatibility</span> <span class="n">version</span> <span class="mf">1.0</span><span class="p">.</span><span class="mi">0</span><span class="p">,</span> <span class="n">current</span> <span class="n">version</span> <span class="mf">905.6</span><span class="p">.</span><span class="mi">0</span><span class="p">)</span>
	<span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">lib</span><span class="o">/</span><span class="n">libSystem</span><span class="p">.</span><span class="n">B</span><span class="p">.</span><span class="n">dylib</span> <span class="p">(</span><span class="n">compatibility</span> <span class="n">version</span> <span class="mf">1.0</span><span class="p">.</span><span class="mi">0</span><span class="p">,</span> <span class="n">current</span> <span class="n">version</span> <span class="mf">1292.100</span><span class="p">.</span><span class="mi">5</span><span class="p">)</span>
</div></code></pre><p>That tells you that joke needs libchuckle.dylib to operate and that it doesn't really carry the meat from libchuckle in the binary. Check the size of the binary:</p><pre><code><div class="highlight"><span></span>ls -lahs joke
</div></code></pre><p>It's 64k.</p><p>If you have <a href="https://www.hopperapp.com">Hopper</a> – which I highly recommend – I want to show you something. Open the binary in Hopper and search for the label joke(). Click on the first occurence and then enable pseudo-code in Hopper:</p><pre><code><div class="highlight"><span></span><span class="n">void</span> <span class="n">_Z4jokev</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">pointer</span> <span class="n">to</span> <span class="n">joke</span><span class="p">();</span>
    <span class="k">return</span><span class="p">;</span>
<span class="p">}</span>
</div></code></pre><p>It's just a pointer. Not the real deal. <code>libchuckle.dylib</code> has it. Check if you want to :-D</p><h4>build a static library</h4><p>Building libchuckle as a static library is easy with CMake. Just add the STATIC keyword to the chuckle target:</p><pre><code><div class="highlight"><span></span><span class="nb">add_library</span><span class="p">(</span><span class="s">chuckle</span> <span class="s">STATIC</span> <span class="s">chuckle.cpp</span> <span class="s">chuckle.h</span><span class="p">)</span>
</div></code></pre><p>This time you might want to generate the build system in another folder:</p><pre><code><div class="highlight"><span></span>mkdir static <span class="o">&amp;&amp;</span>
<span class="nb">cd</span> static <span class="o">&amp;&amp;</span>
cmake .. <span class="o">&amp;&amp;</span>
make
</div></code></pre><p>Now <code>joke</code> is much larger (854 kb) and instead of <code>libchuckle.dylib</code> we have <code>libchuckle.a</code> a static library. If you open <code>joke</code> in Hopper again you'll see the following as pseudo-code for <code>joke()</code>:</p><pre><code><div class="highlight"><span></span><span class="n">int</span> <span class="n">__Z4jokev</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">r31</span> <span class="p">=</span> <span class="n">r31</span> <span class="o">-</span> <span class="mh">0x1d0</span><span class="p">;</span>
    <span class="n">var_10</span> <span class="p">=</span> <span class="n">r28</span><span class="p">;</span>
    <span class="n">stack</span><span class="p">[</span><span class="o">-</span><span class="mi">24</span><span class="p">]</span> <span class="p">=</span> <span class="n">r27</span><span class="p">;</span>
    <span class="n">saved_fp</span> <span class="p">=</span> <span class="n">r29</span><span class="p">;</span>
    <span class="n">stack</span><span class="p">[</span><span class="o">-</span><span class="mi">8</span><span class="p">]</span> <span class="p">=</span> <span class="n">r30</span><span class="p">;</span>
    <span class="n">r29</span> <span class="p">=</span> <span class="p">&amp;</span><span class="n">saved_fp</span><span class="p">;</span>
    <span class="n">var_1A8</span> <span class="p">=</span> <span class="n">r8</span><span class="p">;</span>
    <span class="n">cpr</span><span class="p">::</span><span class="n">Url</span><span class="p">::</span><span class="n">Url</span><span class="p">(&amp;</span><span class="n">stack</span><span class="p">[</span><span class="o">-</span><span class="mi">384</span><span class="p">]);</span>
    <span class="n">cpr</span><span class="p">::</span><span class="n">Response</span> <span class="n">cpr</span><span class="p">::</span><span class="n">Get</span><span class="p">&lt;</span><span class="n">cpr</span><span class="p">::</span><span class="n">Url</span><span class="p">&gt;(&amp;</span><span class="n">stack</span><span class="p">[</span><span class="o">-</span><span class="mi">384</span><span class="p">]);</span>
    <span class="n">cpr</span><span class="p">::</span><span class="n">Url</span><span class="p">::</span><span class="o">~</span><span class="n">Url</span><span class="p">();</span>
    <span class="n">nlohmann</span><span class="p">::</span><span class="n">detail</span><span class="p">::</span><span class="n">input_adapter</span><span class="p">::</span><span class="n">input_adapter</span><span class="p">&lt;</span><span class="n">std</span><span class="p">::</span><span class="n">__1</span><span class="p">::</span><span class="n">basic_string</span><span class="p">&lt;</span><span class="n">char</span><span class="p">,</span> <span class="n">std</span><span class="p">::</span><span class="n">__1</span><span class="p">::</span><span class="n">char_traits</span><span class="p">&lt;</span><span class="n">char</span><span class="p">&gt;,</span> <span class="n">std</span><span class="p">::</span><span class="n">__1</span><span class="p">::</span><span class="n">allocator</span><span class="p">&lt;</span><span class="n">char</span><span class="p">&gt;</span> <span class="o">&gt;</span><span class="p">,</span> <span class="mi">0</span><span class="p">&gt;(&amp;</span><span class="n">stack</span><span class="p">[</span><span class="o">-</span><span class="mi">432</span><span class="p">]);</span>
    <span class="n">std</span><span class="p">::</span><span class="n">__1</span><span class="p">::</span><span class="n">function</span><span class="p">&lt;</span><span class="n">bool</span> <span class="p">(</span><span class="n">r29</span> <span class="o">-</span> <span class="mh">0x38</span><span class="p">);</span>
    <span class="n">nlohmann</span><span class="p">::</span><span class="n">basic_json</span><span class="p">&lt;</span><span class="n">std</span><span class="p">::</span><span class="n">__1</span><span class="p">::</span><span class="bp">map</span><span class="p">,</span> <span class="n">std</span><span class="p">::</span><span class="n">__1</span><span class="p">::</span><span class="n">vector</span><span class="p">,</span> <span class="n">std</span><span class="p">::</span><span class="n">__1</span><span class="p">::</span><span class="n">basic_string</span><span class="p">&lt;</span><span class="n">char</span><span class="p">,</span> <span class="n">std</span><span class="p">::</span><span class="n">__1</span><span class="p">::</span><span class="n">char_traits</span><span class="p">&lt;</span><span class="n">char</span><span class="p">&gt;,</span> <span class="n">std</span><span class="p">::</span><span class="n">__1</span><span class="p">::</span><span class="n">allocator</span><span class="p">&lt;</span><span class="n">char</span><span class="p">&gt;</span> <span class="o">&gt;</span><span class="p">,</span> <span class="n">bool</span><span class="p">,</span> <span class="n">long</span> <span class="n">long</span><span class="p">,</span> <span class="n">unsigned</span> <span class="n">long</span> <span class="n">long</span><span class="p">,</span> <span class="n">double</span><span class="p">,</span> <span class="n">std</span><span class="p">::</span><span class="n">__1</span><span class="p">::</span><span class="n">allocator</span><span class="p">,</span> <span class="n">nlohmann</span><span class="p">::</span><span class="n">adl_serializer</span><span class="p">&gt;::</span><span class="n">parse</span><span class="p">(&amp;</span><span class="n">stack</span><span class="p">[</span><span class="o">-</span><span class="mi">432</span><span class="p">],</span> <span class="n">r29</span> <span class="o">-</span> <span class="mh">0x38</span><span class="p">,</span> <span class="mh">0x1</span><span class="p">);</span>
    <span class="n">std</span><span class="p">::</span><span class="n">__1</span><span class="p">::</span><span class="n">function</span><span class="p">&lt;</span><span class="n">bool</span> <span class="p">();</span>
    <span class="n">nlohmann</span><span class="p">::</span><span class="n">detail</span><span class="p">::</span><span class="n">input_adapter</span><span class="p">::</span><span class="o">~</span><span class="n">input_adapter</span><span class="p">();</span>
    <span class="n">r0</span> <span class="p">=</span> <span class="n">nlohmann</span><span class="p">::</span><span class="n">basic_json</span><span class="p">&lt;</span><span class="n">std</span><span class="p">::</span><span class="n">__1</span><span class="p">::</span><span class="bp">map</span><span class="p">,</span> <span class="n">std</span><span class="p">::</span><span class="n">__1</span><span class="p">::</span><span class="n">vector</span><span class="p">,</span> <span class="n">std</span><span class="p">::</span><span class="n">__1</span><span class="p">::</span><span class="n">basic_string</span><span class="p">&lt;</span><span class="n">char</span><span class="p">,</span> <span class="n">std</span><span class="p">::</span><span class="n">__1</span><span class="p">::</span><span class="n">char_traits</span><span class="p">&lt;</span><span class="n">char</span><span class="p">&gt;,</span> <span class="n">std</span><span class="p">::</span><span class="n">__1</span><span class="p">::</span><span class="n">allocator</span><span class="p">&lt;</span><span class="n">char</span><span class="p">&gt;</span> <span class="o">&gt;</span><span class="p">,</span> <span class="n">bool</span><span class="p">,</span> <span class="n">long</span> <span class="n">long</span><span class="p">,</span> <span class="n">unsigned</span> <span class="n">long</span> <span class="n">long</span><span class="p">,</span> <span class="n">double</span><span class="p">,</span> <span class="n">std</span><span class="p">::</span><span class="n">__1</span><span class="p">::</span><span class="n">allocator</span><span class="p">,</span> <span class="n">nlohmann</span><span class="p">::</span><span class="n">adl_serializer</span><span class="p">&gt;</span><span class="o">&amp;</span> <span class="n">nlohmann</span><span class="p">::</span><span class="n">basic_json</span><span class="p">&lt;</span><span class="n">std</span><span class="p">::</span><span class="n">__1</span><span class="p">::</span><span class="bp">map</span><span class="p">,</span> <span class="n">std</span><span class="p">::</span><span class="n">__1</span><span class="p">::</span><span class="n">vector</span><span class="p">,</span> <span class="n">std</span><span class="p">::</span><span class="n">__1</span><span class="p">::</span><span class="n">basic_string</span><span class="p">&lt;</span><span class="n">char</span><span class="p">,</span> <span class="n">std</span><span class="p">::</span><span class="n">__1</span><span class="p">::</span><span class="n">char_traits</span><span class="p">&lt;</span><span class="n">char</span><span class="p">&gt;,</span> <span class="n">std</span><span class="p">::</span><span class="n">__1</span><span class="p">::</span><span class="n">allocator</span><span class="p">&lt;</span><span class="n">char</span><span class="p">&gt;</span> <span class="o">&gt;</span><span class="p">,</span> <span class="n">bool</span><span class="p">,</span> <span class="n">long</span> <span class="n">long</span><span class="p">,</span> <span class="n">unsigned</span> <span class="n">long</span> <span class="n">long</span><span class="p">,</span> <span class="n">double</span><span class="p">,</span> <span class="n">std</span><span class="p">::</span><span class="n">__1</span><span class="p">::</span><span class="n">allocator</span><span class="p">,</span> <span class="n">nlohmann</span><span class="p">::</span><span class="n">adl_serializer</span><span class="p">&gt;::</span><span class="kd">operator</span><span class="p">[]&lt;</span><span class="n">char</span> <span class="n">const</span><span class="p">&gt;(&amp;</span><span class="n">stack</span><span class="p">[</span><span class="o">-</span><span class="mi">416</span><span class="p">]);</span>
    <span class="n">var_1C0</span> <span class="p">=</span> <span class="n">r0</span><span class="p">;</span>
    <span class="n">nlohmann</span><span class="p">::</span><span class="n">basic_json</span><span class="p">&lt;</span><span class="n">std</span><span class="p">::</span><span class="n">__1</span><span class="p">::</span><span class="bp">map</span><span class="p">,</span> <span class="n">std</span><span class="p">::</span><span class="n">__1</span><span class="p">::</span><span class="n">vector</span><span class="p">,</span> <span class="n">std</span><span class="p">::</span><span class="n">__1</span><span class="p">::</span><span class="n">basic_string</span><span class="p">&lt;</span><span class="n">char</span><span class="p">,</span> <span class="n">std</span><span class="p">::</span><span class="n">__1</span><span class="p">::</span><span class="n">char_traits</span><span class="p">&lt;</span><span class="n">char</span><span class="p">&gt;,</span> <span class="n">std</span><span class="p">::</span><span class="n">__1</span><span class="p">::</span><span class="n">allocator</span><span class="p">&lt;</span><span class="n">char</span><span class="p">&gt;</span> <span class="o">&gt;</span><span class="p">,</span> <span class="n">bool</span><span class="p">,</span> <span class="n">long</span> <span class="n">long</span><span class="p">,</span> <span class="n">unsigned</span> <span class="n">long</span> <span class="n">long</span><span class="p">,</span> <span class="n">double</span><span class="p">,</span> <span class="n">std</span><span class="p">::</span><span class="n">__1</span><span class="p">::</span><span class="n">allocator</span><span class="p">,</span> <span class="n">nlohmann</span><span class="p">::</span><span class="n">adl_serializer</span><span class="p">&gt;::</span><span class="kd">operator</span> <span class="n">std</span><span class="p">::</span><span class="n">__1</span><span class="p">::</span><span class="n">basic_string</span><span class="p">&lt;</span><span class="n">char</span><span class="p">,</span> <span class="n">std</span><span class="p">::</span><span class="n">__1</span><span class="p">::</span><span class="n">char_traits</span><span class="p">&lt;</span><span class="n">char</span><span class="p">&gt;,</span> <span class="n">std</span><span class="p">::</span><span class="n">__1</span><span class="p">::</span><span class="n">allocator</span><span class="p">&lt;</span><span class="n">char</span><span class="p">&gt;</span> <span class="o">&gt;&lt;</span><span class="n">std</span><span class="p">::</span><span class="n">__1</span><span class="p">::</span><span class="n">basic_string</span><span class="p">&lt;</span><span class="n">char</span><span class="p">,</span> <span class="n">std</span><span class="p">::</span><span class="n">__1</span><span class="p">::</span><span class="n">char_traits</span><span class="p">&lt;</span><span class="n">char</span><span class="p">&gt;,</span> <span class="n">std</span><span class="p">::</span><span class="n">__1</span><span class="p">::</span><span class="n">allocator</span><span class="p">&lt;</span><span class="n">char</span><span class="p">&gt;</span> <span class="o">&gt;</span><span class="p">,</span> <span class="mi">0</span><span class="p">&gt;();</span>
    <span class="n">var_18</span> <span class="p">=</span> <span class="o">**</span><span class="n">___stack_chk_guard</span><span class="p">;</span>
    <span class="n">nlohmann</span><span class="p">::</span><span class="n">basic_json</span><span class="p">&lt;</span><span class="n">std</span><span class="p">::</span><span class="n">__1</span><span class="p">::</span><span class="bp">map</span><span class="p">,</span> <span class="n">std</span><span class="p">::</span><span class="n">__1</span><span class="p">::</span><span class="n">vector</span><span class="p">,</span> <span class="n">std</span><span class="p">::</span><span class="n">__1</span><span class="p">::</span><span class="n">basic_string</span><span class="p">&lt;</span><span class="n">char</span><span class="p">,</span> <span class="n">std</span><span class="p">::</span><span class="n">__1</span><span class="p">::</span><span class="n">char_traits</span><span class="p">&lt;</span><span class="n">char</span><span class="p">&gt;,</span> <span class="n">std</span><span class="p">::</span><span class="n">__1</span><span class="p">::</span><span class="n">allocator</span><span class="p">&lt;</span><span class="n">char</span><span class="p">&gt;</span> <span class="o">&gt;</span><span class="p">,</span> <span class="n">bool</span><span class="p">,</span> <span class="n">long</span> <span class="n">long</span><span class="p">,</span> <span class="n">unsigned</span> <span class="n">long</span> <span class="n">long</span><span class="p">,</span> <span class="n">double</span><span class="p">,</span> <span class="n">std</span><span class="p">::</span><span class="n">__1</span><span class="p">::</span><span class="n">allocator</span><span class="p">,</span> <span class="n">nlohmann</span><span class="p">::</span><span class="n">adl_serializer</span><span class="p">&gt;::</span><span class="o">~</span><span class="n">basic_json</span><span class="p">();</span>
    <span class="n">r0</span> <span class="p">=</span> <span class="n">cpr</span><span class="p">::</span><span class="n">Response</span><span class="p">::</span><span class="o">~</span><span class="n">Response</span><span class="p">();</span>
    <span class="n">r8</span> <span class="p">=</span> <span class="o">*</span><span class="n">___stack_chk_guard</span><span class="p">;</span>
    <span class="n">r8</span> <span class="p">=</span> <span class="o">*</span><span class="n">r8</span><span class="p">;</span>
    <span class="n">r8</span> <span class="p">=</span> <span class="n">r8</span> <span class="o">-</span> <span class="n">var_18</span><span class="p">;</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">r8</span> <span class="o">!=</span> <span class="mh">0x0</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">r0</span> <span class="p">=</span> <span class="n">__stack_chk_fail</span><span class="p">();</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">r0</span><span class="p">;</span>
<span class="p">}</span>
</div></code></pre><p>You can tell by the size of <code>libchuckle.a</code> (1,9Mb) that it should contain everything we need to proceed :-D</p><h4>make it cross platform</h4><p>To make this cross platform you need to change a few things. First you need to link alle the required object files into the libchuckle.a this can be done with CMake:</p><pre><code><div class="highlight"><span></span><span class="n">add_library</span><span class="p">(</span>
        <span class="n">chuckle</span>
        <span class="n">STATIC</span>
        <span class="n">chuckle</span><span class="p">.</span><span class="n">cpp</span>
        <span class="err">$</span><span class="p">&lt;</span><span class="n">TARGET_OBJECTS</span><span class="p">:</span><span class="n">cpr</span><span class="p">&gt;</span>
        <span class="err">$</span><span class="p">&lt;</span><span class="n">TARGET_OBJECTS</span><span class="p">:</span><span class="n">libcurl</span><span class="p">&gt;</span>
        <span class="err">$</span><span class="p">&lt;</span><span class="n">TARGET_OBJECTS</span><span class="p">:</span><span class="n">zlib</span><span class="p">&gt;</span>
<span class="p">)</span>
</div></code></pre><p>This links the object files into libchuckle.</p><p>To build this for multiple architectures and platforms we need the <a href="https://github.com/leetal/ios-cmake">ios-cmake</a> toolchain. Just copy it into the <code>chuckle</code> folder and while you're at it delete <code>static</code> and <code>out</code>.</p><p>You can now setup the build system for iOS devices with the following command:</p><pre><code><div class="highlight"><span></span>cmake -S ./ -DCMAKE_BUILD_TYPE<span class="o">=</span>RelWithDebInfo <span class="se">\</span>
            -DPLATFORM<span class="o">=</span>OS64 <span class="se">\</span>
            -DDEPLOYMENT_TARGET<span class="o">=</span><span class="m">14</span>.0 <span class="se">\</span>
            -DCMAKE_TOOLCHAIN_FILE<span class="o">=</span>ios.toolchain.cmake <span class="se">\</span>
            -DHAVE_SOCKET_LIBSOCKET<span class="o">=</span>FALSE <span class="se">\</span>
            -DHAVE_LIBSOCKET<span class="o">=</span>FALSE <span class="se">\</span>
            -B out/os64
</div></code></pre><p>If that step fails, please run it again. For <a href="https://github.com/leetal/ios-cmake/issues/110">reasons</a> that I haven't understand yet this fails on the first run but works on the second run for me and others.</p><p>and run the build process with:</p><pre><code><div class="highlight"><span></span>cmake --build ./out/os64 --config RelWithDebInfo
</div></code></pre><p>My complete build script looks like this:</p><pre><code><div class="highlight"><span></span><span class="ch">#!/bin/sh</span>

<span class="c1"># iOS &amp; simulator running on arm64 &amp; x86_64</span>
cmake -S ./ -DCMAKE_BUILD_TYPE<span class="o">=</span>RelWithDebInfo <span class="se">\</span>
            -DPLATFORM<span class="o">=</span>OS64 <span class="se">\</span>
            -DDEPLOYMENT_TARGET<span class="o">=</span><span class="m">14</span>.0 <span class="se">\</span>
            -DCMAKE_TOOLCHAIN_FILE<span class="o">=</span>ios.toolchain.cmake <span class="se">\</span>
            -DHAVE_SOCKET_LIBSOCKET<span class="o">=</span>FALSE <span class="se">\</span>
            -DHAVE_LIBSOCKET<span class="o">=</span>FALSE <span class="se">\</span>
            -B out/os64
cmake -S ./ -DCMAKE_BUILD_TYPE<span class="o">=</span>RelWithDebInfo <span class="se">\</span>
            -DPLATFORM<span class="o">=</span>SIMULATORARM64 <span class="se">\</span>
            -DDEPLOYMENT_TARGET<span class="o">=</span><span class="m">14</span>.0 <span class="se">\</span>
            -DCMAKE_TOOLCHAIN_FILE<span class="o">=</span>ios.toolchain.cmake <span class="se">\</span>
            -DHAVE_SOCKET_LIBSOCKET<span class="o">=</span>FALSE <span class="se">\</span>
            -DHAVE_LIBSOCKET<span class="o">=</span>FALSE <span class="se">\</span>
            -B out/simulator_arm64
cmake -S ./ -DCMAKE_BUILD_TYPE<span class="o">=</span>RelWithDebInfo <span class="se">\</span>
            -DPLATFORM<span class="o">=</span>SIMULATOR64 <span class="se">\</span>
            -DDEPLOYMENT_TARGET<span class="o">=</span><span class="m">14</span>.0 <span class="se">\</span>
            -DCMAKE_TOOLCHAIN_FILE<span class="o">=</span>ios.toolchain.cmake <span class="se">\</span>
            -DHAVE_SOCKET_LIBSOCKET<span class="o">=</span>FALSE <span class="se">\</span>
            -DHAVE_LIBSOCKET<span class="o">=</span>FALSE <span class="se">\</span>
            -B out/simulator_x86_64

<span class="c1"># macOS on arm64</span>
cmake -S ./ -DCMAKE_BUILD_TYPE<span class="o">=</span>RelWithDebInfo <span class="se">\</span>
            -DPLATFORM<span class="o">=</span>MAC_ARM64 <span class="se">\</span>
            -DCMAKE_TOOLCHAIN_FILE<span class="o">=</span>ios.toolchain.cmake <span class="se">\</span>
            -DHAVE_SOCKET_LIBSOCKET<span class="o">=</span>FALSE <span class="se">\</span>
            -DHAVE_LIBSOCKET<span class="o">=</span>FALSE <span class="se">\</span>
            -B out/mac_arm64

<span class="c1"># macOS on x86_64</span>
cmake -S ./ -DCMAKE_BUILD_TYPE<span class="o">=</span>RelWithDebInfo <span class="se">\</span>
            -DPLATFORM<span class="o">=</span>MAC <span class="se">\</span>
            -DCMAKE_TOOLCHAIN_FILE<span class="o">=</span>ios.toolchain.cmake <span class="se">\</span>
            -DHAVE_SOCKET_LIBSOCKET<span class="o">=</span>FALSE <span class="se">\</span>
            -DHAVE_LIBSOCKET<span class="o">=</span>FALSE <span class="se">\</span>
            -B out/mac_x86_64

cmake --build ./out/os64 --config RelWithDebInfo --parallel <span class="m">8</span>
cmake --build ./out/simulator_arm64 --config RelWithDebInfo --parallel <span class="m">8</span>
cmake --build ./out/simulator_x86_64 --config RelWithDebInfo --parallel <span class="m">8</span>
cmake --build ./out/mac_arm64 --config RelWithDebInfo --parallel <span class="m">8</span>
cmake --build ./out/mac_x86_64 --config RelWithDebInfo --parallel <span class="m">8</span>

rm -rf libchuckle.xcframework

mkdir -p <span class="s2">&quot;out/mac/chuckle/&quot;</span>
mkdir -p <span class="s2">&quot;out/simulator/chuckle/&quot;</span>

lipo -create out/mac_arm64/chuckle/libchuckle.a <span class="se">\</span>
             out/mac_x86_64/chuckle/libchuckle.a <span class="se">\</span>
     -output out/mac/chuckle/libchuckle.a

lipo -create out/simulator_arm64/chuckle/libchuckle.a <span class="se">\</span>
             out/simulator_x86_64/chuckle/libchuckle.a <span class="se">\</span>
     -output out/simulator/chuckle/libchuckle.a

xcodebuild -create-xcframework <span class="se">\</span>
  -library <span class="s2">&quot;out/os64/chuckle/libchuckle.a&quot;</span> <span class="se">\</span>
  -library <span class="s2">&quot;out/simulator/chuckle/libchuckle.a&quot;</span> <span class="se">\</span>
  -library <span class="s2">&quot;out/mac/chuckle/libchuckle.a&quot;</span> <span class="se">\</span>
  -output libchuckle.xcframework

<span class="c1"># copy Header</span>
mkdir -p libchuckle.xcframework/Headers
cp include/chuckle/chuckle.h libchuckle.xcframework/Headers

<span class="c1"># copy xcframework into Swift package</span>
mkdir -p ChuckleWrapper/lib
cp -a libchuckle.xcframework ChuckleWrapper/lib
</div></code></pre><p><strong>CAUTION:</strong> I changed a few locations. You can find the project here: <a href="https://github.com/oliverepper/chuckle">chuckle</a></p><p>Now we got a xframework that we can depend on in a Swift package that can carry an ObjC++-Wrapper to call into out code.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://oliver-epper.de/posts/create-and-use-a-c++-library-on-the-mac</guid><title>Create and use a C++ library on the Mac</title><description>How to create and use a dylib in C++ on the Mac</description><link>https://oliver-epper.de/posts/create-and-use-a-c++-library-on-the-mac</link><pubDate>Sat, 27 Mar 2021 09:41:00 +0100</pubDate><content:encoded><![CDATA[<p>This took a little while to figure out. It is a lot of code to write for a simple hello world program, but I learned a few things about macOS along the way.</p><h2>Create the library</h2><p>Let's start by creating a hello world library in C++.</p><pre><code><div class="highlight"><span></span>mkdir -p HelloLib/<span class="o">{</span>src,build<span class="o">}</span> <span class="o">&amp;&amp;</span>
touch HelloLib/src/<span class="o">{</span>HelloService.hpp,HelloService.cpp<span class="o">}</span> <span class="o">&amp;&amp;</span>
touch HelloLib/CMakeLists.txt
</div></code></pre><p>While we're in the shell let's create the target directory for our library, too:</p><pre><code><div class="highlight"><span></span>sudo mkdir /opt/hello <span class="o">&amp;&amp;</span>
sudo chown <span class="sb">`</span>whoami<span class="sb">`</span> /opt/hello
</div></code></pre><p>Enter the following into <code>HelloService.hpp</code>:</p><pre><code><div class="highlight"><span></span><span class="cp">#ifndef HelloService_hpp</span>
<span class="cp">#define HelloService_hpp</span>

<span class="cp">#include</span> <span class="cpf">&lt;string&gt;</span><span class="cp"></span>

<span class="k">class</span> <span class="nc">HelloService</span> <span class="p">{</span>
<span class="k">public</span><span class="o">:</span>
    <span class="n">HelloService</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="o">&amp;</span><span class="n">text</span><span class="p">);</span>
    <span class="o">~</span><span class="n">HelloService</span><span class="p">();</span>
<span class="k">public</span><span class="o">:</span>
    <span class="kt">void</span> <span class="n">setText</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="o">&amp;</span><span class="n">text</span><span class="p">);</span>
    <span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">getText</span><span class="p">();</span>
<span class="k">private</span><span class="o">:</span>
    <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">m_count</span><span class="p">;</span>
    <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">m_text</span><span class="p">;</span>
<span class="p">};</span>

<span class="cp">#endif </span><span class="cm">/* HelloService_hpp */</span><span class="cp"></span>
</div></code></pre><p>and add the implementation to <code>HelloService.cpp</code>:</p><pre><code><div class="highlight"><span></span><span class="cp">#include</span> <span class="cpf">&quot;HelloService.hpp&quot;</span><span class="cp"></span>
<span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp"></span>
<span class="cp">#include</span> <span class="cpf">&lt;sstream&gt;</span><span class="cp"></span>

<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="n">HelloService</span><span class="o">::</span><span class="n">HelloService</span><span class="p">(</span><span class="k">const</span> <span class="n">string</span> <span class="o">&amp;</span><span class="n">text</span><span class="p">)</span> <span class="o">:</span> <span class="n">m_count</span> <span class="p">{</span> <span class="mi">0</span> <span class="p">},</span> <span class="n">m_text</span> <span class="p">{</span> <span class="n">text</span> <span class="p">}</span>
<span class="p">{</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;HelloService created&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
<span class="p">}</span>

<span class="n">HelloService</span><span class="o">::~</span><span class="n">HelloService</span><span class="p">()</span>
<span class="p">{</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;HelloService destroyed&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="n">HelloService</span><span class="o">::</span><span class="n">setText</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="o">&amp;</span><span class="n">text</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">m_count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="n">m_text</span> <span class="o">=</span> <span class="n">text</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">HelloService</span><span class="o">::</span><span class="n">getText</span><span class="p">()</span>
<span class="p">{</span>
    <span class="n">m_count</span><span class="o">++</span><span class="p">;</span>
    <span class="n">std</span><span class="o">::</span><span class="n">ostringstream</span> <span class="n">oss</span><span class="p">;</span>
    <span class="n">oss</span> <span class="o">&lt;&lt;</span> <span class="n">m_text</span> <span class="o">&lt;&lt;</span> <span class="s">&quot; &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">m_count</span><span class="p">;</span>
    <span class="k">return</span> <span class="n">oss</span><span class="p">.</span><span class="n">str</span><span class="p">();</span>
<span class="p">}</span>
</div></code></pre><p>Now let's configure CMake in <code>CMakeLists.txt</code>:</p><pre><code><div class="highlight"><span></span><span class="nb">cmake_minimum_required</span><span class="p">(</span><span class="s">VERSION</span> <span class="s">3.2</span><span class="p">)</span>

<span class="nb">set</span><span class="p">(</span><span class="s">CMAKE_CXX_STANDARD</span> <span class="s">17</span><span class="p">)</span>
<span class="nb">set</span><span class="p">(</span><span class="s">CMAKE_CXX_STANDARD_REQUIRED</span> <span class="s">ON</span><span class="p">)</span>
<span class="nb">set</span><span class="p">(</span><span class="s">CMAKE_CXX_EXTENSIONS</span> <span class="s">OFF</span><span class="p">)</span>

<span class="nb">project</span><span class="p">(</span><span class="s">Hello</span> <span class="s">VERSION</span> <span class="s">0.0.1</span> <span class="s">DESCRIPTION</span> <span class="s2">&quot;HelloService&quot;</span><span class="p">)</span>

<span class="nb">add_library</span><span class="p">(</span><span class="s">hello</span> <span class="s">SHARED</span> <span class="s">src/HelloService.cpp</span><span class="p">)</span>

<span class="nb">set_target_properties</span><span class="p">(</span><span class="s">hello</span> <span class="s">PROPERTIES</span> <span class="s">VERSION</span> <span class="o">${</span><span class="nv">PROJECT_VERSION</span><span class="o">}</span><span class="p">)</span>
<span class="nb">set_target_properties</span><span class="p">(</span><span class="s">hello</span> <span class="s">PROPERTIES</span> <span class="s">PUBLIC_HEADER</span> <span class="s">src/HelloService.hpp</span><span class="p">)</span>

<span class="nb">install</span><span class="p">(</span><span class="s">TARGETS</span> <span class="s">hello</span>
    <span class="s">LIBRARY</span> <span class="s">DESTINATION</span> <span class="o">${</span><span class="nv">CMAKE_INSTALL_LIBDIR</span><span class="o">}</span>
    <span class="s">PUBLIC_HEADER</span> <span class="s">DESTINATION</span> <span class="o">${</span><span class="nv">CMAKE_INSTALL_INCLUDEDIR</span><span class="o">}</span><span class="p">)</span>
</div></code></pre><h2>Build and install the library</h2><p>Now we can build and install the library with the following commands:</p><pre><code><div class="highlight"><span></span>cmake -B HelloLib/build -DCMAKE_INSTALL_PREFIX<span class="o">=</span>/opt/hello HelloLib <span class="o">&amp;&amp;</span>
<span class="nb">cd</span> HelloLib/build <span class="o">&amp;&amp;</span>
make <span class="o">&amp;&amp;</span> make install <span class="o">&amp;&amp;</span>
<span class="nb">cd</span> ../..
</div></code></pre><p>You should now see the following output for <code>tree /opt/hello</code>:</p><pre><code><div class="highlight"><span></span><span class="o">/</span><span class="n">opt</span><span class="o">/</span><span class="n">hello</span>
  <span class="n">include</span>
    <span class="n">HelloService</span><span class="p">.</span><span class="n">hpp</span>
  <span class="n">lib</span>
    <span class="n">libhello</span><span class="p">.</span><span class="mf">0.0</span><span class="p">.</span><span class="mf">1.</span><span class="n">dylib</span>
    <span class="n">libhello</span><span class="p">.</span><span class="n">dylib</span> <span class="p">-&gt;</span> <span class="n">libhello</span><span class="p">.</span><span class="mf">0.0</span><span class="p">.</span><span class="mf">1.</span><span class="n">dylib</span>
</div></code></pre><p>Nice. That looks good. Looks like what we wanted, so far. We have the header in <code>/opt/hello/include</code> and the dyamic library in <code>/opt/hello/lib</code>. Let's examine the library with <code>file /opt/hello/lib/libhello.dylib</code>:</p><pre><code><div class="highlight"><span></span><span class="o">/</span><span class="n">opt</span><span class="o">/</span><span class="n">hello</span><span class="o">/</span><span class="n">lib</span><span class="o">/</span><span class="n">libhello</span><span class="p">.</span><span class="n">dylib</span><span class="p">:</span> <span class="n">Mach</span><span class="o">-</span><span class="n">O</span> <span class="mi">64</span><span class="o">-</span><span class="n">bit</span> <span class="n">dynamically</span> <span class="n">linked</span> <span class="n">shared</span> <span class="n">library</span> <span class="n">arm64</span>
</div></code></pre><p>Perfect.</p><p>Let's run one more comand <code>otool -L /opt/hello/lib/libhello.dylib</code>:</p><pre><code><div class="highlight"><span></span><span class="o">/</span><span class="n">opt</span><span class="o">/</span><span class="n">hello</span><span class="o">/</span><span class="n">lib</span><span class="o">/</span><span class="n">libhello</span><span class="p">.</span><span class="n">dylib</span><span class="p">:</span>
	<span class="p">@</span><span class="n">rpath</span><span class="o">/</span><span class="n">libhello</span><span class="p">.</span><span class="mf">0.0</span><span class="p">.</span><span class="mf">1.</span><span class="n">dylib</span> <span class="p">(</span><span class="n">compatibility</span> <span class="n">version</span> <span class="mf">0.0</span><span class="p">.</span><span class="mi">0</span><span class="p">,</span> <span class="n">current</span> <span class="n">version</span> <span class="mf">0.0</span><span class="p">.</span><span class="mi">1</span><span class="p">)</span>
	<span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">lib</span><span class="o">/</span><span class="n">libc</span><span class="o">++</span><span class="p">.</span><span class="mf">1.</span><span class="n">dylib</span> <span class="p">(</span><span class="n">compatibility</span> <span class="n">version</span> <span class="mf">1.0</span><span class="p">.</span><span class="mi">0</span><span class="p">,</span> <span class="n">current</span> <span class="n">version</span> <span class="mf">904.4</span><span class="p">.</span><span class="mi">0</span><span class="p">)</span>
	<span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">lib</span><span class="o">/</span><span class="n">libSystem</span><span class="p">.</span><span class="n">B</span><span class="p">.</span><span class="n">dylib</span> <span class="p">(</span><span class="n">compatibility</span> <span class="n">version</span> <span class="mf">1.0</span><span class="p">.</span><span class="mi">0</span><span class="p">,</span> <span class="n">current</span> <span class="n">version</span> <span class="mf">1292.60</span><span class="p">.</span><span class="mi">1</span><span class="p">)</span>
</div></code></pre><p>See that the path to <code>libhello.0.0.1.dylib</code> begins with <code>@rpath</code>? This is a cool feature of <code>dyld</code> which we will see later.</p><h2>Create a CLI program that uses the library</h2><p>Create a directory:</p><pre><code><div class="highlight"><span></span>mkdir -p HelloCLI <span class="o">&amp;&amp;</span>
touch HelloCLI/main.cpp
</div></code></pre><p>and enter the following to <code>main.cpp</code>:</p><pre><code><div class="highlight"><span></span><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp"></span>
<span class="cp">#include</span> <span class="cpf">&quot;HelloService.hpp&quot;</span><span class="cp"></span>

<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="n">HelloService</span> <span class="o">*</span><span class="n">service</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HelloService</span><span class="p">(</span><span class="s">&quot;Hi 😎&quot;</span><span class="p">);</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">service</span><span class="o">-&gt;</span><span class="n">getText</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="k">delete</span> <span class="n">service</span><span class="p">;</span>

    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</div></code></pre><p>Now compile the program with clang:</p><pre><code><div class="highlight"><span></span>clang++ -I /opt/hello/include -L /opt/hello/lib -lhello -rpath /opt/hello/lib -o hello HelloCli/main.cpp
</div></code></pre><p>A few words of explanation:</p><ul><li><code>-I /opt/hello/include</code> tells the compiler where to look for the required header <code>HelloService.hpp</code>.</li></ul><ul><li><code>-L /opt/hello/lib</code> tells the linker where it should look for libraries</li></ul><ul><li><code>-lhello</code> tells the linker that it should link against <code>libhello.dylib</code></li></ul><ul><li><code>-rpath /opt/hello/lib</code> is the missing puzzle piece. This tells the linker to insert <code>/opt/hello/lib</code> into the Mach-O executable as a runtime path. This allows our library to be found. You can inspect the binary with the following command <code>otool -l hello</code>:</li></ul><pre><code><div class="highlight"><span></span><span class="p">[...]</span>
<span class="n">Load</span> <span class="n">command</span> <span class="mi">16</span>
        <span class="n">cmd</span> <span class="n">LC_RPATH</span>
    <span class="n">cmdsize</span> <span class="mi">32</span>
        <span class="n">path</span> <span class="o">/</span><span class="n">opt</span><span class="o">/</span><span class="n">hello</span><span class="o">/</span><span class="n">lib</span> <span class="p">(</span><span class="n">offset</span> <span class="mi">12</span><span class="p">)</span>
<span class="p">[...]</span>
</div></code></pre><p>If you run the programm now you should see the following:</p><pre><code><div class="highlight"><span></span><span class="n">HelloService</span> <span class="n">created</span>
<span class="n">Hi</span> <span class="err">😎</span> <span class="mi">1</span>
<span class="n">HelloService</span> <span class="n">destroyed</span>
</div></code></pre><h2>Create a Swift program that uses the library</h2><ul><li>Create a new Xcode project, choose macOS app, SwiftUI for interface and SwiftUI App for lifecycle.</li><li>Press ⌘-n and begin to type out <code>Objective-C</code>. Name the file <code>HelloServiceWrapper</code></li><li>Accept the automatic creation of the bridging header. If you cancelled that you can just create a Header file and name it <code>&lt;project-name&gt;-bridging-header.h</code></li><li>Create a Header file and name it <code>HelloServiceWrapper</code></li><li>Rename <code>HelloServiceWrapper.m</code> to <code>HelloServiceWrapper.mm</code></li></ul><p>Now from the bridging-header include the wrapper-header:</p><pre><code><div class="highlight"><span></span><span class="cp">#include</span> <span class="cpf">&quot;HelloServiceWrapper.h&quot;</span><span class="cp"></span>
</div></code></pre><p>and add the following to <code>HelloServiceWrapper.h</code>:</p><pre><code><div class="highlight"><span></span><span class="cp">#ifndef HelloServiceWrapper_h</span>
<span class="cp">#define HelloServiceWrapper_h</span>

<span class="cp">#import &lt;Foundation/Foundation.h&gt;</span>

<span class="k">@interface</span> <span class="nc">HelloServiceWrapper</span> : <span class="bp">NSObject</span>
<span class="p">-</span> <span class="p">(</span><span class="kt">instancetype</span><span class="p">)</span><span class="nf">initWithText:</span><span class="p">(</span><span class="bp">NSString</span><span class="o">*</span><span class="p">)</span><span class="nv">text</span><span class="p">;</span>
<span class="p">-</span> <span class="p">(</span><span class="bp">NSString</span><span class="o">*</span><span class="p">)</span><span class="nf">getText</span><span class="p">;</span>
<span class="k">@end</span>

<span class="cp">#endif </span><span class="cm">/* HelloServiceWrapper_h */</span><span class="cp"></span>
</div></code></pre><p>Here's the implementation of the wrapper class:</p><pre><code><div class="highlight"><span></span><span class="cp">#import &lt;Foundation/Foundation.h&gt;</span>
<span class="cp">#import &quot;HelloServiceWrapper.h&quot;</span>
<span class="cp">#include</span> <span class="cpf">&quot;HelloService.hpp&quot;</span><span class="cp"></span>
<span class="k">@interface</span> <span class="nc">HelloServiceWrapper</span><span class="p">()</span>
<span class="k">@property</span> <span class="n">HelloService</span> <span class="o">*</span><span class="n">service</span><span class="p">;</span>
<span class="k">@end</span>

<span class="k">@implementation</span> <span class="nc">HelloServiceWrapper</span>

<span class="p">-</span> <span class="p">(</span><span class="kt">instancetype</span><span class="p">)</span><span class="nf">initWithText:</span><span class="p">(</span><span class="bp">NSString</span><span class="o">*</span><span class="p">)</span><span class="nv">text</span>
<span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nb">self</span> <span class="o">=</span> <span class="p">[</span><span class="nb">super</span> <span class="n">init</span><span class="p">])</span> <span class="p">{</span>
        <span class="nb">self</span><span class="p">.</span><span class="n">service</span> <span class="o">=</span> <span class="n">new</span> <span class="n">HelloService</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="p">([</span><span class="n">text</span> <span class="nl">cStringUsingEncoding</span><span class="p">:</span><span class="n">NSUTF8StringEncoding</span><span class="p">]));</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="nb">self</span><span class="p">;</span>
<span class="p">}</span>

<span class="p">-</span> <span class="p">(</span><span class="bp">NSString</span><span class="o">*</span><span class="p">)</span><span class="nf">getText</span>
<span class="p">{</span>
    <span class="k">return</span> <span class="p">[</span><span class="bp">NSString</span> <span class="nl">stringWithUTF8String</span><span class="p">:</span><span class="nb">self</span><span class="p">.</span><span class="n">service</span><span class="o">-&gt;</span><span class="n">getText</span><span class="p">().</span><span class="n">c_str</span><span class="p">()];</span>
<span class="p">}</span>

<span class="k">@end</span>
</div></code></pre><p>Remeber the long(-ish) command line for clang that we used to compile the CLI tool. We need to tell Xcode the same stuff:</p><ul><li>In build settings add <code>/opt/hello/include</code> under <em>Header Search Paths</em>, and</li><li><code>/opt/hello/library</code> under <em>Library Search Paths</em>.</li><li>under <em>Other Linker Flags</em> add<ul><li><code>-lhello</code>, and</li><li><code>-rpath /opt/hello/lib</code></li></ul></li></ul><p>Now you should be able to compile the project via ⌘-b.</p><p>For a simple test enter the following into <code>ContentView.swift</code>:</p><pre><code><div class="highlight"><span></span><span class="kd">struct</span> <span class="nc">ContentView</span><span class="p">:</span> <span class="n">View</span> <span class="p">{</span>
    <span class="kd">private</span> <span class="kd">var</span> <span class="nv">service</span><span class="p">:</span> <span class="n">HelloServiceWrapper</span><span class="p">!</span> <span class="p">=</span> <span class="p">.</span><span class="kd">init</span><span class="p">(</span><span class="n">text</span><span class="p">:</span> <span class="s">&quot;Hallo Welt&quot;</span><span class="p">)</span>

  	<span class="kd">var</span> <span class="nv">body</span><span class="p">:</span> <span class="n">some</span> <span class="n">View</span> <span class="p">{</span>
        <span class="n">Text</span><span class="p">(</span><span class="n">service</span><span class="p">.</span><span class="n">getText</span><span class="p">())</span>
            <span class="p">.</span><span class="n">padding</span><span class="p">()</span>
    <span class="p">}</span>
<span class="p">}</span>
</div></code></pre><p>Hit ⌘-r and voila! 😎 Or not?</p><p>Since we have not provided a valid code-signature, yet you need to disable library validation. You can do this under <em>Hardened Runtime -&gt; Disable Library Validation</em>.</p><p>Now you should be able to start the program.</p><h2>Let's replace the library</h2><p>Navigate to the place inside <code>Derived Data</code> where Xcode has build the binary. The easiest way is to right clock on the App in the Xcode gutter and choose <em>Show in Finder</em>. Double click and you should see something like the following:</p><figure>
    <picture>
        <source srcset="/images/HelloTool-dark.png" media="(prefers-color-scheme: dark)">
        <img src="https://oliver-epper.de/images/HelloTool.png" alt="Bildschirmfoto 2021-03-28 um 17.42.38">
    </picture>
</figure><p>Now edit the library code in <code>HelloService.cpp</code> and add something that you can recognise:</p><pre><code><div class="highlight"><span></span><span class="gh">diff --git a/src/HelloService.cpp b/src/HelloService.cpp</span>
<span class="gh">index 7eeb6ae..74e188a 100644</span>
<span class="gd">--- a/src/HelloService.cpp</span>
<span class="gi">+++ b/src/HelloService.cpp</span>
<span class="gu">@@ -24,6 +24,6 @@ const std::string HelloService::getText()</span>
 {
     m_count++;
     std::ostringstream oss;
<span class="gd">-    oss &lt;&lt; m_text &lt;&lt; &quot; &quot; &lt;&lt; m_count;</span>
<span class="gi">+    oss &lt;&lt; m_text &lt;&lt; &quot; called: &quot; &lt;&lt; m_count &lt;&lt; &quot; times.&quot;;</span>
     return oss.str();
 }
</div></code></pre><p>and recompile and install the library:</p><pre><code><div class="highlight"><span></span><span class="nb">cd</span> HelloLib/build <span class="o">&amp;&amp;</span>
make <span class="o">&amp;&amp;</span> make install <span class="o">&amp;&amp;</span>
<span class="nb">cd</span> ../..
</div></code></pre><p>Without recompiling the app start it again and after you resized it your should see this, now:</p><figure>
    <picture>
        <source srcset="/images/HelloTool2-dark.png" media="(prefers-color-scheme: dark)">
        <img src="https://oliver-epper.de/images/HelloTool2.png" alt="HelloTool2">
    </picture>
</figure><p>Give it another test. Close the window with ⌘-w and open it again from Finder. Now it should read:</p><blockquote><p>Hallo Welt called: 2 times.</p></blockquote><h2>Next?</h2><p>What do you want to read next? Two things would be cool to figure out:</p><ol><li>How to allow for library validation, and</li><li>How to build an AppKit app only in C++ (I wouldn't consider doing that, but could be fun anyways).</li></ol><h2>Update</h2><p>Regarding the missing allowance for library validation. This is how you can codesign directly from CMake. Edit the CMakeLists.txt file:</p><pre><code><div class="highlight"><span></span><span class="gh">diff --git a/CMakeLists.txt b/CMakeLists.txt</span>
<span class="gh">index 0d2a499..9e37fc4 100644</span>
<span class="gd">--- a/CMakeLists.txt</span>
<span class="gi">+++ b/CMakeLists.txt</span>
<span class="gu">@@ -11,6 +11,8 @@ add_library(hello SHARED src/HelloService.cpp)</span>
 set_target_properties(hello PROPERTIES VERSION ${PROJECT_VERSION})
 set_target_properties(hello PROPERTIES PUBLIC_HEADER src/HelloService.hpp)
 
<span class="gi">+add_custom_command(TARGET hello POST_BUILD COMMAND codesign -s &quot;your_developer_id_application_certificate&quot; $&lt;TARGET_FILE:hello&gt;)</span>
<span class="gi">+</span>
 install(TARGETS hello
     LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
     PUBLIC_HEADER DESTINATION ${CMAKE_INSTALL_INCLUDEDIR})
</div></code></pre><p>Now you can enable <em>library validation</em> in Xcode.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://oliver-epper.de/posts/wrap-nstextview-in-swiftui</guid><title>Wrap NSTextView in SwiftUI</title><description>How to wrap a NSTextView in SwiftUI</description><link>https://oliver-epper.de/posts/wrap-nstextview-in-swiftui</link><pubDate>Mon, 7 Dec 2020 09:41:00 +0100</pubDate><content:encoded><![CDATA[<p>During WWDC 2020 SwiftUI lerned a few new things. For example Map and TextEditor. Both are neat additions but still not capable of replacing their corresponding AppKit or UIKit counterparts. The SwiftUI Map can handle annotations but not overlays, yet. And the TextEditor cannot present NSAttributedStrings. So let's wrap a NSTextView in SwiftUI and handle the updating of the model data.</p><h2>Create a ViewController that presents the NSTextView</h2><p>This is pretty easy and no different than you'd expect:</p><pre><code><div class="highlight"><span></span><span class="kd">class</span> <span class="nc">EditorController</span><span class="p">:</span> <span class="n">NSViewController</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nv">textView</span> <span class="p">=</span> <span class="n">NSTextView</span><span class="p">()</span>
    
    <span class="kr">override</span> <span class="kd">func</span> <span class="nf">loadView</span><span class="p">()</span> <span class="p">{</span>
        <span class="kd">let</span> <span class="nv">scrollView</span> <span class="p">=</span> <span class="n">NSScrollView</span><span class="p">()</span>
        <span class="n">scrollView</span><span class="p">.</span><span class="n">hasVerticalScroller</span> <span class="p">=</span> <span class="kc">true</span>
        
        <span class="n">textView</span><span class="p">.</span><span class="n">autoresizingMask</span> <span class="p">=</span> <span class="p">[.</span><span class="n">width</span><span class="p">]</span>
        <span class="n">textView</span><span class="p">.</span><span class="n">allowsUndo</span> <span class="p">=</span> <span class="kc">true</span>
        <span class="n">textView</span><span class="p">.</span><span class="n">font</span> <span class="p">=</span> <span class="p">.</span><span class="n">systemFont</span><span class="p">(</span><span class="n">ofSize</span><span class="p">:</span> <span class="mi">16</span><span class="p">)</span>
        <span class="n">scrollView</span><span class="p">.</span><span class="n">documentView</span> <span class="p">=</span> <span class="n">textView</span>
        
        <span class="kc">self</span><span class="p">.</span><span class="n">view</span> <span class="p">=</span> <span class="n">scrollView</span>
    <span class="p">}</span>
    
    <span class="kr">override</span> <span class="kd">func</span> <span class="nf">viewDidAppear</span><span class="p">()</span> <span class="p">{</span>
        <span class="kc">self</span><span class="p">.</span><span class="n">view</span><span class="p">.</span><span class="n">window</span><span class="p">?.</span><span class="n">makeFirstResponder</span><span class="p">(</span><span class="kc">self</span><span class="p">.</span><span class="n">view</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</div></code></pre><p>In <code>viewDidAppear()</code> I make the controllers view the first responder. I like to be able to start typing immmediatly when the view get's presented and not have to click with the mouse, first. 😎</p><h2>Create a Representable</h2><p>To wrap a <code>NSViewController</code> inside a SwiftUI View struct you can use the protocol <code>NSViewControllerRepresentable</code>:</p><pre><code><div class="highlight"><span></span><span class="kd">struct</span> <span class="nc">EditorControllerView</span><span class="p">:</span> <span class="n">NSViewControllerRepresentable</span> <span class="p">{</span>
    <span class="p">@</span><span class="n">Binding</span> <span class="kd">var</span> <span class="nv">text</span><span class="p">:</span> <span class="nb">String</span>
    
    <span class="kd">func</span> <span class="nf">makeCoordinator</span><span class="p">()</span> <span class="p">-&gt;</span> <span class="n">Coordinator</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">Coordinator</span><span class="p">(</span><span class="kc">self</span><span class="p">)</span>
    <span class="p">}</span>
    
    <span class="kd">class</span> <span class="nc">Coordinator</span><span class="p">:</span> <span class="bp">NSObject</span><span class="p">,</span> <span class="bp">NSTextStorageDelegate</span> <span class="p">{</span>
        <span class="kd">private</span> <span class="kd">var</span> <span class="nv">parent</span><span class="p">:</span> <span class="n">EditorControllerView</span>
        <span class="kd">var</span> <span class="nv">shouldUpdateText</span> <span class="p">=</span> <span class="kc">true</span>
        
        <span class="kd">init</span><span class="p">(</span><span class="kc">_</span> <span class="n">parent</span><span class="p">:</span> <span class="n">EditorControllerView</span><span class="p">)</span> <span class="p">{</span>
            <span class="kc">self</span><span class="p">.</span><span class="n">parent</span> <span class="p">=</span> <span class="n">parent</span>
        <span class="p">}</span>
        
        <span class="kd">func</span> <span class="nf">textStorage</span><span class="p">(</span><span class="kc">_</span> <span class="n">textStorage</span><span class="p">:</span> <span class="bp">NSTextStorage</span><span class="p">,</span> <span class="n">didProcessEditing</span> <span class="n">editedMask</span><span class="p">:</span> <span class="n">NSTextStorageEditActions</span><span class="p">,</span> <span class="n">range</span> <span class="n">editedRange</span><span class="p">:</span> <span class="n">NSRange</span><span class="p">,</span> <span class="n">changeInLength</span> <span class="n">delta</span><span class="p">:</span> <span class="nb">Int</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">guard</span> <span class="n">shouldUpdateText</span> <span class="k">else</span> <span class="p">{</span>
                <span class="k">return</span>
            <span class="p">}</span>
            <span class="kd">let</span> <span class="nv">edited</span> <span class="p">=</span> <span class="n">textStorage</span><span class="p">.</span><span class="n">attributedSubstring</span><span class="p">(</span><span class="n">from</span><span class="p">:</span> <span class="n">editedRange</span><span class="p">).</span><span class="n">string</span>
            <span class="kd">let</span> <span class="nv">insertIndex</span> <span class="p">=</span> <span class="n">parent</span><span class="p">.</span><span class="n">text</span><span class="p">.</span><span class="n">utf16</span><span class="p">.</span><span class="n">index</span><span class="p">(</span><span class="n">parent</span><span class="p">.</span><span class="n">text</span><span class="p">.</span><span class="n">utf16</span><span class="p">.</span><span class="n">startIndex</span><span class="p">,</span> <span class="n">offsetBy</span><span class="p">:</span> <span class="n">editedRange</span><span class="p">.</span><span class="n">lowerBound</span><span class="p">)</span>
            
            <span class="kd">func</span> <span class="nf">numberOfCharactersToDelete</span><span class="p">()</span> <span class="p">-&gt;</span> <span class="nb">Int</span> <span class="p">{</span>
                <span class="n">editedRange</span><span class="p">.</span><span class="n">length</span> <span class="o">-</span> <span class="n">delta</span>
            <span class="p">}</span>
            
            <span class="kd">let</span> <span class="nv">endIndex</span> <span class="p">=</span> <span class="n">parent</span><span class="p">.</span><span class="n">text</span><span class="p">.</span><span class="n">utf16</span><span class="p">.</span><span class="n">index</span><span class="p">(</span><span class="n">insertIndex</span><span class="p">,</span> <span class="n">offsetBy</span><span class="p">:</span> <span class="n">numberOfCharactersToDelete</span><span class="p">())</span>
            <span class="kc">self</span><span class="p">.</span><span class="n">parent</span><span class="p">.</span><span class="n">text</span><span class="p">.</span><span class="n">replaceSubrange</span><span class="p">(</span><span class="n">insertIndex</span><span class="p">..&lt;</span><span class="n">endIndex</span><span class="p">,</span> <span class="n">with</span><span class="p">:</span> <span class="n">edited</span><span class="p">)</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="kd">func</span> <span class="nf">makeNSViewController</span><span class="p">(</span><span class="n">context</span><span class="p">:</span> <span class="n">Context</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="n">EditorController</span> <span class="p">{</span>
        <span class="kd">let</span> <span class="nv">vc</span> <span class="p">=</span> <span class="n">EditorController</span><span class="p">()</span>
        <span class="n">vc</span><span class="p">.</span><span class="n">textView</span><span class="p">.</span><span class="n">textStorage</span><span class="p">?.</span><span class="n">delegate</span> <span class="p">=</span> <span class="n">context</span><span class="p">.</span><span class="n">coordinator</span>
        <span class="k">return</span> <span class="n">vc</span>
    <span class="p">}</span>
    
    <span class="kd">func</span> <span class="nf">updateNSViewController</span><span class="p">(</span><span class="kc">_</span> <span class="n">nsViewController</span><span class="p">:</span> <span class="n">EditorController</span><span class="p">,</span> <span class="n">context</span><span class="p">:</span> <span class="n">Context</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="n">text</span> <span class="o">!=</span> <span class="n">nsViewController</span><span class="p">.</span><span class="n">textView</span><span class="p">.</span><span class="n">string</span> <span class="p">{</span>
            <span class="n">context</span><span class="p">.</span><span class="n">coordinator</span><span class="p">.</span><span class="n">shouldUpdateText</span> <span class="p">=</span> <span class="kc">false</span>
            <span class="n">nsViewController</span><span class="p">.</span><span class="n">textView</span><span class="p">.</span><span class="n">string</span> <span class="p">=</span> <span class="n">text</span>
            <span class="n">context</span><span class="p">.</span><span class="n">coordinator</span><span class="p">.</span><span class="n">shouldUpdateText</span> <span class="p">=</span> <span class="kc">true</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</div></code></pre><p>The basic idea is to use a <code>NSTextStorageDelegate</code> to apply the edit that was done to the <code>textView.textStorage</code> to the <code>@Binding</code>-property.</p><p>But there's a bit to consider:</p><ul><li>Once the <code>@Binding</code> property got updated it will call the <code>updateNSViewController</code> function. This only needs to really do anything if the change originated from the SwiftUI-side of things. If the change came from the ViewController there is nothing more to do.</li></ul><ul><li>The internal representation of the string in the <code>NSTextStorage</code> is utf-16. So if you enter a 😎 in the <code>textView</code> the <code>textStorage</code>-delegate function will tell you that you edited from 0 to 2 and inserted 2 characters. If you replace the 😎 with a 👨‍👩‍👧‍👧 you will edit from 0 to 11 with a delta of 9. Easy 😬</li></ul><ul><li>So the function gets the string representing the editedRange from the <code>textStorage</code> and calculates the position to insert from the utf16-representation. If you replace the 👨‍👩‍👧‍👧 with a 😎 again you edited from 0 to 2 with a delta of -9. This means: for your one character long string to remain one character long you need to delete 9 characters from 2 to 11. ❤️</li></ul><p>Since every update has to change the <code>@Binding</code> property we do both in one go with the handy <code>replaceSubrange</code> function.</p><h2>Testdrive</h2><p>Yeah! Now we have a nice SwiftUI component:</p><pre><code><div class="highlight"><span></span><span class="kd">struct</span> <span class="nc">ContentView</span><span class="p">:</span> <span class="n">View</span> <span class="p">{</span>
    <span class="p">@</span><span class="n">State</span> <span class="kd">private</span> <span class="kd">var</span> <span class="nv">text</span> <span class="p">=</span> <span class="s">&quot;&quot;</span>
    
    <span class="kd">var</span> <span class="nv">body</span><span class="p">:</span> <span class="n">some</span> <span class="n">View</span> <span class="p">{</span>
        <span class="n">VStack</span><span class="p">(</span><span class="n">alignment</span><span class="p">:</span> <span class="p">.</span><span class="n">trailing</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">HStack</span> <span class="p">{</span>
                <span class="n">Text</span><span class="p">(</span><span class="s">&quot;count_key&quot;</span><span class="p">)</span>
                <span class="n">Text</span><span class="p">(</span><span class="nb">String</span><span class="p">(</span><span class="n">text</span><span class="p">.</span><span class="bp">count</span><span class="p">))</span>
            <span class="p">}.</span><span class="n">padding</span><span class="p">()</span>
            <span class="n">EditorControllerView</span><span class="p">(</span><span class="n">text</span><span class="p">:</span> <span class="err">$</span><span class="n">text</span><span class="p">)</span> <span class="c1">// our component</span>
            <span class="n">TextEditor</span><span class="p">(</span><span class="n">text</span><span class="p">:</span> <span class="err">$</span><span class="n">text</span><span class="p">)</span> <span class="c1">// SwiftUI</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</div></code></pre><p>Try editing in a long text &gt; 4Mb with and without the SwiftUI <code>TextEditor</code>.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://oliver-epper.de/posts/how-to-wrap-a-c-library-in-swift</guid><title>How to wrap a C library in a swift package</title><description>How to wrap a C library in a swift package</description><link>https://oliver-epper.de/posts/how-to-wrap-a-c-library-in-swift</link><pubDate>Tue, 24 Nov 2020 09:41:00 +0100</pubDate><content:encoded><![CDATA[<p>There are a few great C/C++ libraries out there that you might want to use in your Swift application. Most of the time you'll find a wrapper already, but not all of the time. Or maybe you want something that is carefully tailored to your project needs.</p><p>Chris Eidhof from <a href="https://www.objc.io">objc.io</a> has a wrapper around the cmark library: <a href="https://github.com/chriseidhof/commonmark-swift">CommonMark-Swift</a>. Let's take that as an example and see how this can be achieved.</p><h2>Create the library package</h2><pre><code><div class="highlight"><span></span>mkdir ~/CommonMark
<span class="nb">cd</span> ~/CommonMark
swift package init --type library
</div></code></pre><p>Before we can actually use the cmark library it needs to be installed. I use brew:</p><pre><code><div class="highlight"><span></span>brew install cmark
</div></code></pre><p>Now let's edit the Package.swift</p><pre><code><div class="highlight"><span></span><span class="c1">// swift-tools-version:5.3</span>
<span class="kd">import</span> <span class="nc">PackageDescription</span>

<span class="kd">let</span> <span class="nv">package</span> <span class="p">=</span> <span class="n">Package</span><span class="p">(</span>
    <span class="n">name</span><span class="p">:</span> <span class="s">&quot;CommonMark&quot;</span><span class="p">,</span>
    <span class="n">platforms</span><span class="p">:</span> <span class="p">[</span>
        <span class="p">.</span><span class="n">macOS</span><span class="p">(</span><span class="s">&quot;11&quot;</span><span class="p">)</span>
    <span class="p">],</span>
    <span class="n">products</span><span class="p">:</span> <span class="p">[</span>
        <span class="p">.</span><span class="n">library</span><span class="p">(</span><span class="n">name</span><span class="p">:</span> <span class="s">&quot;CommonMark&quot;</span><span class="p">,</span> <span class="n">targets</span><span class="p">:</span> <span class="p">[</span><span class="s">&quot;CommonMark&quot;</span><span class="p">]),</span>
        <span class="p">.</span><span class="n">library</span><span class="p">(</span><span class="n">name</span><span class="p">:</span> <span class="s">&quot;Ccmark&quot;</span><span class="p">,</span> <span class="n">targets</span><span class="p">:</span> <span class="p">[</span><span class="s">&quot;Ccmark&quot;</span><span class="p">])</span>
    <span class="p">],</span>
    <span class="n">dependencies</span><span class="p">:</span> <span class="p">[</span>
    <span class="p">],</span>
    <span class="n">targets</span><span class="p">:</span> <span class="p">[</span>
        <span class="p">.</span><span class="n">target</span><span class="p">(</span><span class="n">name</span><span class="p">:</span> <span class="s">&quot;CommonMark&quot;</span><span class="p">,</span> <span class="n">dependencies</span><span class="p">:</span> <span class="p">[</span>
            <span class="s">&quot;Ccmark&quot;</span>
        <span class="p">]),</span>
        <span class="p">.</span><span class="n">systemLibrary</span><span class="p">(</span>
            <span class="n">name</span><span class="p">:</span> <span class="s">&quot;Ccmark&quot;</span><span class="p">,</span>
            <span class="n">pkgConfig</span><span class="p">:</span> <span class="s">&quot;libcmark&quot;</span><span class="p">,</span>
            <span class="n">providers</span><span class="p">:</span> <span class="p">[</span>
                <span class="p">.</span><span class="n">brew</span><span class="p">([</span><span class="s">&quot;commonmark&quot;</span><span class="p">])</span>
            <span class="p">]),</span>
        <span class="p">.</span><span class="n">testTarget</span><span class="p">(</span>
            <span class="n">name</span><span class="p">:</span> <span class="s">&quot;CommonMarkTests&quot;</span><span class="p">,</span>
            <span class="n">dependencies</span><span class="p">:</span> <span class="p">[</span><span class="s">&quot;CommonMark&quot;</span><span class="p">]),</span>
    <span class="p">]</span>
<span class="p">)</span>
</div></code></pre><p>So we're building two products:</p><ul><li>CommonMark</li><li>Ccmark</li></ul><p>In the target section you can see that Ccmark is the name that we'll use for libcmark. The leading uppercase C seems to be a standard.</p><p>For this to work we need to create a directory <code>Ccmark</code> below our <code>Sources</code> directory and create the file: <code>module.modulemap</code> with the following content:</p><pre><code><div class="highlight"><span></span><span class="n">module</span> <span class="n">Ccmark</span> <span class="p">[</span><span class="n">system</span><span class="p">]</span> <span class="p">{</span>
    <span class="n">header</span> <span class="s">&quot;/usr/local/include/cmark.h&quot;</span>
    <span class="n">link</span> <span class="s">&quot;libcmark&quot;</span>
    <span class="n">export</span> <span class="o">*</span>
<span class="p">}</span>
</div></code></pre><p>This tells the system where to find the header for libcmark and the library itself. The <code>[system]</code> attribute tells the compiler that <code>cmark.h</code> is a system header and more warnings will be ignored.</p><p>Voila! That's it. We can now use the cmark library in our Swift code.</p><h2>Create a Swift API</h2><p>Chris created another target: <code>CommonMark</code> that gives the user a nicer API to work with. Let's build a minimal version of that.</p><p>Edit <code>Sources/CommonMark/CommonMark.swift</code> like this:</p><pre><code><div class="highlight"><span></span><span class="kd">import</span> <span class="nc">Foundation</span>
<span class="kd">import</span> <span class="nc">Ccmark</span> <span class="c1">// this wraps libcmark</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Node</span> <span class="p">{</span>
    <span class="kd">let</span> <span class="nv">node</span><span class="p">:</span> <span class="n">OpaquePointer</span>

    <span class="kd">public</span> <span class="kd">init</span><span class="p">(</span><span class="kc">_</span> <span class="n">node</span><span class="p">:</span> <span class="n">OpaquePointer</span><span class="p">)</span> <span class="p">{</span>
        <span class="kc">self</span><span class="p">.</span><span class="n">node</span> <span class="p">=</span> <span class="n">node</span>
    <span class="p">}</span>
    
    <span class="kd">public</span> <span class="kd">init</span><span class="p">?(</span><span class="n">markdown</span><span class="p">:</span> <span class="nb">String</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">guard</span> <span class="kd">let</span> <span class="nv">node</span> <span class="p">=</span> <span class="n">cmark_parse_document</span><span class="p">(</span><span class="n">markdown</span><span class="p">,</span> <span class="n">markdown</span><span class="p">.</span><span class="n">utf8</span><span class="p">.</span><span class="bp">count</span><span class="p">,</span> <span class="n">CMARK_OPT_DEFAULT</span><span class="p">)</span> <span class="k">else</span> <span class="p">{</span>
            <span class="k">return</span> <span class="kc">nil</span>
        <span class="p">}</span>
        <span class="kc">self</span><span class="p">.</span><span class="n">node</span> <span class="p">=</span> <span class="n">node</span>
    <span class="p">}</span>

    <span class="kd">deinit</span> <span class="p">{</span>
        <span class="k">guard</span> <span class="n">type</span> <span class="p">==</span> <span class="n">CMARK_NODE_DOCUMENT</span> <span class="k">else</span> <span class="p">{</span> <span class="k">return</span> <span class="p">}</span>
        <span class="n">cmark_node_free</span><span class="p">(</span><span class="n">node</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="kd">public</span> <span class="kd">var</span> <span class="nv">type</span><span class="p">:</span> <span class="n">cmark_node_type</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">cmark_node_get_type</span><span class="p">(</span><span class="n">node</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="kd">public</span> <span class="kd">var</span> <span class="nv">typeString</span><span class="p">:</span> <span class="nb">String</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nb">String</span><span class="p">(</span><span class="n">cString</span><span class="p">:</span> <span class="n">cmark_node_get_type_string</span><span class="p">(</span><span class="n">node</span><span class="p">))</span>
    <span class="p">}</span>

    <span class="kd">public</span> <span class="kd">var</span> <span class="nv">children</span><span class="p">:</span> <span class="p">[</span><span class="n">Node</span><span class="p">]</span> <span class="p">{</span>
        <span class="kd">var</span> <span class="nv">result</span><span class="p">:</span> <span class="p">[</span><span class="n">Node</span><span class="p">]</span> <span class="p">=</span> <span class="p">[]</span>
        
      	<span class="c1">// cmark_node_first_child can return nil</span>
        <span class="kd">var</span> <span class="nv">child</span> <span class="p">=</span> <span class="n">cmark_node_first_child</span><span class="p">(</span><span class="n">node</span><span class="p">)</span>
        <span class="k">while</span> <span class="kd">let</span> <span class="nv">unwrapped</span> <span class="p">=</span> <span class="n">child</span> <span class="p">{</span>
            <span class="n">result</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">Node</span><span class="p">(</span><span class="n">unwrapped</span><span class="p">))</span>
            <span class="n">child</span> <span class="p">=</span> <span class="n">cmark_node_next</span><span class="p">(</span><span class="n">child</span><span class="p">)</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="n">result</span>
    <span class="p">}</span>
<span class="p">}</span>
</div></code></pre><p>This is pretty straight forward. The class Node encapsulates a pointer to the cmark node type. It gets initialized in the failable initializer through the call to the function <code>cmark_parse_document</code>. For this to work you need to import Ccmark.</p><blockquote><p>If you want to read the documentation for libcmark you can open the man-page with <code>man 3 cmark</code>. The <code>3</code> opens the library documentation as opposed to the implicit <code>1</code> which would open the cmark commands man page.</p></blockquote><p>This will not compile yet, because of the <code>testExample</code> test. Let's create a useful test:</p><pre><code><div class="highlight"><span></span><span class="kd">import</span> <span class="nc">XCTest</span>
<span class="p">@</span><span class="n">testable</span> <span class="kd">import</span> <span class="nc">CommonMark</span>

<span class="kr">final</span> <span class="kd">class</span> <span class="nc">CommonMarkTests</span><span class="p">:</span> <span class="n">XCTestCase</span> <span class="p">{</span>
    <span class="kd">func</span> <span class="nf">testCaption</span><span class="p">()</span> <span class="p">{</span>
        <span class="kd">let</span> <span class="nv">markdown</span> <span class="p">=</span> <span class="s">&quot;# Caption&quot;</span>
        <span class="kd">let</span> <span class="nv">node</span> <span class="p">=</span> <span class="n">Node</span><span class="p">(</span><span class="n">markdown</span><span class="p">:</span> <span class="n">markdown</span><span class="p">)</span><span class="o">!</span>
        <span class="kd">let</span> <span class="nv">heading</span> <span class="p">=</span> <span class="n">node</span><span class="p">.</span><span class="n">children</span><span class="p">.</span><span class="bp">first</span>
        <span class="n">XCTAssertEqual</span><span class="p">(</span><span class="n">heading</span><span class="p">?.</span><span class="n">typeString</span><span class="p">,</span> <span class="s">&quot;heading&quot;</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</div></code></pre><h2>Include the library with your app</h2><p>If you want to include the <code>dylib </code> with your app bundle you can create a <code>Frameworks</code> subdirectory below <code>Contents</code> and copy the library there. You can tell your app where it can find the library with the following command:</p><pre><code><div class="highlight"><span></span>install_name_tool -change /usr/local/opt/cmark/lib/libcmark.0.29.0.dylib <span class="s2">&quot;@executable_path/../Frameworks/libcmark.dylib&quot;</span> ./&lt;YourApp&gt;.app/Contents/MacOS/Scratched
</div></code></pre><p>You can find out the the standard path of the library with the following command:</p><pre><code><div class="highlight"><span></span>otool -L /usr/local/lib/libcmark.dylib
</div></code></pre>]]></content:encoded></item><item><guid isPermaLink="true">https://oliver-epper.de/posts/create-a-document-based-editor-from-scratch-as-a-swift-package</guid><title>Create a document based editor from scratch as a swift package</title><description>How to create document based editor without Xcode templates, Storyboards and XIBs</description><link>https://oliver-epper.de/posts/create-a-document-based-editor-from-scratch-as-a-swift-package</link><pubDate>Thu, 19 Nov 2020 09:41:00 +0100</pubDate><content:encoded><![CDATA[<p>I thought I had most of the information for this ready from either <a href="https://rderik.com/blog/understanding-a-few-concepts-of-macos-applications-by-building-an-agent-based-menu-bar-app/">Derik Ramirez's</a> great blog or the great article <a href="https://medium.com/@theboi/creating-macos-apps-without-a-storyboard-or-xib-file-516115ee9d26">Creating macOS apps without a storyboard or .xib file with Swift 5</a> from Ryan Theodore The. But I ran into some real hard to figure out pices that where all answered by the great guys from <a href="https://www.objc.io">objc.io</a> — I am a happy subscriber 😀</p><h2>Create a Hello World App</h2><pre><code><div class="highlight"><span></span>mkdir ~/Desktop/Scratched
<span class="nb">cd</span> ~/Desktop/Scratched
swift package init --type executable
xed .
</div></code></pre><h3>Create an AppDelegate</h3><pre><code><div class="highlight"><span></span><span class="kd">import</span> <span class="nc">Cocoa</span>
<span class="kd">import</span> <span class="nc">os</span><span class="p">.</span><span class="nc">log</span>

<span class="kd">class</span> <span class="nc">AppDelegate</span><span class="p">:</span> <span class="bp">NSObject</span><span class="p">,</span> <span class="n">NSApplicationDelegate</span> <span class="p">{</span>

    <span class="kd">func</span> <span class="nf">applicationDidFinishLaunching</span><span class="p">(</span><span class="kc">_</span> <span class="n">notification</span><span class="p">:</span> <span class="n">Notification</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">os_log</span><span class="p">(.</span><span class="n">debug</span><span class="p">,</span> <span class="s">&quot;%@ started&quot;</span><span class="p">,</span> <span class="n">ProcessInfo</span><span class="p">.</span><span class="n">processInfo</span><span class="p">.</span><span class="n">processName</span> <span class="k">as</span> <span class="n">CVarArg</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</div></code></pre><p>Remeber to set the target platform in Package.swift for this to work.</p><pre><code><div class="highlight"><span></span><span class="kd">let</span> <span class="nv">package</span> <span class="p">=</span> <span class="n">Package</span><span class="p">(</span>
    <span class="n">name</span><span class="p">:</span> <span class="s">&quot;Scratched&quot;</span><span class="p">,</span>
    <span class="n">platforms</span><span class="p">:</span> <span class="p">[</span>
        <span class="p">.</span><span class="n">macOS</span><span class="p">(</span><span class="s">&quot;11&quot;</span><span class="p">)</span>
    <span class="p">],...</span>
</div></code></pre><h3>Update the main.swift file</h3><pre><code><div class="highlight"><span></span><span class="kd">import</span> <span class="nc">Cocoa</span>

<span class="kd">let</span> <span class="nv">app</span> <span class="p">=</span> <span class="n">NSApplication</span><span class="p">.</span><span class="n">shared</span>
<span class="kd">let</span> <span class="nv">delegate</span> <span class="p">=</span> <span class="n">AppDelegate</span><span class="p">()</span>
<span class="n">app</span><span class="p">.</span><span class="n">delegate</span> <span class="p">=</span> <span class="n">delegate</span>
<span class="n">app</span><span class="p">.</span><span class="n">run</span><span class="p">()</span>
</div></code></pre><p>Now you can press cmd-r and you should see the log message.</p><h2>Make it document based</h2><h3>Create a model class</h3><p>Let's reuse the same class I used <a href="https://oliver-epper.de/posts/create-a-document-based-editor-with-xib-files-and-swifty-cocoa-bindings/">here</a></p><pre><code><div class="highlight"><span></span><span class="kd">import</span> <span class="nc">Foundation</span>

<span class="kd">class</span> <span class="nc">Content</span><span class="p">:</span> <span class="bp">NSObject</span> <span class="p">{</span>
    <span class="kr">@objc</span> <span class="kr">dynamic</span> <span class="kd">var</span> <span class="nv">contentString</span><span class="p">:</span> <span class="nb">String</span>

    <span class="kd">init</span><span class="p">(</span><span class="n">contentString</span><span class="p">:</span> <span class="nb">String</span><span class="p">)</span> <span class="p">{</span>
        <span class="kc">self</span><span class="p">.</span><span class="n">contentString</span> <span class="p">=</span> <span class="n">contentString</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">extension</span> <span class="nc">Content</span> <span class="p">{</span>
    <span class="kd">func</span> <span class="nf">read</span><span class="p">(</span><span class="n">from</span> <span class="n">data</span><span class="p">:</span> <span class="n">Data</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">contentString</span> <span class="p">=</span> <span class="nb">String</span><span class="p">(</span><span class="n">bytes</span><span class="p">:</span> <span class="n">data</span><span class="p">,</span> <span class="n">encoding</span><span class="p">:</span> <span class="p">.</span><span class="n">utf8</span><span class="p">)</span> <span class="p">??</span> <span class="s">&quot;&quot;</span>
    <span class="p">}</span>

    <span class="kd">func</span> <span class="nf">data</span><span class="p">()</span> <span class="p">-&gt;</span> <span class="n">Data</span> <span class="p">{</span>
        <span class="n">contentString</span><span class="p">.</span><span class="n">data</span><span class="p">(</span><span class="n">using</span><span class="p">:</span> <span class="p">.</span><span class="n">utf8</span><span class="p">)</span> <span class="p">??</span> <span class="n">Data</span><span class="p">()</span>
    <span class="p">}</span>
<span class="p">}</span>
</div></code></pre><p>Before we create the Document type let's create a ViewController.</p><h3>Create a ViewController</h3><pre><code><div class="highlight"><span></span><span class="kd">import</span> <span class="nc">Cocoa</span>
<span class="kd">import</span> <span class="nc">os</span><span class="p">.</span><span class="nc">log</span>

<span class="kr">final</span> <span class="kd">class</span> <span class="nc">ViewController</span><span class="p">:</span> <span class="n">NSViewController</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nv">textView</span> <span class="p">=</span> <span class="n">NSTextView</span><span class="p">()</span>

    <span class="kr">override</span> <span class="kd">func</span> <span class="nf">loadView</span><span class="p">()</span> <span class="p">{</span>
        <span class="kd">let</span> <span class="nv">scrollView</span> <span class="p">=</span> <span class="n">NSScrollView</span><span class="p">()</span>
        <span class="n">scrollView</span><span class="p">.</span><span class="n">hasVerticalScroller</span> <span class="p">=</span> <span class="kc">true</span>

        <span class="n">textView</span><span class="p">.</span><span class="n">isRichText</span> <span class="p">=</span> <span class="kc">false</span>
        <span class="n">textView</span><span class="p">.</span><span class="n">allowsUndo</span> <span class="p">=</span> <span class="kc">true</span>
        <span class="n">textView</span><span class="p">.</span><span class="n">autoresizingMask</span> <span class="p">=</span> <span class="p">[.</span><span class="n">width</span><span class="p">]</span>
        <span class="n">scrollView</span><span class="p">.</span><span class="n">documentView</span> <span class="p">=</span> <span class="n">textView</span>

        <span class="kc">self</span><span class="p">.</span><span class="n">view</span> <span class="p">=</span> <span class="n">scrollView</span>
    <span class="p">}</span>

    <span class="kr">override</span> <span class="kd">func</span> <span class="nf">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
        <span class="kc">super</span><span class="p">.</span><span class="n">viewDidLoad</span><span class="p">()</span>

        <span class="k">if</span> <span class="kd">let</span> <span class="nv">content</span> <span class="p">=</span> <span class="n">representedObject</span> <span class="k">as</span><span class="p">?</span> <span class="n">Content</span> <span class="p">{</span>
            <span class="n">textView</span><span class="p">.</span><span class="n">bind</span><span class="p">(.</span><span class="n">value</span><span class="p">,</span> <span class="n">to</span><span class="p">:</span> <span class="n">content</span><span class="p">,</span> <span class="n">keyPath</span><span class="p">:</span> <span class="err">\</span><span class="p">.</span><span class="n">contentString</span><span class="p">,</span> <span class="n">options</span><span class="p">:</span> <span class="p">[</span><span class="n">NSBindingOption</span><span class="p">.</span><span class="n">continuouslyUpdatesValue</span><span class="p">:</span> <span class="kc">true</span><span class="p">])</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">extension</span> <span class="bp">NSObject</span> <span class="p">{</span>
    <span class="kd">func</span> <span class="nf">bind</span><span class="p">&lt;</span><span class="n">Root</span><span class="p">,</span> <span class="n">Value</span><span class="p">&gt;(</span><span class="kc">_</span> <span class="n">binding</span><span class="p">:</span> <span class="n">NSBindingName</span><span class="p">,</span> <span class="n">to</span> <span class="n">observable</span><span class="p">:</span> <span class="n">Root</span><span class="p">,</span> <span class="n">keyPath</span><span class="p">:</span> <span class="n">KeyPath</span><span class="p">&lt;</span><span class="n">Root</span><span class="p">,</span> <span class="n">Value</span><span class="p">&gt;,</span> <span class="n">options</span><span class="p">:</span> <span class="p">[</span><span class="n">NSBindingOption</span><span class="p">:</span> <span class="nb">Any</span><span class="p">]?</span> <span class="p">=</span> <span class="kc">nil</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">guard</span> <span class="kd">let</span> <span class="nv">kvcKeyPath</span> <span class="p">=</span> <span class="n">keyPath</span><span class="p">.</span><span class="n">_kvcKeyPathString</span> <span class="k">else</span> <span class="p">{</span>
            <span class="n">os_log</span><span class="p">(</span><span class="s">&quot;KeyPath does not contain @objc exposed values&quot;</span><span class="p">)</span>
            <span class="k">return</span>
        <span class="p">}</span>
        <span class="n">bind</span><span class="p">(</span><span class="n">binding</span><span class="p">,</span> <span class="n">to</span><span class="p">:</span> <span class="n">observable</span><span class="p">,</span> <span class="n">withKeyPath</span><span class="p">:</span> <span class="n">kvcKeyPath</span><span class="p">,</span> <span class="n">options</span><span class="p">:</span> <span class="n">options</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</div></code></pre><h3>Create the document class</h3><pre><code><div class="highlight"><span></span><span class="kd">import</span> <span class="nc">Cocoa</span>

<span class="kd">class</span> <span class="nc">Document</span><span class="p">:</span> <span class="n">NSDocument</span> <span class="p">{</span>
    <span class="kr">@objc</span> <span class="kr">dynamic</span> <span class="kd">var</span> <span class="nv">content</span> <span class="p">=</span> <span class="n">Content</span><span class="p">(</span><span class="n">contentString</span><span class="p">:</span> <span class="s">&quot;&quot;</span><span class="p">)</span>

    <span class="kd">private</span> <span class="kr">lazy</span> <span class="kd">var</span> <span class="nv">viewController</span> <span class="p">=</span> <span class="n">ViewController</span><span class="p">()</span>

    <span class="kr">override</span> <span class="kd">func</span> <span class="nf">makeWindowControllers</span><span class="p">()</span> <span class="p">{</span>
        <span class="n">viewController</span><span class="p">.</span><span class="n">representedObject</span> <span class="p">=</span> <span class="n">content</span>
        <span class="kd">let</span> <span class="nv">window</span> <span class="p">=</span> <span class="n">NSWindow</span><span class="p">(</span><span class="n">contentViewController</span><span class="p">:</span> <span class="n">viewController</span><span class="p">)</span>
        <span class="n">window</span><span class="p">.</span><span class="n">setContentSize</span><span class="p">(</span><span class="n">NSSize</span><span class="p">(</span><span class="n">width</span><span class="p">:</span> <span class="mi">640</span><span class="p">,</span> <span class="n">height</span><span class="p">:</span> <span class="mi">480</span><span class="p">))</span>
        <span class="kd">let</span> <span class="nv">wc</span> <span class="p">=</span> <span class="n">NSWindowController</span><span class="p">(</span><span class="n">window</span><span class="p">:</span> <span class="n">window</span><span class="p">)</span>
        <span class="n">addWindowController</span><span class="p">(</span><span class="n">wc</span><span class="p">)</span>
        <span class="n">wc</span><span class="p">.</span><span class="n">contentViewController</span> <span class="p">=</span> <span class="n">viewController</span>
        <span class="n">window</span><span class="p">.</span><span class="n">setFrameAutosaveName</span><span class="p">(</span><span class="s">&quot;window_frame&quot;</span><span class="p">)</span>
        <span class="n">window</span><span class="p">.</span><span class="n">makeKeyAndOrderFront</span><span class="p">(</span><span class="kc">nil</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</div></code></pre><h3>Create the document controller class</h3><p>This is important to tell the system about our Document class. I learned this from <a href="https://www.objc.io">objc.io</a>.</p><pre><code><div class="highlight"><span></span><span class="kd">import</span> <span class="nc">Cocoa</span>

<span class="kd">class</span> <span class="nc">DocumentController</span><span class="p">:</span> <span class="n">NSDocumentController</span> <span class="p">{</span>
    <span class="kr">override</span> <span class="kd">var</span> <span class="nv">documentClassNames</span><span class="p">:</span> <span class="p">[</span><span class="nb">String</span><span class="p">]</span> <span class="p">{</span>
        <span class="p">[</span><span class="s">&quot;Document&quot;</span><span class="p">]</span>
    <span class="p">}</span>

    <span class="kr">override</span> <span class="kd">var</span> <span class="nv">defaultType</span><span class="p">:</span> <span class="nb">String</span><span class="p">?</span> <span class="p">{</span>
        <span class="s">&quot;Document&quot;</span>
    <span class="p">}</span>

    <span class="kr">override</span> <span class="kd">func</span> <span class="nf">documentClass</span><span class="p">(</span><span class="n">forType</span> <span class="n">typeName</span><span class="p">:</span> <span class="nb">String</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="nb">AnyClass</span><span class="p">?</span> <span class="p">{</span>
        <span class="n">Document</span><span class="p">.</span><span class="kc">self</span>
    <span class="p">}</span>
<span class="p">}</span>
</div></code></pre><p><strong>Now comes the fun part!</strong></p><p>To actually hook this up we need to add the following to the AppDelegate:</p><pre><code><div class="highlight"><span></span><span class="kd">func</span> <span class="nf">applicationWillFinishLaunching</span><span class="p">(</span><span class="kc">_</span> <span class="n">notification</span><span class="p">:</span> <span class="n">Notification</span><span class="p">)</span> <span class="p">{</span>
  <span class="kc">_</span> <span class="p">=</span> <span class="n">DocumentController</span><span class="p">()</span>
<span class="p">}</span>
</div></code></pre><p>Please take note that this is not <code>...DidFinish</code>, but <code>...WillFinish</code>! As Florian from <a href="https://www.objc.io">objc.io</a> pointed out: <strong>The first instance of a NSDocumentController in your app becomes the document controller of your app!</strong></p><p>And one more thing:</p><p>Normally you would have an entry like this in your Info.plist</p><pre><code><div class="highlight"><span></span><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
<span class="cp">&lt;!DOCTYPE plist PUBLIC &quot;-//Apple//DTD PLIST 1.0//EN&quot; &quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;&gt;</span>
<span class="nt">&lt;plist</span> <span class="na">version=</span><span class="s">&quot;1.0&quot;</span><span class="nt">&gt;</span>
<span class="nt">&lt;dict&gt;</span>
    <span class="nt">&lt;key&gt;</span>NSPrincipalClass<span class="nt">&lt;/key&gt;</span>
    <span class="nt">&lt;string&gt;</span>NSApplication<span class="nt">&lt;/string&gt;</span>
<span class="nt">&lt;/dict&gt;</span>
<span class="nt">&lt;/plist&gt;</span>
</div></code></pre><p>This tells the system that your app is a regular app. In code we add this to the main.swift:</p><pre><code><div class="highlight"><span></span><span class="n">app</span><span class="p">.</span><span class="n">setActivationPolicy</span><span class="p">(.</span><span class="n">regular</span><span class="p">)</span>
</div></code></pre><p>add it before the call to <code>run()</code>.</p><p>You should be able to start the app and type into the NSTextView, now.</p><h3>Let's create the menu</h3><p>I initially found this in Ryan's article:</p><pre><code><div class="highlight"><span></span><span class="kd">import</span> <span class="nc">Cocoa</span>

<span class="kd">class</span> <span class="nc">Menu</span><span class="p">:</span> <span class="n">NSMenu</span> <span class="p">{</span>
    <span class="kd">private</span> <span class="kr">lazy</span> <span class="kd">var</span> <span class="nv">appName</span> <span class="p">=</span> <span class="n">ProcessInfo</span><span class="p">.</span><span class="n">processInfo</span><span class="p">.</span><span class="n">processName</span>

    <span class="kr">override</span> <span class="kd">init</span><span class="p">(</span><span class="n">title</span><span class="p">:</span> <span class="nb">String</span><span class="p">)</span> <span class="p">{</span>
        <span class="kc">super</span><span class="p">.</span><span class="kd">init</span><span class="p">(</span><span class="n">title</span><span class="p">:</span> <span class="n">title</span><span class="p">)</span>

        <span class="c1">// App Menu</span>
        <span class="kd">let</span> <span class="nv">appMenu</span> <span class="p">=</span> <span class="n">NSMenuItem</span><span class="p">()</span>
        <span class="n">appMenu</span><span class="p">.</span><span class="n">submenu</span> <span class="p">=</span> <span class="n">NSMenu</span><span class="p">()</span>
        <span class="n">appMenu</span><span class="p">.</span><span class="n">submenu</span><span class="p">?.</span><span class="n">items</span> <span class="p">=</span> <span class="p">[</span>
            <span class="n">NSMenuItem</span><span class="p">(</span><span class="n">title</span><span class="p">:</span> <span class="s">&quot;About </span><span class="si">\(</span><span class="n">appName</span><span class="si">)</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">action</span><span class="p">:</span> <span class="k">#selector</span><span class="p">(</span><span class="n">NSApplication</span><span class="p">.</span><span class="n">orderFrontStandardAboutPanel</span><span class="p">(</span><span class="kc">_</span><span class="p">:)),</span> <span class="n">keyEquivalent</span><span class="p">:</span> <span class="s">&quot;&quot;</span><span class="p">),</span>
            <span class="n">NSMenuItem</span><span class="p">.</span><span class="n">separator</span><span class="p">(),</span>
            <span class="n">NSMenuItem</span><span class="p">(</span><span class="n">title</span><span class="p">:</span> <span class="s">&quot;Quit&quot;</span><span class="p">,</span> <span class="n">action</span><span class="p">:</span> <span class="k">#selector</span><span class="p">(</span><span class="n">NSApplication</span><span class="p">.</span><span class="n">terminate</span><span class="p">(</span><span class="kc">_</span><span class="p">:)),</span> <span class="n">keyEquivalent</span><span class="p">:</span> <span class="s">&quot;q&quot;</span><span class="p">)</span>
        <span class="p">]</span>
        
        <span class="c1">// File Menu</span>
        <span class="kd">let</span> <span class="nv">fileMenu</span> <span class="p">=</span> <span class="n">NSMenuItem</span><span class="p">()</span>
        <span class="n">fileMenu</span><span class="p">.</span><span class="n">submenu</span> <span class="p">=</span> <span class="n">NSMenu</span><span class="p">(</span><span class="n">title</span><span class="p">:</span> <span class="s">&quot;File&quot;</span><span class="p">)</span>
        <span class="n">fileMenu</span><span class="p">.</span><span class="n">submenu</span><span class="p">?.</span><span class="n">items</span> <span class="p">=</span> <span class="p">[</span>
            <span class="n">NSMenuItem</span><span class="p">(</span><span class="n">title</span><span class="p">:</span> <span class="s">&quot;New&quot;</span><span class="p">,</span> <span class="n">action</span><span class="p">:</span> <span class="k">#selector</span><span class="p">(</span><span class="n">NSDocumentController</span><span class="p">.</span><span class="n">newDocument</span><span class="p">(</span><span class="kc">_</span><span class="p">:)),</span> <span class="n">keyEquivalent</span><span class="p">:</span> <span class="s">&quot;n&quot;</span><span class="p">),</span>
            <span class="n">NSMenuItem</span><span class="p">(</span><span class="n">title</span><span class="p">:</span> <span class="s">&quot;Open&quot;</span><span class="p">,</span> <span class="n">action</span><span class="p">:</span> <span class="k">#selector</span><span class="p">(</span><span class="n">NSDocumentController</span><span class="p">.</span><span class="n">openDocument</span><span class="p">(</span><span class="kc">_</span><span class="p">:)),</span> <span class="n">keyEquivalent</span><span class="p">:</span> <span class="s">&quot;o&quot;</span><span class="p">),</span>
            <span class="n">NSMenuItem</span><span class="p">.</span><span class="n">separator</span><span class="p">(),</span>
            <span class="n">NSMenuItem</span><span class="p">(</span><span class="n">title</span><span class="p">:</span> <span class="s">&quot;Close&quot;</span><span class="p">,</span> <span class="n">action</span><span class="p">:</span> <span class="k">#selector</span><span class="p">(</span><span class="n">NSWindow</span><span class="p">.</span><span class="n">performClose</span><span class="p">(</span><span class="kc">_</span><span class="p">:)),</span> <span class="n">keyEquivalent</span><span class="p">:</span> <span class="s">&quot;w&quot;</span><span class="p">),</span>
            <span class="n">NSMenuItem</span><span class="p">(</span><span class="n">title</span><span class="p">:</span> <span class="s">&quot;Save&quot;</span><span class="p">,</span> <span class="n">action</span><span class="p">:</span> <span class="k">#selector</span><span class="p">(</span><span class="n">NSDocument</span><span class="p">.</span><span class="n">save</span><span class="p">(</span><span class="kc">_</span><span class="p">:)),</span> <span class="n">keyEquivalent</span><span class="p">:</span> <span class="s">&quot;s&quot;</span><span class="p">)</span>
        <span class="p">]</span>

        <span class="c1">// Edit Menu</span>
        <span class="kd">let</span> <span class="nv">editMenu</span> <span class="p">=</span> <span class="n">NSMenuItem</span><span class="p">()</span>
        <span class="n">editMenu</span><span class="p">.</span><span class="n">submenu</span> <span class="p">=</span> <span class="n">NSMenu</span><span class="p">(</span><span class="n">title</span><span class="p">:</span> <span class="s">&quot;Edit&quot;</span><span class="p">)</span>
        <span class="n">editMenu</span><span class="p">.</span><span class="n">submenu</span><span class="p">?.</span><span class="n">items</span> <span class="p">=</span> <span class="p">[</span>
            <span class="n">NSMenuItem</span><span class="p">(</span><span class="n">title</span><span class="p">:</span> <span class="s">&quot;Undo&quot;</span><span class="p">,</span> <span class="n">action</span><span class="p">:</span> <span class="nb">Selector</span><span class="p">((</span><span class="s">&quot;undo:&quot;</span><span class="p">)),</span> <span class="n">keyEquivalent</span><span class="p">:</span> <span class="s">&quot;z&quot;</span><span class="p">),</span>
            <span class="n">NSMenuItem</span><span class="p">(</span><span class="n">title</span><span class="p">:</span> <span class="s">&quot;Redo&quot;</span><span class="p">,</span> <span class="n">action</span><span class="p">:</span> <span class="nb">Selector</span><span class="p">((</span><span class="s">&quot;redo:&quot;</span><span class="p">)),</span> <span class="n">keyEquivalent</span><span class="p">:</span> <span class="s">&quot;Z&quot;</span><span class="p">)</span>
        <span class="p">]</span>

        <span class="n">items</span> <span class="p">=</span> <span class="p">[</span><span class="n">appMenu</span><span class="p">,</span> <span class="n">fileMenu</span><span class="p">,</span> <span class="n">editMenu</span><span class="p">]</span>
    <span class="p">}</span>
    
    <span class="kr">required</span> <span class="kd">init</span><span class="p">(</span><span class="n">coder</span><span class="p">:</span> <span class="bp">NSCoder</span><span class="p">)</span> <span class="p">{</span>
        <span class="kc">super</span><span class="p">.</span><span class="kd">init</span><span class="p">(</span><span class="n">coder</span><span class="p">:</span> <span class="n">coder</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</div></code></pre><p>to hook it up edit main.swift:</p><pre><code><div class="highlight"><span></span><span class="kd">let</span> <span class="nv">menu</span> <span class="p">=</span> <span class="n">Menu</span><span class="p">()</span>
<span class="n">app</span><span class="p">.</span><span class="n">menu</span> <span class="p">=</span> <span class="n">menu</span>
</div></code></pre><h3>Enable open and save</h3><p>add this to Document.swift:</p><pre><code><div class="highlight"><span></span><span class="kr">override</span> <span class="kd">func</span> <span class="nf">data</span><span class="p">(</span><span class="n">ofType</span> <span class="n">typeName</span><span class="p">:</span> <span class="nb">String</span><span class="p">)</span> <span class="kr">throws</span> <span class="p">-&gt;</span> <span class="n">Data</span> <span class="p">{</span>
  <span class="n">viewController</span><span class="p">.</span><span class="n">textView</span><span class="p">.</span><span class="n">breakUndoCoalescing</span><span class="p">()</span>
	<span class="k">return</span> <span class="n">content</span><span class="p">.</span><span class="n">data</span><span class="p">()</span>
<span class="p">}</span>

<span class="kr">override</span> <span class="kd">func</span> <span class="nf">read</span><span class="p">(</span><span class="n">from</span> <span class="n">data</span><span class="p">:</span> <span class="n">Data</span><span class="p">,</span> <span class="n">ofType</span> <span class="n">typeName</span><span class="p">:</span> <span class="nb">String</span><span class="p">)</span> <span class="kr">throws</span> <span class="p">{</span>
	<span class="n">content</span><span class="p">.</span><span class="n">read</span><span class="p">(</span><span class="n">from</span><span class="p">:</span> <span class="n">data</span><span class="p">)</span>
<span class="p">}</span>
</div></code></pre><p>and these to tell the system that we handle normal text-files:</p><pre><code><div class="highlight"><span></span><span class="kr">override</span> <span class="kd">class</span> <span class="nc">var</span> <span class="n">readableTypes</span><span class="p">:</span> <span class="p">[</span><span class="nb">String</span><span class="p">]</span> <span class="p">{</span>
  <span class="p">[</span><span class="s">&quot;public.text&quot;</span><span class="p">]</span>
<span class="p">}</span>

<span class="kr">override</span> <span class="kd">class</span> <span class="nc">func</span> <span class="n">isNativeType</span><span class="p">(</span><span class="kc">_</span> <span class="n">type</span><span class="p">:</span> <span class="nb">String</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="nb">Bool</span> <span class="p">{</span>
  <span class="kc">true</span>
<span class="p">}</span>
</div></code></pre><h3>Magic sauce!</h3><p>At this point you cannot select standard text files to open 😳 The Document class clearly says that is is able to read "public.text". But we need to make the complete class visible to the Objc runtime.</p><pre><code><div class="highlight"><span></span><span class="kr">@objc</span><span class="p">(</span><span class="n">Document</span><span class="p">)</span>
<span class="kd">class</span> <span class="nc">Documnt</span><span class="p">:</span> <span class="n">NSDocument</span> <span class="p">{...}</span>
</div></code></pre><p>Thanks to the guys at <a href="https://www.objc.io">objc.io</a> we now have a working text editor.</p><h3>Makefile</h3><p><a href="https://rderik.com">Derik Ramirez</a> provided me with a simple Makefile:</p><pre><code><div class="highlight"><span></span><span class="nv">SUPPORTFILES</span><span class="o">=</span>./SupportFiles
<span class="nv">PLATFORM</span><span class="o">=</span>x86_64-apple-macosx
<span class="nv">BUILD_DIRECTORY</span> <span class="o">=</span> ./.build/<span class="si">${</span><span class="nv">PLATFORM</span><span class="si">}</span>/debug
<span class="nv">APP_DIRECTORY</span><span class="o">=</span>./Scratched.app
<span class="nv">CFBUNDLEEXECUTABLE</span><span class="o">=</span>Scratched

<span class="nf">install</span><span class="o">:</span> <span class="n">build</span> <span class="n">copySupportFiles</span>

<span class="nf">build</span><span class="o">:</span>
	swift build

<span class="nf">copySupportFiles</span><span class="o">:</span>
	mkdir -p <span class="si">${</span><span class="nv">APP_DIRECTORY</span><span class="si">}</span>/Contents/MacOS/ <span class="o">&amp;&amp;</span> <span class="se">\</span>
	cp <span class="si">${</span><span class="nv">SUPPORTFILES</span><span class="si">}</span>/Info.plist <span class="si">${</span><span class="nv">APP_DIRECTORY</span><span class="si">}</span>/Contents <span class="o">&amp;&amp;</span> <span class="se">\</span>
	cp <span class="si">${</span><span class="nv">BUILD_DIRECTORY</span><span class="si">}</span>/<span class="si">${</span><span class="nv">CFBUNDLEEXECUTABLE</span><span class="si">}</span> <span class="si">${</span><span class="nv">APP_DIRECTORY</span><span class="si">}</span>/Contents/MacOS/

<span class="nf">run</span><span class="o">:</span> <span class="p">|</span> <span class="n">install</span>
	open <span class="si">${</span><span class="nv">APP_DIRECTORY</span><span class="si">}</span>

<span class="nf">clean</span><span class="o">:</span>
	rm -rf .build
	rm -rf <span class="si">${</span><span class="nv">APP_DIRECTORY</span><span class="si">}</span>

<span class="nf">.PHONY</span><span class="o">:</span> <span class="n">run</span> <span class="n">build</span> <span class="n">copySupportFiles</span> <span class="n">clean</span>
</div></code></pre><p>For this to work you need to create</p><pre><code><div class="highlight"><span></span>mkdir SupportFiles
touch SupportFiles/Info.plist
</div></code></pre><p>And add the following content:</p><pre><code><div class="highlight"><span></span><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
<span class="cp">&lt;!DOCTYPE plist PUBLIC &quot;-//Apple//DTD PLIST 1.0//EN&quot; &quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;&gt;</span>
<span class="nt">&lt;plist</span> <span class="na">version=</span><span class="s">&quot;1.0&quot;</span><span class="nt">&gt;</span>
<span class="nt">&lt;dict</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;/plist&gt;</span>
</div></code></pre><p>Now you can run the app via</p><pre><code><div class="highlight"><span></span>make run
</div></code></pre>]]></content:encoded></item><item><guid isPermaLink="true">https://oliver-epper.de/posts/create-a-document-based-editor-with-xib-files-and-swifty-cocoa-bindings</guid><title>Create a document based editor with xib files and swifty cocoa bindings</title><description>How to create document based editor with xib files and Cocoa Bindings</description><link>https://oliver-epper.de/posts/create-a-document-based-editor-with-xib-files-and-swifty-cocoa-bindings</link><pubDate>Mon, 16 Nov 2020 09:41:00 +0100</pubDate><content:encoded><![CDATA[<p>While learning how to write really good Mac Apps I figured that I simply cannot rely on SwiftUI alone, just yet. SwiftUI is really cool but AppKit has so much to offer and SwiftUI still lacks a few bits and pieces on the Mac. If you're interested in building a document based app in SwiftUI, Gui Rambo has a nice article <a href="https://wwdcbysundell.com/2020/creating-document-based-apps-in-swiftui/">Creating document-based apps using SwiftUI</a>.</p><h2>Create the App</h2><p>While I do like to use Interface Builder sometimes I didn't want to use Storyboards, here. So let's start by creating a "Document App" and choose XIB for the interface type. If you run the app you should see something like this:</p><figure>
    <picture>
        <source srcset="/images/AppWindow-dark.png" media="(prefers-color-scheme: dark)">
        <img src="https://oliver-epper.de/images/AppWindow.png" alt="AppWindow">
    </picture>
</figure><p>We want do do things a little bit different so go ahead an delete Document.xib. Let's create two Controllers. One NSWindowController and one NSViewController that we will use to present the NSTextView.</p><h3>Create the WindowController</h3><p>So press CMD-N choose <strong>Cocoa Class</strong> and name it <code>DocumentWindowController</code>. Make it a subclass of <code>NSWindowController</code> and check <strong>Also create XIB file</strong>.</p><figure>
    <picture>
        <source srcset="/images/Create_DocumentWindowController-dark.png" media="(prefers-color-scheme: dark)">
        <img src="https://oliver-epper.de/images/Create_DocumentWindowController.png" alt="Create DocumentWindowController">
    </picture>
</figure><p>Rename the DocumentWindowController.xib to Document.xib.</p><h3>Create the ViewController</h3><p>Press CMD-N choose <strong>Cocoa Class</strong> and name it <code>EditorViewController</code>. Make it a subclass of <code>NSViewController</code> and check <strong>Also create XIB file</strong>.</p><figure>
    <picture>
        <source srcset="/images/Create_EditorViewController-dark.png" media="(prefers-color-scheme: dark)">
        <img src="https://oliver-epper.de/images/Create_EditorViewController.png" alt="Create EditorViewController">
    </picture>
</figure><h3>Create the model</h3><p>Create a new file Content.swift with the following content:</p><pre><code><div class="highlight"><span></span><span class="kd">import</span> <span class="nc">Foundation</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Content</span><span class="p">:</span> <span class="bp">NSObject</span> <span class="p">{</span>
    <span class="kr">@objc</span> <span class="kr">dynamic</span> <span class="kd">var</span> <span class="nv">contentString</span><span class="p">:</span> <span class="nb">String</span>

    <span class="kd">public</span> <span class="kd">init</span><span class="p">(</span><span class="n">contentString</span><span class="p">:</span> <span class="nb">String</span><span class="p">)</span> <span class="p">{</span>
        <span class="kc">self</span><span class="p">.</span><span class="n">contentString</span> <span class="p">=</span> <span class="n">contentString</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">extension</span> <span class="nc">Content</span> <span class="p">{</span>
    <span class="kd">func</span> <span class="nf">read</span><span class="p">(</span><span class="n">from</span> <span class="n">data</span><span class="p">:</span> <span class="n">Data</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">contentString</span> <span class="p">=</span> <span class="nb">String</span><span class="p">(</span><span class="n">bytes</span><span class="p">:</span> <span class="n">data</span><span class="p">,</span> <span class="n">encoding</span><span class="p">:</span> <span class="p">.</span><span class="n">utf8</span><span class="p">)</span> <span class="p">??</span> <span class="s">&quot;&quot;</span>
    <span class="p">}</span>

    <span class="kd">func</span> <span class="nf">data</span><span class="p">()</span> <span class="p">-&gt;</span> <span class="n">Data</span><span class="p">?</span> <span class="p">{</span>
        <span class="n">contentString</span><span class="p">.</span><span class="n">data</span><span class="p">(</span><span class="n">using</span><span class="p">:</span> <span class="p">.</span><span class="n">utf8</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</div></code></pre><p>Since we want to use Cocoa Bindings the <code>contentString</code> variable needs to be accessible from the Objective-C runtime. <code>@objc</code> makes the var available to Objective-C and <code>dynamic</code> chooses dynamic dispatch instead of static dispatch.</p><h3>Edit the Document class</h3><p>Every Document needs its own NSWindowController. Remember how we deleted the original Document.xib that came with the template? Since we renamed the xib that came with our DocumentWindowController to Document.xib we can still start the app. But our DocumentWindowController will not be loaded.</p><p>To prove: Set a breakpoint to <code>windowDidLoad</code> in DocumentWindowController.</p><p>So although the "File's Owner" propety of our renamed Document.xib still points to our controller, that does not mean that the controller gets loaded. That's not how this works. Even if you would rename the xib back to its original name and change the var <code>windowNibName</code> in <code>Document</code> to return the right name the breakpoint would still not be hit.</p><p>Let's change that: First delete the override of the var <code>windowNibName</code> from the <code>Document</code>. Now let's override the function <code>makeWindowControllers</code>:</p><pre><code><div class="highlight"><span></span><span class="kr">override</span> <span class="kd">func</span> <span class="nf">makeWindowControllers</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">let</span> <span class="nv">windowController</span> <span class="p">=</span> <span class="n">DocumentWindowController</span><span class="p">(</span><span class="n">windowNibName</span><span class="p">:</span> <span class="s">&quot;Document&quot;</span><span class="p">)</span>
    <span class="n">addWindowController</span><span class="p">(</span><span class="n">windowController</span><span class="p">)</span>
<span class="p">}</span>
</div></code></pre><p>If you build and run again you will now hit the breakpoint.</p><h4>Hook up the EditorViewController</h4><p>Add another line to the funtion <code>makeWindowControllers</code>:</p><pre><code><div class="highlight"><span></span><span class="n">windowController</span><span class="p">.</span><span class="n">contentViewController</span> <span class="p">=</span> <span class="n">EditorViewController</span><span class="p">()</span>
</div></code></pre><p>You don't need to specify the nibName here, if it equals the NSViewControllers name. Want proove again? Drop a "Hello World" label in the EditorViewController.xib and restart the app. 😀</p><p>Before we continue to create the UI let's finish the work on the Document class.</p><p>Add a memeber that will hold the model:</p><pre><code><div class="highlight"><span></span><span class="kr">@objc</span> <span class="kd">var</span> <span class="nv">content</span> <span class="p">=</span> <span class="n">Content</span><span class="p">(</span><span class="n">contentString</span><span class="p">:</span> <span class="s">&quot;&quot;</span><span class="p">)</span>
</div></code></pre><p>Set the model as the ViewControllers representedObject. So change <code>makeWindowControllers</code> to this:</p><pre><code><div class="highlight"><span></span><span class="kr">override</span> <span class="kd">func</span> <span class="nf">makeWindowControllers</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">let</span> <span class="nv">windowController</span> <span class="p">=</span> <span class="n">DocumentWindowController</span><span class="p">(</span><span class="n">windowNibName</span><span class="p">:</span> <span class="s">&quot;Document&quot;</span><span class="p">)</span>
    <span class="n">addWindowController</span><span class="p">(</span><span class="n">windowController</span><span class="p">)</span>
    <span class="kd">let</span> <span class="nv">editorViewController</span> <span class="p">=</span> <span class="n">EditorViewController</span><span class="p">()</span>
    <span class="n">editorViewController</span><span class="p">.</span><span class="n">representedObject</span> <span class="p">=</span> <span class="n">content</span>
    <span class="n">windowController</span><span class="p">.</span><span class="n">contentViewController</span> <span class="p">=</span> <span class="n">editorViewController</span>
<span class="p">}</span>
</div></code></pre><p>Last replace the body of the <code>data() -&gt; Data</code> function with</p><pre><code><div class="highlight"><span></span><span class="k">return</span> <span class="n">content</span><span class="p">.</span><span class="n">data</span><span class="p">()</span> <span class="p">??</span> <span class="n">Data</span><span class="p">()</span>
</div></code></pre><p>and the body of the <code>read()</code> function with:</p><pre><code><div class="highlight"><span></span><span class="n">content</span><span class="p">.</span><span class="n">read</span><span class="p">(</span><span class="n">from</span><span class="p">:</span> <span class="n">data</span><span class="p">)</span>
</div></code></pre><p>That's it for the <code>Document</code> class.</p><h2>Wire up the EditorViewController</h2><p>Delete the label (if you added it) from the nib and replace it with a NSTextView that you constrain to all for edges. In the Bindings Inspector select value and bind it to: "File's Owner" use <code>self.representedObject.contentString</code> as the "Model Key Path" and check "Continuously Update value". If you want you can add a <code>didSet</code> to the contentString var in <code>Content</code> to see it updates like this:</p><pre><code><div class="highlight"><span></span><span class="kr">@objc</span> <span class="kr">dynamic</span> <span class="kd">var</span> <span class="nv">contentString</span><span class="p">:</span> <span class="nb">String</span> <span class="p">{</span>
    <span class="kr">didSet</span> <span class="p">{</span>
        <span class="bp">print</span><span class="p">(</span><span class="n">contentString</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</div></code></pre><p>If you build and run now you'll see what you enter in the TextView beeing printed to the console.</p><p>Let's try saving. Cool! What about opening a document? Restart the app and try opening the file. Works too. How neat :-D</p><h2>More Swifty Bindings</h2><p>Go ahead and delete the binding from the connections inspector. Thanks to Lucas Derraugh's fantastic youtube series about <a href="https://www.youtube.com/channel/UCDg-YmnNehm3KB0BpytkUJg">Apple Programming</a> I learned about a much nicer and swiftier way.</p><p>Create an outlet to the <code>NSTextView</code> in the <code>EditorViewController</code> and add the following line to <code>viewDidLoad()</code>:</p><pre><code><div class="highlight"><span></span><span class="n">textView</span><span class="p">.</span><span class="n">bind</span><span class="p">(.</span><span class="n">value</span><span class="p">,</span> <span class="n">to</span><span class="p">:</span> <span class="n">representedObject</span><span class="p">!,</span> <span class="n">withKeyPath</span><span class="p">:</span> <span class="s">&quot;contentString&quot;</span><span class="p">,</span> <span class="n">options</span><span class="p">:</span> <span class="p">[</span><span class="n">NSBindingOption</span><span class="p">.</span><span class="n">continuouslyUpdatesValue</span><span class="p">:</span> <span class="kc">true</span><span class="p">])</span>
</div></code></pre><p>We're immediately back in business. Value is still bound to <code>contentString</code> and through the options dictionary we still tell the <code>NSTextView</code> to send updates continuously. But Lucas had another cool idea:</p><p>Create the following extentions on <code>NSObject</code>:</p><pre><code><div class="highlight"><span></span><span class="kd">extension</span> <span class="bp">NSObject</span> <span class="p">{</span>
    <span class="kd">func</span> <span class="nf">bind</span><span class="p">&lt;</span><span class="n">Root</span><span class="p">,</span> <span class="n">Value</span><span class="p">&gt;(</span><span class="kc">_</span> <span class="n">binding</span><span class="p">:</span> <span class="n">NSBindingName</span><span class="p">,</span> <span class="n">to</span> <span class="n">observable</span><span class="p">:</span> <span class="n">Root</span><span class="p">,</span> <span class="n">keyPath</span><span class="p">:</span> <span class="n">KeyPath</span><span class="p">&lt;</span><span class="n">Root</span><span class="p">,</span> <span class="n">Value</span><span class="p">&gt;,</span> <span class="n">options</span><span class="p">:</span> <span class="p">[</span><span class="n">NSBindingOption</span><span class="p">:</span> <span class="nb">Any</span><span class="p">]?</span> <span class="p">=</span> <span class="kc">nil</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">guard</span> <span class="kd">let</span> <span class="nv">kvcKeyPath</span> <span class="p">=</span> <span class="n">keyPath</span><span class="p">.</span><span class="n">_kvcKeyPathString</span> <span class="k">else</span> <span class="p">{</span>
            <span class="bp">print</span><span class="p">(</span><span class="s">&quot;KeyPath does not contain @objc exposed values&quot;</span><span class="p">)</span>
            <span class="k">return</span>
        <span class="p">}</span>
        <span class="n">bind</span><span class="p">(</span><span class="n">binding</span><span class="p">,</span> <span class="n">to</span><span class="p">:</span> <span class="n">observable</span><span class="p">,</span> <span class="n">withKeyPath</span><span class="p">:</span> <span class="n">kvcKeyPath</span><span class="p">,</span> <span class="n">options</span><span class="p">:</span> <span class="n">options</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</div></code></pre><p>With that in place we can get rid of the <em>stringly</em> typed keyPath on the call side and use a Swift KeyPath:</p><pre><code><div class="highlight"><span></span> <span class="k">if</span> <span class="kd">let</span> <span class="nv">content</span> <span class="p">=</span> <span class="n">representedObject</span> <span class="k">as</span><span class="p">?</span> <span class="n">Content</span> <span class="p">{</span>
            <span class="n">textView</span><span class="p">.</span><span class="n">bind</span><span class="p">(.</span><span class="n">value</span><span class="p">,</span> <span class="n">to</span><span class="p">:</span> <span class="n">content</span><span class="p">,</span> <span class="n">keyPath</span><span class="p">:</span> <span class="err">\</span><span class="p">.</span><span class="n">contentString</span><span class="p">,</span> <span class="n">options</span><span class="p">:</span> <span class="p">[</span><span class="n">NSBindingOption</span><span class="p">.</span><span class="n">continuouslyUpdatesValue</span><span class="p">:</span> <span class="kc">true</span><span class="p">])</span>
        <span class="p">}</span>
</div></code></pre><p>That's much better 💪</p><p>Are you interested in doing the above completely in code? Or use Combine to bind to the model? Let's chat.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://oliver-epper.de/posts/save-metrickit-payload-into-a-postgres-jsonb-column-with-vapor</guid><title>MetricKit and Vapor</title><description>Save MetricKit payload into a postgres jsonb column with vapor</description><link>https://oliver-epper.de/posts/save-metrickit-payload-into-a-postgres-jsonb-column-with-vapor</link><pubDate>Thu, 9 Jul 2020 09:41:00 +0200</pubDate><content:encoded><![CDATA[<p>I recently learned about MetricKit from Apple and I thought this would be a good fit to learn something about my iOS code in the wild.</p><p>Using MetricKit could not be easier. After you conformed to <code>MXMetricManagerSubscriber</code> you can add yourself to the <code>MXMetricManager</code></p><pre><code><div class="highlight"><span></span><span class="bp">MXMetricManager</span><span class="p">.</span><span class="n">shared</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="kc">self</span><span class="p">)</span>
</div></code></pre><p>The most obvious place would be the AppDelegate's <code>didFinishLaunchingWithOptions</code> function. You can use <code>applicationWillTerminate</code> to remove yourself from the MXMetricManager</p><pre><code><div class="highlight"><span></span><span class="bp">MXMetricManager</span><span class="p">.</span><span class="n">shared</span><span class="p">.</span><span class="n">remove</span><span class="p">(</span><span class="kc">self</span><span class="p">)</span>
</div></code></pre><p>The only thing that's left is implementing the delegate method:</p><pre><code><div class="highlight"><span></span><span class="kd">extension</span> <span class="nc">AppDelegate</span><span class="p">:</span> <span class="bp">MXMetricManagerSubscriber</span> <span class="p">{</span>
    <span class="kd">func</span> <span class="nf">didReceive</span><span class="p">(</span><span class="kc">_</span> <span class="n">payloads</span><span class="p">:</span> <span class="p">[</span><span class="bp">MXMetricPayload</span><span class="p">])</span> <span class="p">{</span>
        <span class="k">for</span> <span class="n">payload</span> <span class="k">in</span> <span class="n">payloads</span> <span class="p">{</span>
            <span class="kd">let</span> <span class="nv">url</span> <span class="p">=</span> <span class="n">URL</span><span class="p">(</span><span class="n">string</span><span class="p">:</span> <span class="s">&quot;https://your.vapor.server/collect&quot;</span><span class="p">)</span><span class="o">!</span>

            <span class="kd">var</span> <span class="nv">request</span> <span class="p">=</span> <span class="n">URLRequest</span><span class="p">(</span><span class="n">url</span><span class="p">:</span> <span class="n">url</span><span class="p">)</span>
            <span class="n">request</span><span class="p">.</span><span class="n">httpMethod</span> <span class="p">=</span> <span class="s">&quot;POST&quot;</span>
            <span class="n">request</span><span class="p">.</span><span class="n">httpBody</span> <span class="p">=</span> <span class="n">payload</span><span class="p">.</span><span class="n">jsonRepresentation</span><span class="p">()</span>

            <span class="kd">let</span> <span class="nv">task</span> <span class="p">=</span> <span class="n">URLSession</span><span class="p">.</span><span class="n">shared</span><span class="p">.</span><span class="n">dataTask</span><span class="p">(</span><span class="n">with</span><span class="p">:</span> <span class="n">request</span><span class="p">)</span>
            <span class="n">task</span><span class="p">.</span><span class="n">resume</span><span class="p">()</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</div></code></pre><p>All this and more is nicely documented on <a href="https://nshipster.com/metrickit/">NSHipster – MetricKit</a>.</p><h2>Vapor</h2><p>So in Vapor we need a <code>/collect</code>-route that takes the payload. The easiest solution would be to build a struct that takes some (or all) of the information from the payload, but I wanted to do the same thing Matt did (in Ruby or JS) and just save the payload in a jsonb-column.</p><p>With the help of the really great people in the Vapor-Discord (namely: TypeBeta) I was able to achieve what I wanted with the following model-class</p><pre><code><div class="highlight"><span></span><span class="kd">import</span> <span class="nc">Vapor</span>
<span class="kd">import</span> <span class="nc">Fluent</span>
<span class="kd">import</span> <span class="nc">PostgresNIO</span>

<span class="kd">struct</span> <span class="nc">JsonWrapper</span><span class="p">:</span> <span class="n">Codable</span><span class="p">,</span> <span class="n">PostgresDataConvertible</span> <span class="p">{</span>
    <span class="kd">let</span> <span class="nv">payload</span><span class="p">:</span> <span class="nb">String</span>

    <span class="kd">static</span> <span class="kd">var</span> <span class="nv">postgresDataType</span><span class="p">:</span> <span class="n">PostgresDataType</span> <span class="p">{</span>
        <span class="p">.</span><span class="n">jsonb</span>
    <span class="p">}</span>

    <span class="kd">init</span><span class="p">(</span><span class="kc">_</span> <span class="n">payload</span><span class="p">:</span> <span class="nb">String</span><span class="p">)</span> <span class="p">{</span>
        <span class="kc">self</span><span class="p">.</span><span class="n">payload</span> <span class="p">=</span> <span class="n">payload</span>
    <span class="p">}</span>

    <span class="kd">init</span><span class="p">(</span><span class="n">from</span> <span class="n">decoder</span><span class="p">:</span> <span class="n">Decoder</span><span class="p">)</span> <span class="kr">throws</span> <span class="p">{</span>
        <span class="kc">self</span><span class="p">.</span><span class="n">payload</span> <span class="p">=</span> <span class="k">try</span> <span class="nb">String</span><span class="p">.</span><span class="kd">init</span><span class="p">(</span><span class="n">from</span><span class="p">:</span> <span class="n">decoder</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="kd">func</span> <span class="nf">encode</span><span class="p">(</span><span class="n">to</span> <span class="n">encoder</span><span class="p">:</span> <span class="n">Encoder</span><span class="p">)</span> <span class="kr">throws</span> <span class="p">{</span>
        <span class="k">try</span> <span class="n">payload</span><span class="p">.</span><span class="n">encode</span><span class="p">(</span><span class="n">to</span><span class="p">:</span> <span class="n">encoder</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="kd">init</span><span class="p">?(</span><span class="n">postgresData</span><span class="p">:</span> <span class="n">PostgresData</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">guard</span> <span class="kd">let</span> <span class="nv">data</span> <span class="p">=</span> <span class="n">postgresData</span><span class="p">.</span><span class="n">jsonb</span> <span class="k">else</span> <span class="p">{</span> <span class="k">return</span> <span class="kc">nil</span> <span class="p">}</span>
        <span class="k">guard</span> <span class="kd">let</span> <span class="nv">payload</span> <span class="p">=</span> <span class="nb">String</span><span class="p">(</span><span class="n">data</span><span class="p">:</span> <span class="n">data</span><span class="p">,</span> <span class="n">encoding</span><span class="p">:</span> <span class="p">.</span><span class="n">utf8</span><span class="p">)</span> <span class="k">else</span> <span class="p">{</span> <span class="k">return</span> <span class="kc">nil</span> <span class="p">}</span>
        <span class="kc">self</span><span class="p">.</span><span class="kd">init</span><span class="p">(</span><span class="n">payload</span><span class="p">)</span>
    <span class="p">}</span>
    
    <span class="kd">var</span> <span class="nv">postgresData</span><span class="p">:</span> <span class="n">PostgresData</span><span class="p">?</span> <span class="p">{</span>
        <span class="k">guard</span> <span class="kd">let</span> <span class="nv">jsonString</span> <span class="p">=</span> <span class="kc">self</span><span class="p">.</span><span class="n">payload</span><span class="p">.</span><span class="n">data</span><span class="p">(</span><span class="n">using</span><span class="p">:</span> <span class="p">.</span><span class="n">utf8</span><span class="p">)</span> <span class="k">else</span> <span class="p">{</span> <span class="k">return</span> <span class="kc">nil</span> <span class="p">}</span>
        <span class="k">return</span> <span class="p">.</span><span class="kd">init</span><span class="p">(</span><span class="n">jsonb</span><span class="p">:</span> <span class="n">jsonString</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kr">final</span> <span class="kd">class</span> <span class="nc">Metric</span><span class="p">:</span> <span class="n">Model</span><span class="p">,</span> <span class="n">Content</span> <span class="p">{</span>
    <span class="kd">static</span> <span class="kd">let</span> <span class="nv">schema</span> <span class="p">=</span> <span class="s">&quot;metrics&quot;</span>

    <span class="p">@</span><span class="n">ID</span><span class="p">(</span><span class="n">key</span><span class="p">:</span> <span class="p">.</span><span class="n">id</span><span class="p">)</span>
    <span class="kd">var</span> <span class="nv">id</span><span class="p">:</span> <span class="n">UUID</span><span class="p">?</span>
    
    <span class="p">@</span><span class="n">Field</span><span class="p">(</span><span class="n">key</span><span class="p">:</span> <span class="s">&quot;payload&quot;</span><span class="p">)</span>
    <span class="kd">var</span> <span class="nv">payload</span><span class="p">:</span> <span class="n">JsonWrapper</span>

    <span class="kd">init</span><span class="p">()</span> <span class="p">{</span> <span class="p">}</span>

    <span class="kd">init</span><span class="p">(</span><span class="n">id</span><span class="p">:</span> <span class="n">UUID</span><span class="p">?</span> <span class="p">=</span> <span class="kc">nil</span><span class="p">,</span> <span class="n">payload</span><span class="p">:</span> <span class="n">JsonWrapper</span><span class="p">)</span> <span class="p">{</span>
        <span class="kc">self</span><span class="p">.</span><span class="n">id</span> <span class="p">=</span> <span class="n">id</span>
        <span class="kc">self</span><span class="p">.</span><span class="n">payload</span> <span class="p">=</span> <span class="n">payload</span>
    <span class="p">}</span>
<span class="p">}</span>
</div></code></pre><p>In the <code>Metric</code>-class the member payload is of type <code>JsonWrapper</code>. This type tells postgres how to get the wrapped payload into postgres (<code>var postgresData</code>) and how to initialise the payload from the data that is saved in postgres (<code>init?(postgresData: PostgresData)</code>). The PostgresData-initializer (<code>.init(jsonb: jsonString)</code>) tells the type that it should treat <code>jsonString</code> as json.</p><p>Now the controller becomes a piece of cake 😎</p><pre><code><div class="highlight"><span></span><span class="kd">struct</span> <span class="nc">MetricController</span><span class="p">:</span> <span class="n">RouteCollection</span> <span class="p">{</span>
    <span class="kd">func</span> <span class="nf">boot</span><span class="p">(</span><span class="n">routes</span><span class="p">:</span> <span class="n">RoutesBuilder</span><span class="p">)</span> <span class="kr">throws</span> <span class="p">{</span>
        <span class="kd">let</span> <span class="nv">collect</span> <span class="p">=</span> <span class="n">routes</span><span class="p">.</span><span class="n">grouped</span><span class="p">(</span><span class="s">&quot;collect&quot;</span><span class="p">)</span>
        <span class="n">collect</span><span class="p">.</span><span class="n">post</span><span class="p">(</span><span class="n">use</span><span class="p">:</span> <span class="n">create</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="kd">func</span> <span class="nf">create</span><span class="p">(</span><span class="n">req</span><span class="p">:</span> <span class="n">Request</span><span class="p">)</span> <span class="kr">throws</span> <span class="p">-&gt;</span> <span class="n">EventLoopFuture</span><span class="p">&lt;</span><span class="n">HTTPStatus</span><span class="p">&gt;</span> <span class="p">{</span>
        <span class="kd">let</span> <span class="nv">metric</span> <span class="p">=</span> <span class="n">Metric</span><span class="p">()</span>
        <span class="kd">let</span> <span class="nv">payload_string</span> <span class="p">=</span> <span class="k">try</span> <span class="n">req</span><span class="p">.</span><span class="n">content</span><span class="p">.</span><span class="n">decode</span><span class="p">(</span><span class="nb">String</span><span class="p">.</span><span class="kc">self</span><span class="p">)</span>
        <span class="n">metric</span><span class="p">.</span><span class="n">payload</span> <span class="p">=</span> <span class="n">JsonWrapper</span><span class="p">(</span><span class="n">payload_string</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">metric</span><span class="p">.</span><span class="n">save</span><span class="p">(</span><span class="n">on</span><span class="p">:</span> <span class="n">req</span><span class="p">.</span><span class="n">db</span><span class="p">).</span><span class="n">transform</span><span class="p">(</span><span class="n">to</span><span class="p">:</span> <span class="n">HTTPStatus</span><span class="p">.</span><span class="n">noContent</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</div></code></pre><h2>Heads up</h2><p>Simulating MetricKit payload is only enabled on a real device. So you need to run your iOS code on a real device. Once you have data in the database you can query "into" your payload like this:</p><pre><code><div class="highlight"><span></span><span class="k">select</span> <span class="n">payload</span><span class="o">-&gt;</span><span class="s1">&#39;appVersion&#39;</span> <span class="k">from</span> <span class="n">metrics</span><span class="p">;</span>
</div></code></pre><p>Or how about building a view:</p><pre><code><div class="highlight"><span></span><span class="k">CREATE</span> <span class="k">VIEW</span> <span class="n">app_versions</span> <span class="k">AS</span> <span class="k">SELECT</span> <span class="n">id</span><span class="p">,</span><span class="n">payload</span><span class="o">-&gt;</span><span class="s1">&#39;appVersion&#39;</span> <span class="k">AS</span> <span class="n">app_version</span><span class="p">,</span><span class="n">payload</span><span class="o">-&gt;</span><span class="s1">&#39;metaData&#39;</span><span class="o">-&gt;&gt;</span><span class="s1">&#39;deviceType&#39;</span> <span class="k">AS</span> <span class="n">device_type</span> <span class="k">FROM</span> <span class="n">metrics</span><span class="p">;</span>
</div></code></pre><p>Now you can do something like this:</p><pre><code><div class="highlight"><span></span><span class="k">select</span> <span class="k">distinct</span><span class="p">(</span><span class="n">app_version</span><span class="p">)</span> <span class="k">from</span> <span class="n">app_versions</span><span class="p">;</span>
</div></code></pre><h2>Question</h2><p>This is completely unrelated, but: Is it a good idea to have UUID as primary keys? Does this have any performance implications?</p>]]></content:encoded></item><item><guid isPermaLink="true">https://oliver-epper.de/posts/automatically-stamp-an-object-with-a-unique-pin</guid><title>Automatically stamp an object with a unique pin</title><description>Stamp an object with an unique pin before saving into the database</description><link>https://oliver-epper.de/posts/automatically-stamp-an-object-with-a-unique-pin</link><pubDate>Wed, 17 Jun 2020 09:41:00 +0200</pubDate><content:encoded><![CDATA[<p>I recently started using Vapor and I love it! Using Swift on the server is sweet and Vapor has a really nice API. I wanted to do a "simple" thing that turned out to be harder than I initially thought it would be but Swift and Vapor made it actually fun to strive for a nice solution.</p><h2>What I wanted to do</h2><p>Imagine that you want to store something away but first put a little sticker on it. You have a box full of things to store, a sheet of stickers and the cabinet where you want to put the things. So:</p><pre><code><div class="highlight"><span></span><span class="n">take_a_thing</span>
<span class="n">take_a_sticker</span>
<span class="n">put_sticker_on_thing</span>
<span class="n">put_thing_in_cabinet</span>
</div></code></pre><p>Easy, isn't it?</p><p>The <code>take_a_sticker</code> part can be tricky. What if you have someone that helps you and you both grab the same sticker? Clearly you want to SELECT and DELETE the sticker (from a database) in an atomic operation.</p><h2>How to implement the ModelMiddleware?</h2><p>With Vapor you can register a <code>ModelMiddleware</code> that you can use to provide lifecycle functions for your model. Let's say you want to hook into the create process:</p><pre><code><div class="highlight"><span></span><span class="kd">struct</span> <span class="nc">ThingMiddleware</span><span class="p">:</span> <span class="n">ModelMiddleware</span> <span class="p">{</span>
    <span class="kd">func</span> <span class="nf">create</span><span class="p">(</span><span class="n">model</span><span class="p">:</span> <span class="n">Thing</span><span class="p">,</span> <span class="n">on</span> <span class="n">db</span><span class="p">:</span> <span class="n">Database</span><span class="p">,</span> <span class="n">next</span><span class="p">:</span> <span class="n">AnyModelResponder</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="n">EventLoopFuture</span><span class="p">&lt;</span><span class="nb">Void</span><span class="p">&gt;</span> <span class="p">{</span>
        <span class="bp">print</span><span class="p">(</span><span class="s">&quot;This will happen before the create&quot;</span><span class="p">)</span>
        <span class="n">next</span><span class="p">.</span><span class="n">create</span><span class="p">(</span><span class="n">model</span><span class="p">,</span> <span class="n">on</span><span class="p">:</span> <span class="n">db</span><span class="p">).</span><span class="bp">map</span> <span class="p">{</span>
            <span class="bp">print</span><span class="p">(</span><span class="s">&quot;This will happen after the create&quot;</span><span class="p">)</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</div></code></pre><p>Isn't it cool how Swift infers the type for the ThingMiddleware through the create functions model parameter? It doesn't require you to write:</p><pre><code><div class="highlight"><span></span><span class="kd">struct</span> <span class="nc">ThingMiddleware</span><span class="p">:</span> <span class="n">ModelMiddleware</span> <span class="p">{</span>
    <span class="kd">typealias</span> <span class="n">model</span> <span class="p">=</span> <span class="n">Thing</span>

    <span class="kd">func</span> <span class="nf">create</span><span class="p">(</span><span class="n">model</span><span class="p">:</span> <span class="n">Model</span><span class="p">,</span> <span class="n">on</span> <span class="n">db</span><span class="p">:</span> <span class="n">Database</span><span class="p">,</span> <span class="n">next</span><span class="p">:</span> <span class="n">AnyModelResponder</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="n">EventLoopFuture</span><span class="p">&lt;</span><span class="nb">Void</span><span class="p">&gt;</span> <span class="p">{</span>
        <span class="c1">// ...</span>
    <span class="p">}</span>
<span class="p">}</span>
</div></code></pre><p>So we're handling with Futures here.</p><p>Let's try to express the pseudocode from above. What about this:</p><pre><code><div class="highlight"><span></span><span class="c1">// ATTENTION: THIS DOES NOT WORK!</span>
<span class="kd">struct</span> <span class="nc">PinErrror</span><span class="p">:</span> <span class="n">Error</span> <span class="p">{</span> <span class="p">}</span>

<span class="kd">struct</span> <span class="nc">ClientConfigMiddleware</span><span class="p">:</span> <span class="n">ModelMiddleware</span> <span class="p">{</span>
    <span class="kd">func</span> <span class="nf">create</span><span class="p">(</span><span class="n">model</span><span class="p">:</span> <span class="n">ClientConfig</span><span class="p">,</span> <span class="n">on</span> <span class="n">db</span><span class="p">:</span> <span class="n">Database</span><span class="p">,</span> <span class="n">next</span><span class="p">:</span> <span class="n">AnyModelResponder</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="n">EventLoopFuture</span><span class="p">&lt;</span><span class="nb">Void</span><span class="p">&gt;</span> <span class="p">{</span>
        <span class="k">return</span> <span class="kc">self</span><span class="p">.</span><span class="n">getPin</span><span class="p">(</span><span class="n">from</span><span class="p">:</span> <span class="n">db</span><span class="p">).</span><span class="n">flatMap</span> <span class="p">{</span> <span class="n">pin</span> <span class="k">in</span>
            <span class="n">model</span><span class="p">.</span><span class="n">pin</span> <span class="p">=</span> <span class="n">pin</span>
            <span class="k">return</span> <span class="n">next</span><span class="p">.</span><span class="n">create</span><span class="p">(</span><span class="n">model</span><span class="p">,</span> <span class="n">on</span><span class="p">:</span> <span class="n">db</span><span class="p">)</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="kd">private</span> <span class="kd">func</span> <span class="nf">getPin</span><span class="p">(</span><span class="n">from</span> <span class="n">db</span><span class="p">:</span> <span class="n">Database</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="n">EventLoopFuture</span><span class="p">&lt;</span><span class="nb">Int</span><span class="p">&gt;</span> <span class="p">{</span>
        <span class="k">guard</span> <span class="kd">let</span> <span class="nv">sql</span> <span class="p">=</span> <span class="n">db</span> <span class="k">as</span><span class="p">?</span> <span class="n">SQLDatabase</span> <span class="k">else</span> <span class="p">{</span>
            <span class="bp">fatalError</span><span class="p">()</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="n">sql</span><span class="p">.</span><span class="n">raw</span><span class="p">(</span><span class="s">&quot;SELECT * FROM pins LIMIT 1&quot;</span><span class="p">).</span><span class="bp">first</span><span class="p">().</span><span class="n">flatMapThrowing</span> <span class="p">{</span> <span class="n">row</span> <span class="k">in</span>
            <span class="k">if</span> <span class="kd">let</span> <span class="nv">pin</span> <span class="p">=</span> <span class="k">try</span><span class="p">?</span> <span class="n">row</span><span class="p">?.</span><span class="n">decode</span><span class="p">(</span><span class="n">column</span><span class="p">:</span> <span class="s">&quot;pin&quot;</span><span class="p">,</span> <span class="k">as</span><span class="p">:</span> <span class="nb">Int</span><span class="p">.</span><span class="kc">self</span><span class="p">)</span> <span class="p">{</span>
                <span class="kc">_</span> <span class="p">=</span> <span class="n">sql</span><span class="p">.</span><span class="n">raw</span><span class="p">(</span><span class="s">&quot;DELETE FROM pins WHERE pin=&#39;</span><span class="si">\(</span><span class="nb">String</span><span class="si">(</span><span class="n">pin</span><span class="si">))</span><span class="s">&#39;&quot;</span><span class="p">).</span><span class="n">run</span><span class="p">()</span>
                <span class="k">return</span> <span class="n">pin</span>
            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                <span class="k">throw</span> <span class="n">PinErrror</span><span class="p">()</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</div></code></pre><p>The logic basically says:</p><pre><code><div class="highlight"><span></span><span class="n">create</span><span class="p">:</span>
	<span class="k">return</span> <span class="n">getNextSticker</span><span class="p">.</span><span class="n">if_ok</span>
		<span class="n">put_sticker_on_model</span>
		<span class="n">save_model</span>

<span class="n">getNextSticker</span><span class="p">:</span>
	<span class="k">return</span> <span class="kr">get</span> <span class="n">sticker_from_db</span><span class="p">.</span><span class="n">if_ok</span>
		<span class="n">delete_sticker_from_db</span><span class="p">.</span><span class="n">if_ok</span>
			<span class="k">return</span> <span class="n">sticker</span>
</div></code></pre><p>That should do it, right?</p><p>Well not quite. With a blocking database driver I guess that would work but what happens in Vapor is that if you create a bunch of model objects they all get the same sticker!</p><p>We need something a bit more clever. After doing a bit of research and asking around the people in the Vapor Discord Tanner the inventor of Vapor pointed me to a post on Stackoverflow that had a great idea for situation that was quite similar:</p><h2>Why not call dibs on the row, first?</h2><p>What if the code wouldn't just select (and then delete) the first entry, but mark it with something if it is not marked, yet. For example the current thread-id, a timestamp, or a uuid? Then the code can select that very entry while everyone else can continue with their own marked entries.</p><p>So here's how you can make it work in code:</p><pre><code><div class="highlight"><span></span><span class="kd">struct</span> <span class="nc">PinError</span><span class="p">:</span> <span class="n">Error</span> <span class="p">{</span> <span class="p">}</span>

<span class="kd">struct</span> <span class="nc">ClientConfigMiddleware</span><span class="p">:</span> <span class="n">ModelMiddleware</span> <span class="p">{</span>
    <span class="kd">func</span> <span class="nf">create</span><span class="p">(</span><span class="n">model</span><span class="p">:</span> <span class="n">ClientConfig</span><span class="p">,</span> <span class="n">on</span> <span class="n">db</span><span class="p">:</span> <span class="n">Database</span><span class="p">,</span> <span class="n">next</span><span class="p">:</span> <span class="n">AnyModelResponder</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="n">EventLoopFuture</span><span class="p">&lt;</span><span class="nb">Void</span><span class="p">&gt;</span> <span class="p">{</span>
        <span class="k">return</span> <span class="kc">self</span><span class="p">.</span><span class="n">getNextPin</span><span class="p">(</span><span class="n">from</span><span class="p">:</span> <span class="n">db</span><span class="p">).</span><span class="n">flatMap</span> <span class="p">{</span> <span class="n">pin</span> <span class="k">in</span>
            <span class="n">model</span><span class="p">.</span><span class="n">pin</span> <span class="p">=</span> <span class="n">pin</span>
            <span class="k">return</span> <span class="n">next</span><span class="p">.</span><span class="n">create</span><span class="p">(</span><span class="n">model</span><span class="p">,</span> <span class="n">on</span><span class="p">:</span> <span class="n">db</span><span class="p">)</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="kd">private</span> <span class="kd">func</span> <span class="nf">getNextPin</span><span class="p">(</span><span class="n">from</span> <span class="n">db</span><span class="p">:</span> <span class="n">Database</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="n">EventLoopFuture</span><span class="p">&lt;</span><span class="nb">Int</span><span class="p">&gt;</span> <span class="p">{</span>
        <span class="k">guard</span> <span class="kd">let</span> <span class="nv">sql</span> <span class="p">=</span> <span class="n">db</span> <span class="k">as</span><span class="p">?</span> <span class="n">SQLDatabase</span> <span class="k">else</span> <span class="p">{</span>
            <span class="bp">fatalError</span><span class="p">()</span>
        <span class="p">}</span>
        <span class="kd">let</span> <span class="nv">selector</span> <span class="p">=</span> <span class="n">UUID</span><span class="p">()</span>
        <span class="k">return</span> <span class="n">sql</span><span class="p">.</span><span class="n">raw</span><span class="p">(</span><span class="s">&quot;UPDATE pins SET selector=&#39;</span><span class="si">\(</span><span class="n">selector</span><span class="p">.</span><span class="n">uuidString</span><span class="si">)</span><span class="s">&#39; WHERE pin = (SELECT pin FROM pins WHERE selector IS NULL LIMIT 1)&quot;</span><span class="p">).</span><span class="n">run</span><span class="p">().</span><span class="n">flatMap</span> <span class="p">{</span>
            <span class="k">return</span> <span class="n">sql</span><span class="p">.</span><span class="n">raw</span><span class="p">(</span><span class="s">&quot;SELECT pin FROM pins WHERE selector=&#39;</span><span class="si">\(</span><span class="n">selector</span><span class="p">.</span><span class="n">uuidString</span><span class="si">)</span><span class="s">&#39;&quot;</span><span class="p">).</span><span class="bp">first</span><span class="p">().</span><span class="n">flatMapThrowing</span> <span class="p">{</span> <span class="n">row</span> <span class="k">in</span>
                <span class="k">if</span> <span class="kd">let</span> <span class="nv">pin</span> <span class="p">=</span> <span class="k">try</span><span class="p">?</span> <span class="n">row</span><span class="p">?.</span><span class="n">decode</span><span class="p">(</span><span class="n">column</span><span class="p">:</span> <span class="s">&quot;pin&quot;</span><span class="p">,</span> <span class="k">as</span><span class="p">:</span> <span class="nb">Int</span><span class="p">.</span><span class="kc">self</span><span class="p">)</span> <span class="p">{</span>
                    <span class="k">return</span> <span class="n">pin</span>
                <span class="p">}</span>
                <span class="k">throw</span> <span class="n">PinError</span><span class="p">()</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</div></code></pre><p>So now we have:</p><pre><code><div class="highlight"><span></span><span class="n">create</span><span class="p">:</span>
	<span class="k">return</span> <span class="n">getNextSticker</span><span class="p">.</span><span class="n">if_ok</span>
		<span class="n">put_sticker_on_model</span>
		<span class="n">save_model</span>

<span class="n">getNextSticker</span><span class="p">:</span>
	<span class="k">return</span> <span class="kr">get</span> <span class="n">mark_a_sticker_that_is_not_yet_marked_with_myId</span><span class="p">.</span><span class="n">if_ok</span>
		<span class="k">return</span> <span class="n">select_the_sticker_that_is_marked_with_myId</span><span class="p">.</span><span class="n">if_ok</span>
			<span class="k">return</span> <span class="n">sticker</span>
</div></code></pre><p>The pins table is a prepopulated table that has two columns. One for the actual pin and one called selector that is prepopulated with NULL. The <code>getNextPin</code> function writes a uuid that it saves in the selector column and can then read a pin by selecting the row with the matching selector. Pretty neat, isn't it</p><h2>Update</h2><p>When I test this under heavy load (&gt; 100 creations/s) I still keep getting the same pins sometimes. While this is not a problem for my use case I am still very interested in an even better solution. When I use <code>Date().timeIntervalSince1970</code> I get the same pins less frequently but I guess that's just because the operation might be slower than getting an UUID. Any ideas welcome!</p><h2>Update 2</h2><p>Here's the fix 😎 With Postgres you can tell the database to skip an entry if it cannot attain a lock immediatley! That solves it:</p><pre><code><div class="highlight"><span></span><span class="k">UPDATE</span> <span class="n">pins</span> <span class="k">SET</span> <span class="n">selector</span><span class="o">=</span><span class="n">uuid_string</span> <span class="k">WHERE</span> <span class="n">pin</span> <span class="o">=</span> <span class="p">(</span><span class="k">SELECT</span> <span class="n">pin</span> <span class="k">FROM</span> <span class="n">pins</span> <span class="k">WHERE</span> <span class="n">selector</span> <span class="k">IS</span> <span class="k">NULL</span> <span class="k">LIMIT</span> <span class="mi">1</span> <span class="k">FOR</span> <span class="k">UPDATE</span> <span class="n">SKIP</span> <span class="n">LOCKED</span><span class="p">)</span> <span class="n">RETURNING</span> <span class="n">pin</span><span class="p">;</span>
</div></code></pre><p>In code:</p><pre><code><div class="highlight"><span></span><span class="kd">private</span> <span class="kd">func</span> <span class="nf">getNextPin</span><span class="p">(</span><span class="n">from</span> <span class="n">db</span><span class="p">:</span> <span class="n">Database</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="n">EventLoopFuture</span><span class="p">&lt;</span><span class="nb">Int</span><span class="p">&gt;</span> <span class="p">{</span>
        <span class="k">guard</span> <span class="kd">let</span> <span class="nv">sql</span> <span class="p">=</span> <span class="n">db</span> <span class="k">as</span><span class="p">?</span> <span class="n">SQLDatabase</span> <span class="k">else</span> <span class="p">{</span>
            <span class="bp">fatalError</span><span class="p">()</span>
        <span class="p">}</span>
        <span class="kd">let</span> <span class="nv">selector</span> <span class="p">=</span> <span class="n">UUID</span><span class="p">()</span>
        <span class="k">return</span> <span class="n">sql</span><span class="p">.</span><span class="n">raw</span><span class="p">(</span><span class="s">&quot;UPDATE pins SET selector=&#39;</span><span class="si">\(</span><span class="n">selector</span><span class="p">.</span><span class="n">uuidString</span><span class="si">)</span><span class="s">&#39; WHERE pin = (SELECT pin FROM pins WHERE selector IS NULL LIMIT 1 FOR UPDATE SKIP LOCKED) RETURNING pin&quot;</span><span class="p">).</span><span class="n">run</span><span class="p">().</span><span class="n">flatMap</span> <span class="p">{</span>
            <span class="k">return</span> <span class="n">sql</span><span class="p">.</span><span class="n">raw</span><span class="p">(</span><span class="s">&quot;SELECT pin FROM pins WHERE selector=&#39;</span><span class="si">\(</span><span class="n">selector</span><span class="p">.</span><span class="n">uuidString</span><span class="si">)</span><span class="s">&#39;&quot;</span><span class="p">).</span><span class="bp">first</span><span class="p">().</span><span class="n">flatMapThrowing</span> <span class="p">{</span> <span class="n">row</span> <span class="k">in</span>
                <span class="k">if</span> <span class="kd">let</span> <span class="nv">pin</span> <span class="p">=</span> <span class="k">try</span><span class="p">?</span> <span class="n">row</span><span class="p">?.</span><span class="n">decode</span><span class="p">(</span><span class="n">column</span><span class="p">:</span> <span class="s">&quot;pin&quot;</span><span class="p">,</span> <span class="k">as</span><span class="p">:</span> <span class="nb">Int</span><span class="p">.</span><span class="kc">self</span><span class="p">)</span> <span class="p">{</span>
                    <span class="k">return</span> <span class="n">pin</span>
                <span class="p">}</span>
                <span class="k">throw</span> <span class="n">PinError</span><span class="p">()</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
</div></code></pre><p>Oh! And as an added bonus object creation under heavy load get's around 30% quicker. ⚡️</p>]]></content:encoded></item><item><guid isPermaLink="true">https://oliver-epper.de/posts/use-keychain-to-securely-save-data</guid><title>Use Keychain to securely save data</title><description>Save an item in keychain without a third party framework</description><link>https://oliver-epper.de/posts/use-keychain-to-securely-save-data</link><pubDate>Sat, 23 May 2020 09:41:00 +0200</pubDate><content:encoded><![CDATA[<p>If you need to save sensible information like a user password in an iOS app you should use Keychain instead of UserDefaults. While the UserDefaults-API is user-friendly and straight forward the Keychain-API is not. It took me a while to find some information because nearly everyone suggested to use a third-party-framework and I ended up with downloading <a href="https://github.com/jrendel/SwiftKeychainWrapper">SwiftKeyChainWrapper</a>, too.</p><p>But still I want to be able to save data into Keychain without a third-party solution. So I used the library as documentation.</p><h2>Save a string to the Keychain</h2><pre><code><div class="highlight"><span></span><span class="kd">import</span> <span class="nc">Foundation</span>

<span class="kd">struct</span> <span class="nc">KeyChain</span> <span class="p">{</span>
    <span class="kd">static</span> <span class="kd">private</span> <span class="kd">func</span> <span class="nf">getQueryDict</span><span class="p">()</span> <span class="p">-&gt;</span> <span class="p">[</span><span class="nb">String</span><span class="p">:</span><span class="nb">Any</span><span class="p">]</span> <span class="p">{</span>
        <span class="kd">var</span> <span class="nv">keyChainQueryDict</span><span class="p">:</span> <span class="p">[</span><span class="nb">String</span><span class="p">:</span><span class="nb">Any</span><span class="p">]</span> <span class="p">=</span> <span class="p">[</span><span class="n">kSecClass</span> <span class="k">as</span> <span class="nb">String</span><span class="p">:</span><span class="n">kSecClassGenericPassword</span><span class="p">]</span>
        <span class="n">keyChainQueryDict</span><span class="p">[</span><span class="n">kSecAttrService</span> <span class="k">as</span> <span class="nb">String</span><span class="p">]</span> <span class="p">=</span> <span class="s">&quot;MyService&quot;</span>
        <span class="k">return</span> <span class="n">keyChainQueryDict</span>
    <span class="p">}</span>

    <span class="kd">static</span> <span class="kd">func</span> <span class="nf">save</span><span class="p">(</span><span class="kc">_</span> <span class="n">message</span><span class="p">:</span> <span class="nb">String</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="kd">let</span> <span class="nv">data</span> <span class="p">=</span> <span class="n">message</span><span class="p">.</span><span class="n">data</span><span class="p">(</span><span class="n">using</span><span class="p">:</span> <span class="p">.</span><span class="n">utf8</span><span class="p">)</span> <span class="p">{</span>
            <span class="kd">var</span> <span class="nv">keyChainQueryDict</span> <span class="p">=</span> <span class="n">getQueryDict</span><span class="p">()</span>

            <span class="n">keyChainQueryDict</span><span class="p">[</span><span class="n">kSecValueData</span> <span class="k">as</span> <span class="nb">String</span><span class="p">]</span> <span class="p">=</span> <span class="n">data</span>
            <span class="n">keyChainQueryDict</span><span class="p">[</span><span class="n">kSecAttrAccessible</span> <span class="k">as</span> <span class="nb">String</span><span class="p">]</span> <span class="p">=</span> <span class="n">kSecAttrAccessibleWhenUnlocked</span>

            <span class="kd">let</span> <span class="nv">status</span><span class="p">:</span> <span class="n">OSStatus</span> <span class="p">=</span> <span class="n">SecItemAdd</span><span class="p">(</span><span class="n">keyChainQueryDict</span> <span class="k">as</span> <span class="n">CFDictionary</span><span class="p">,</span> <span class="kc">nil</span><span class="p">)</span>

            <span class="k">if</span> <span class="n">status</span> <span class="p">==</span> <span class="n">errSecSuccess</span> <span class="p">{</span>
                <span class="bp">print</span><span class="p">(</span><span class="s">&quot;Message saved&quot;</span><span class="p">)</span>
            <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="n">status</span> <span class="p">==</span> <span class="n">errSecDuplicateItem</span> <span class="p">{</span>
                <span class="n">update</span><span class="p">(</span><span class="n">message</span><span class="p">)</span>
            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                <span class="bp">print</span><span class="p">(</span><span class="n">SecCopyErrorMessageString</span><span class="p">(</span><span class="n">status</span><span class="p">,</span> <span class="kc">nil</span><span class="p">)</span> <span class="p">??</span> <span class="s">&quot;Unknown error&quot;</span><span class="p">)</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</div></code></pre><p>You add an Item to the KeyChain with the function <code>SecItemAdd(_ attributes: CFDictionary, _ result: UnsafeMutablePointer&lt;CFTypeRef?&gt;?) -&gt; OSStatus</code>.</p><p>So you pass in a dictionary and receive a result code. If the result code equals <code>errSecSuccess</code> you're golden! <code>errSecDuplicateItem</code> tells you that an entry for the key you provided already exists.</p><p>So how do you pass in the key and the data? It's all in the query dictionary. The first entry <code>[kSecClass as String:kSecClassGenericPassword]</code> tells the system that you want to save a generic password. Other options would be a <code>kSecClassInternetPassword</code> or a <code>kSecClassIdentity</code> and there're even more. The other required keys for the dictionary depend on the type you choose here.</p><p>For the generic password I declared a service specifier <code>kSecAttrService</code> with the value <code>"MyService"</code>. By the way since all these keys are CFStrings you need to cast them to a Swift String.</p><p>With the key <code>kSecValueData</code> you pass in the <code>Data</code> that you want to be saved. The key <code>kSecAttrAccessible</code> is used to specify when an item can be retrieved from the secure store. In the case of <code>kSecAttrAccessibleWhenUnlocked</code> we can receive the item when the device is unlocked. Other possible values are:</p><ul><li><code>kSecAttrAccessibleAfterFirstUnlock</code> Item data can only be accessed once the device has been unlocked after a restart. This is recommended for items that need to be accesible by background applications. Items with this attribute will migrate to a new device when using encrypted backups.</li><li><code>kSecAttrAccessibleAlways</code> Item data can always be accessed regardless of the lock state of the device. This is not recommended for anything except system use. Items with this attribute will migrate to a new device when using encrypted backups.</li><li><code>kSecAttrAccessibleWhenPasscodeSetThisDeviceOnly</code> Item data can only be accessed while the device is unlocked. This is recommended for items that only need to be accessible while the application is in the foreground and requires a passcode to be set on the device. Items with this attribute will never migrate to a new device, so after a backup is restored to a new device, these items will be missing. This attribute will not be available on devices without a passcode. Disabling the device passcode will cause all previously protected items to be deleted.</li><li><code>kSecAttrAccessibleWhenUnlockedThisDeviceOnly</code> Item data can only be accessed while the device is unlocked. This is recommended for items that only need be accessible while the application is in the foreground. Items with this attribute will never migrate to a new device, so after a backup is restored to a new device, these items will be missing.</li><li><code>kSecAttrAccessibleAfterFirstUnlockThisDeviceOnly</code> Item data can only be accessed once the device has been unlocked after a restart. This is recommended for items that need to be accessible by background applications. Items with this attribute will never migrate to a new device, so after a backup is restored to a new device these items will be missing.</li><li><code>kSecAttrAccessibleAlwaysThisDeviceOnly</code> Item data can always be accessed regardless of the lock state of the device. This option is not recommended for anything except system use. Items with this attribute will never migrate to a new device, so after a backup is restored to a new device, these items will be missing.</li></ul><p>So after the dictionary is properly configured we can call <code>SecItemAdd</code> and by this save an item in the Keychain. That's all there is to it 😎</p><h2>Update an item in the Keychain</h2><p>If the key for your item already exists you'll receive <code>errSecDuplicateItem</code> as the result of callling <code>SecItemAdd</code>. You can update your item like this:</p><pre><code><div class="highlight"><span></span>    <span class="kd">static</span> <span class="kd">func</span> <span class="nf">update</span><span class="p">(</span><span class="kc">_</span> <span class="n">message</span><span class="p">:</span> <span class="nb">String</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="kd">let</span> <span class="nv">data</span> <span class="p">=</span> <span class="n">message</span><span class="p">.</span><span class="n">data</span><span class="p">(</span><span class="n">using</span><span class="p">:</span> <span class="p">.</span><span class="n">utf8</span><span class="p">)</span> <span class="p">{</span>
            <span class="kd">let</span> <span class="nv">keyChainQueryDict</span> <span class="p">=</span> <span class="n">getQueryDict</span><span class="p">()</span>

            <span class="kd">let</span> <span class="nv">updateDict</span> <span class="p">=</span> <span class="p">[</span><span class="n">kSecValueData</span><span class="p">:</span><span class="n">data</span><span class="p">]</span>

            <span class="kd">let</span> <span class="nv">status</span><span class="p">:</span> <span class="n">OSStatus</span> <span class="p">=</span> <span class="n">SecItemUpdate</span><span class="p">(</span><span class="n">keyChainQueryDict</span> <span class="k">as</span> <span class="n">CFDictionary</span><span class="p">,</span> <span class="n">updateDict</span> <span class="k">as</span> <span class="n">CFDictionary</span><span class="p">)</span>

            <span class="k">if</span> <span class="n">status</span> <span class="p">==</span> <span class="n">errSecSuccess</span> <span class="p">{</span>
                <span class="bp">print</span><span class="p">(</span><span class="s">&quot;Entry updated.&quot;</span><span class="p">)</span>
            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                <span class="bp">print</span><span class="p">(</span><span class="n">SecCopyErrorMessageString</span><span class="p">(</span><span class="n">status</span><span class="p">,</span> <span class="kc">nil</span><span class="p">)</span> <span class="p">??</span> <span class="s">&quot;Unknown error&quot;</span><span class="p">)</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
</div></code></pre><p>So now we need a second dictionary since calling <code>SecItemUpdate</code>requires us to provide two dictionaries as parameter. The second just contains the data that we want to update for the key <code>kSecValueData</code>.</p><h2>Reading an item from the Keychain</h2><pre><code><div class="highlight"><span></span><span class="kd">static</span> <span class="kd">func</span> <span class="nf">load</span><span class="p">()</span> <span class="p">-&gt;</span> <span class="nb">String</span><span class="p">?</span> <span class="p">{</span>
        <span class="kd">var</span> <span class="nv">keyChainQueryDict</span> <span class="p">=</span> <span class="n">getQueryDict</span><span class="p">()</span>

        <span class="n">keyChainQueryDict</span><span class="p">[</span><span class="n">kSecMatchLimit</span> <span class="k">as</span> <span class="nb">String</span><span class="p">]</span> <span class="p">=</span> <span class="n">kSecMatchLimitOne</span>
        <span class="n">keyChainQueryDict</span><span class="p">[</span><span class="n">kSecReturnData</span> <span class="k">as</span> <span class="nb">String</span><span class="p">]</span> <span class="p">=</span> <span class="n">kCFBooleanTrue</span>

        <span class="kd">var</span> <span class="nv">result</span><span class="p">:</span> <span class="nb">AnyObject</span><span class="p">?</span>
        <span class="kd">let</span> <span class="nv">status</span> <span class="p">=</span> <span class="n">SecItemCopyMatching</span><span class="p">(</span><span class="n">keyChainQueryDict</span> <span class="k">as</span> <span class="n">CFDictionary</span><span class="p">,</span> <span class="p">&amp;</span><span class="n">result</span><span class="p">)</span>

        <span class="k">if</span> <span class="n">status</span> <span class="p">==</span> <span class="n">noErr</span> <span class="p">{</span>
            <span class="k">if</span> <span class="kd">let</span> <span class="nv">data</span> <span class="p">=</span> <span class="n">result</span> <span class="k">as</span><span class="p">?</span> <span class="n">Data</span> <span class="p">{</span>
                <span class="k">return</span> <span class="nb">String</span><span class="p">(</span><span class="n">data</span><span class="p">:</span> <span class="n">data</span><span class="p">,</span> <span class="n">encoding</span><span class="p">:</span> <span class="p">.</span><span class="n">utf8</span><span class="p">)</span>
            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                <span class="bp">print</span><span class="p">(</span><span class="s">&quot;Could not retrieve data&quot;</span><span class="p">)</span>
            <span class="p">}</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="bp">print</span><span class="p">(</span><span class="n">SecCopyErrorMessageString</span><span class="p">(</span><span class="n">status</span><span class="p">,</span> <span class="kc">nil</span><span class="p">)</span> <span class="p">??</span> <span class="s">&quot;Unknown error&quot;</span><span class="p">)</span>
        <span class="p">}</span>

        <span class="k">return</span> <span class="kc">nil</span>
    <span class="p">}</span>
</div></code></pre><p>The function <code>SecItemCopyMatching(_ query: CFDictionary, _ result: UnsafeMutablePointer&lt;CFTypeRef?&gt;?) -&gt; OSStatus</code> copies an Item into its second parameter if the item matches the query dictionary passed in the first parameter. The query dictionary is configured to return only one item and return it as <code>Data</code>. This is configured with the keys <code>kSecMatchLimit</code> and <code>kSecReturnData</code>. If the operations succeeded you can cast the result object to data and build the String you originally saved from it.</p><p>So after looking into this I would suggest you simply use <a href="https://github.com/jrendel/SwiftKeychainWrapper">SwiftKeychainWrapper</a> like everyone else suggests 😃</p><h2>Update: A stripped down version of SwiftKeychainWrapper (only Strings)</h2><pre><code><div class="highlight"><span></span><span class="kd">import</span> <span class="nc">Foundation</span>

<span class="c1">// This is a stripped down version of SwiftKeychainWraper</span>
<span class="c1">// https://github.com/jrendel/SwiftKeychainWrapper</span>
<span class="kd">class</span> <span class="nc">KeychainWrapper</span> <span class="p">{</span>
    <span class="kd">static</span> <span class="kd">let</span> <span class="nv">standard</span> <span class="p">=</span> <span class="n">KeychainWrapper</span><span class="p">()</span>

    <span class="kd">private</span> <span class="kd">init</span><span class="p">()</span> <span class="p">{}</span>

    <span class="kd">func</span> <span class="nf">string</span><span class="p">(</span><span class="n">forKey</span> <span class="n">key</span><span class="p">:</span> <span class="nb">String</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="nb">String</span><span class="p">?</span> <span class="p">{</span>
        <span class="k">guard</span> <span class="kd">let</span> <span class="nv">keychainData</span> <span class="p">=</span> <span class="n">data</span><span class="p">(</span><span class="n">forKey</span><span class="p">:</span> <span class="n">key</span><span class="p">)</span> <span class="k">else</span> <span class="p">{</span>
            <span class="k">return</span> <span class="kc">nil</span>
        <span class="p">}</span>

        <span class="k">return</span> <span class="nb">String</span><span class="p">(</span><span class="n">data</span><span class="p">:</span> <span class="n">keychainData</span><span class="p">,</span> <span class="n">encoding</span><span class="p">:</span> <span class="p">.</span><span class="n">utf8</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="kd">func</span> <span class="nf">set</span><span class="p">(</span><span class="kc">_</span> <span class="n">value</span><span class="p">:</span> <span class="nb">String</span><span class="p">,</span> <span class="n">forKey</span> <span class="n">key</span><span class="p">:</span> <span class="nb">String</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="kd">let</span> <span class="nv">data</span> <span class="p">=</span> <span class="n">value</span><span class="p">.</span><span class="n">data</span><span class="p">(</span><span class="n">using</span><span class="p">:</span> <span class="p">.</span><span class="n">utf8</span><span class="p">)</span> <span class="p">{</span>
            <span class="kr">set</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">forKey</span><span class="p">:</span> <span class="n">key</span><span class="p">)</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="kd">func</span> <span class="nf">removeObject</span><span class="p">(</span><span class="n">forKey</span> <span class="n">key</span><span class="p">:</span> <span class="nb">String</span><span class="p">)</span> <span class="p">{</span>
        <span class="kd">let</span> <span class="nv">keychainQueryDictionary</span> <span class="p">=</span> <span class="n">setupKeychainQueryDictionary</span><span class="p">(</span><span class="n">forKey</span><span class="p">:</span> <span class="n">key</span><span class="p">)</span>
        <span class="n">SecItemDelete</span><span class="p">(</span><span class="n">keychainQueryDictionary</span> <span class="k">as</span> <span class="n">CFDictionary</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="kd">private</span> <span class="kd">func</span> <span class="nf">data</span><span class="p">(</span><span class="n">forKey</span> <span class="n">key</span><span class="p">:</span> <span class="nb">String</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="n">Data</span><span class="p">?</span> <span class="p">{</span>
        <span class="kd">var</span> <span class="nv">keychainQueryDictionary</span> <span class="p">=</span> <span class="n">setupKeychainQueryDictionary</span><span class="p">(</span><span class="n">forKey</span><span class="p">:</span> <span class="n">key</span><span class="p">)</span>
        <span class="n">keychainQueryDictionary</span><span class="p">[</span><span class="n">kSecMatchLimit</span> <span class="k">as</span> <span class="nb">String</span><span class="p">]</span> <span class="p">=</span> <span class="n">kSecMatchLimitOne</span>
        <span class="n">keychainQueryDictionary</span><span class="p">[</span><span class="n">kSecReturnData</span> <span class="k">as</span> <span class="nb">String</span><span class="p">]</span> <span class="p">=</span> <span class="n">kCFBooleanTrue</span>

        <span class="kd">var</span> <span class="nv">result</span><span class="p">:</span> <span class="nb">AnyObject</span><span class="p">?</span>
        <span class="kd">let</span> <span class="nv">status</span> <span class="p">=</span> <span class="n">SecItemCopyMatching</span><span class="p">(</span><span class="n">keychainQueryDictionary</span> <span class="k">as</span> <span class="n">CFDictionary</span><span class="p">,</span> <span class="p">&amp;</span><span class="n">result</span><span class="p">)</span>

        <span class="k">return</span> <span class="n">status</span> <span class="p">==</span> <span class="n">noErr</span> <span class="p">?</span> <span class="n">result</span> <span class="k">as</span><span class="p">?</span> <span class="n">Data</span> <span class="p">:</span> <span class="kc">nil</span>
    <span class="p">}</span>

    <span class="kd">private</span> <span class="kd">func</span> <span class="nf">set</span><span class="p">(</span><span class="kc">_</span> <span class="n">data</span><span class="p">:</span> <span class="n">Data</span><span class="p">,</span> <span class="n">forKey</span> <span class="n">key</span><span class="p">:</span> <span class="nb">String</span><span class="p">)</span> <span class="p">{</span>
        <span class="kd">var</span> <span class="nv">keychainQuerDictionary</span> <span class="p">=</span> <span class="n">setupKeychainQueryDictionary</span><span class="p">(</span><span class="n">forKey</span><span class="p">:</span> <span class="n">key</span><span class="p">)</span>
        <span class="n">keychainQuerDictionary</span><span class="p">[</span><span class="n">kSecValueData</span> <span class="k">as</span> <span class="nb">String</span><span class="p">]</span> <span class="p">=</span> <span class="n">data</span>

        <span class="kd">let</span> <span class="nv">status</span> <span class="p">=</span> <span class="n">SecItemAdd</span><span class="p">(</span><span class="n">keychainQuerDictionary</span> <span class="k">as</span> <span class="n">CFDictionary</span><span class="p">,</span> <span class="kc">nil</span><span class="p">)</span>

        <span class="k">if</span> <span class="n">status</span> <span class="p">==</span> <span class="n">errSecDuplicateItem</span> <span class="p">{</span>
            <span class="n">update</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">forKey</span><span class="p">:</span> <span class="n">key</span><span class="p">)</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="kd">private</span> <span class="kd">func</span> <span class="nf">update</span><span class="p">(</span><span class="kc">_</span> <span class="n">data</span><span class="p">:</span> <span class="n">Data</span><span class="p">,</span> <span class="n">forKey</span> <span class="n">key</span><span class="p">:</span> <span class="nb">String</span><span class="p">)</span> <span class="p">{</span>
        <span class="kd">let</span> <span class="nv">keychainQueryDictionary</span> <span class="p">=</span> <span class="n">setupKeychainQueryDictionary</span><span class="p">(</span><span class="n">forKey</span><span class="p">:</span> <span class="n">key</span><span class="p">)</span>
        <span class="kd">let</span> <span class="nv">updateDictionary</span> <span class="p">=</span> <span class="p">[</span><span class="n">kSecValueData</span><span class="p">:</span><span class="n">data</span><span class="p">]</span>

        <span class="n">SecItemUpdate</span><span class="p">(</span><span class="n">keychainQueryDictionary</span> <span class="k">as</span> <span class="n">CFDictionary</span><span class="p">,</span> <span class="n">updateDictionary</span> <span class="k">as</span> <span class="n">CFDictionary</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="kd">private</span> <span class="kd">func</span> <span class="nf">setupKeychainQueryDictionary</span><span class="p">(</span><span class="n">forKey</span> <span class="n">key</span><span class="p">:</span> <span class="nb">String</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="p">[</span><span class="nb">String</span><span class="p">:</span><span class="nb">Any</span><span class="p">]</span> <span class="p">{</span>
        <span class="kd">var</span> <span class="nv">keychainQueryDictionary</span><span class="p">:</span> <span class="p">[</span><span class="nb">String</span><span class="p">:</span><span class="nb">Any</span><span class="p">]</span> <span class="p">=</span> <span class="p">[</span><span class="n">kSecClass</span> <span class="k">as</span> <span class="nb">String</span><span class="p">:</span><span class="n">kSecClassGenericPassword</span><span class="p">]</span>
        <span class="n">keychainQueryDictionary</span><span class="p">[</span><span class="n">kSecAttrService</span> <span class="k">as</span> <span class="nb">String</span><span class="p">]</span> <span class="p">=</span> <span class="n">Bundle</span><span class="p">.</span><span class="n">main</span><span class="p">.</span><span class="n">bundleIdentifier</span><span class="p">!</span>

        <span class="k">if</span> <span class="kd">let</span> <span class="nv">encodedKey</span> <span class="p">=</span> <span class="n">key</span><span class="p">.</span><span class="n">data</span><span class="p">(</span><span class="n">using</span><span class="p">:</span> <span class="p">.</span><span class="n">utf8</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">keychainQueryDictionary</span><span class="p">[</span><span class="n">kSecAttrAccount</span> <span class="k">as</span> <span class="nb">String</span><span class="p">]</span> <span class="p">=</span> <span class="n">encodedKey</span>
        <span class="p">}</span>

        <span class="k">return</span> <span class="n">keychainQueryDictionary</span>
    <span class="p">}</span>
<span class="p">}</span>
</div></code></pre>]]></content:encoded></item><item><guid isPermaLink="true">https://oliver-epper.de/posts/how-to-create-a-self-sizing-gauge-componen-in-swiftui</guid><title>How to create a self-sizing gauge component in SwiftUI</title><description>How to create a self-sizing gauge component in swiftui</description><link>https://oliver-epper.de/posts/how-to-create-a-self-sizing-gauge-componen-in-swiftui</link><pubDate>Fri, 8 May 2020 09:41:00 +0200</pubDate><content:encoded><![CDATA[<p>SwiftUI is really great and building custom UI is actually pretty straight forward. Let's use <em>function builders</em> and <em>preference keys</em> to build a component that looks like this:</p><figure>
    <picture>
        <source srcset="/images/Gauges-dark.png" media="(prefers-color-scheme: dark)">
        <img src="https://oliver-epper.de/images/Gauges.png" alt="gauges">
    </picture>
</figure><p>The gauge features a center view that the user can either provide or the gauge will automatically show a text presenting it's value. So once we have our gauge component ready it can be used like this:</p><pre><code><div class="highlight"><span></span><span class="c1">// Simplest use possible, the Gauge will construct a centerView that shows: &#39;\(value) %&#39;.</span>
<span class="c1">// To prevent constant resizings when passing in other values the centerView width is calculated</span>
<span class="c1">// from the string: &#39;100 %&#39;</span>
<span class="n">Gauge</span><span class="p">(</span><span class="n">value</span><span class="p">:</span> <span class="n">value</span><span class="p">)</span>

<span class="c1">// provide your own centerView.</span>
<span class="n">Gauge</span><span class="p">(</span><span class="n">value</span><span class="p">:</span> <span class="n">value</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">Text</span><span class="p">(</span><span class="s">&quot;This is a fixed text&quot;</span><span class="p">)</span>
<span class="p">}</span>

<span class="c1">// use an image</span>
<span class="n">Gauge</span><span class="p">(</span><span class="n">value</span><span class="p">:</span> <span class="n">value</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">Image</span><span class="p">(</span><span class="n">systemName</span><span class="p">:</span> <span class="s">&quot;headphones&quot;</span><span class="p">)</span>
        <span class="p">.</span><span class="n">resizable</span><span class="p">()</span>
        <span class="p">.</span><span class="n">frame</span><span class="p">(</span><span class="n">width</span><span class="p">:</span> <span class="mi">55</span><span class="p">,</span> <span class="n">height</span><span class="p">:</span> <span class="mi">55</span><span class="p">)</span>
<span class="p">}</span>
</div></code></pre><p>The gauge will automatically adjust its size depending on the size of the center view.</p><h2>How is this built?</h2><pre><code><div class="highlight"><span></span><span class="kd">import</span> <span class="nc">SwiftUI</span>

<span class="kd">public</span> <span class="kd">struct</span> <span class="nc">Gauge</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;:</span> <span class="n">View</span> <span class="k">where</span> <span class="n">T</span><span class="p">:</span> <span class="n">View</span> <span class="p">{</span>
    <span class="kd">let</span> <span class="nv">centerView</span><span class="p">:</span> <span class="n">T</span>
    <span class="kd">let</span> <span class="nv">value</span><span class="p">:</span> <span class="nb">Double</span>
    
    <span class="kd">let</span> <span class="nv">thickness</span><span class="p">:</span> <span class="n">CGFloat</span> <span class="p">=</span> <span class="mi">5</span>
    <span class="kd">let</span> <span class="nv">scale</span><span class="p">:</span> <span class="n">CGFloat</span> <span class="p">=</span> <span class="mf">1.777</span>
    
    <span class="kd">let</span> <span class="nv">gradient</span> <span class="p">=</span> <span class="n">AngularGradient</span><span class="p">(</span>
        <span class="n">gradient</span><span class="p">:</span> <span class="n">Gradient</span><span class="p">(</span>
            <span class="n">colors</span><span class="p">:</span> <span class="p">[</span>
                <span class="p">.</span><span class="n">red</span><span class="p">,</span>
                <span class="p">.</span><span class="n">green</span>
            <span class="p">]</span>
        <span class="p">),</span>
        <span class="n">center</span><span class="p">:</span> <span class="p">.</span><span class="n">center</span>
    <span class="p">)</span>
    
    <span class="p">@</span><span class="n">State</span> <span class="kd">private</span> <span class="kd">var</span> <span class="nv">diameter</span><span class="p">:</span> <span class="n">CGFloat</span> <span class="p">=</span> <span class="mi">0</span>
    
    <span class="kd">public</span> <span class="kd">init</span><span class="p">(</span><span class="n">value</span><span class="p">:</span> <span class="nb">Double</span><span class="p">,</span> <span class="p">@</span><span class="n">GaugeBuilder</span> <span class="n">builder</span><span class="p">:</span> <span class="p">()</span> <span class="p">-&gt;</span> <span class="n">T</span><span class="p">)</span> <span class="p">{</span>
        <span class="kc">self</span><span class="p">.</span><span class="n">value</span> <span class="p">=</span> <span class="n">value</span>
        <span class="kc">self</span><span class="p">.</span><span class="n">centerView</span> <span class="p">=</span> <span class="n">builder</span><span class="p">()</span>
    <span class="p">}</span>
    
    <span class="kd">public</span> <span class="kd">var</span> <span class="nv">body</span><span class="p">:</span> <span class="n">some</span> <span class="n">View</span> <span class="p">{</span>
        <span class="n">ZStack</span> <span class="p">{</span>
            <span class="n">centerView</span><span class="p">.</span><span class="n">background</span><span class="p">(</span>
                <span class="n">GeometryReader</span> <span class="p">{</span> <span class="n">proxy</span> <span class="k">in</span>
                    <span class="n">Color</span><span class="p">.</span><span class="n">clear</span><span class="p">.</span><span class="n">preference</span><span class="p">(</span><span class="n">key</span><span class="p">:</span> <span class="n">GaugeWidthPreferenceKey</span><span class="p">.</span><span class="kc">self</span><span class="p">,</span> <span class="n">value</span><span class="p">:</span> <span class="n">proxy</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">width</span><span class="p">)</span>
                <span class="p">}</span>
            <span class="p">)</span>
            <span class="n">Group</span> <span class="p">{</span>
                <span class="n">Circle</span><span class="p">()</span>
                    <span class="p">.</span><span class="n">stroke</span><span class="p">(</span><span class="n">Color</span><span class="p">.</span><span class="n">primary</span><span class="p">.</span><span class="n">opacity</span><span class="p">(</span><span class="mf">0.2</span><span class="p">),</span> <span class="n">style</span><span class="p">:</span> <span class="p">.</span><span class="kd">init</span><span class="p">(</span><span class="n">lineWidth</span><span class="p">:</span> <span class="n">thickness</span><span class="o">/</span><span class="n">scale</span><span class="p">,</span> <span class="n">dash</span><span class="p">:</span> <span class="p">[</span><span class="mi">5</span><span class="p">]))</span>
                <span class="n">Circle</span><span class="p">()</span>
                    <span class="p">.</span><span class="n">trim</span><span class="p">(</span><span class="n">from</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="n">to</span><span class="p">:</span> <span class="n">CGFloat</span><span class="p">(</span><span class="n">value</span><span class="o">/</span><span class="mi">100</span><span class="p">))</span>
                    <span class="p">.</span><span class="n">stroke</span><span class="p">(</span><span class="n">gradient</span><span class="p">,</span> <span class="n">style</span><span class="p">:</span> <span class="p">.</span><span class="kd">init</span><span class="p">(</span><span class="n">lineWidth</span><span class="p">:</span> <span class="n">thickness</span><span class="p">))</span>
            <span class="p">}</span>
            <span class="p">.</span><span class="n">padding</span><span class="p">(</span><span class="n">thickness</span><span class="o">/</span><span class="mi">2</span><span class="p">)</span>
            <span class="p">.</span><span class="n">rotationEffect</span><span class="p">(.</span><span class="n">degrees</span><span class="p">(</span><span class="mi">90</span><span class="p">))</span>
            <span class="p">.</span><span class="n">frame</span><span class="p">(</span><span class="n">width</span><span class="p">:</span> <span class="n">diameter</span><span class="p">,</span> <span class="n">height</span><span class="p">:</span> <span class="n">diameter</span><span class="p">)</span>
        <span class="p">}.</span><span class="n">onPreferenceChange</span><span class="p">(</span><span class="n">GaugeWidthPreferenceKey</span><span class="p">.</span><span class="kc">self</span><span class="p">)</span> <span class="p">{</span> <span class="n">width</span> <span class="k">in</span>
            <span class="kc">self</span><span class="p">.</span><span class="n">diameter</span> <span class="p">=</span> <span class="n">width</span> <span class="o">*</span> <span class="kc">self</span><span class="p">.</span><span class="n">scale</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">extension</span> <span class="nc">Gauge</span> <span class="k">where</span> <span class="n">T</span> <span class="p">==</span> <span class="n">ZStack</span><span class="p">&lt;</span><span class="n">TupleView</span><span class="o">&lt;</span><span class="p">(</span><span class="n">Text</span><span class="p">,</span> <span class="n">Text</span><span class="p">)</span><span class="o">&gt;&gt;</span> <span class="p">{</span>
    <span class="kd">public</span> <span class="kd">init</span><span class="p">(</span><span class="n">value</span><span class="p">:</span> <span class="nb">Double</span><span class="p">)</span> <span class="p">{</span>
        <span class="kc">self</span><span class="p">.</span><span class="n">value</span> <span class="p">=</span> <span class="n">value</span>
        <span class="kc">self</span><span class="p">.</span><span class="n">centerView</span> <span class="p">=</span> <span class="n">ZStack</span> <span class="p">{</span>
            <span class="n">Text</span><span class="p">(</span><span class="s">&quot;100 %&quot;</span><span class="p">).</span><span class="n">foregroundColor</span><span class="p">(.</span><span class="n">clear</span><span class="p">)</span>
            <span class="n">Text</span><span class="p">(</span><span class="s">&quot;</span><span class="si">\(</span><span class="n">value</span><span class="p">,</span> <span class="n">specifier</span><span class="p">:</span> <span class="s">&quot;%.0f&quot;</span><span class="si">)</span><span class="s"> %&quot;</span><span class="p">)</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="p">@</span><span class="n">_functionBuilder</span>
<span class="kd">struct</span> <span class="nc">GaugeBuilder</span> <span class="p">{</span>
    <span class="kd">static</span> <span class="kd">func</span> <span class="nf">buildBlock</span><span class="p">&lt;</span><span class="n">T</span><span class="p">:</span> <span class="n">View</span><span class="p">&gt;(</span><span class="kc">_</span> <span class="n">centerView</span><span class="p">:</span> <span class="n">T</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="n">T</span> <span class="p">{</span>
        <span class="n">centerView</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">struct</span> <span class="nc">GaugeWidthPreferenceKey</span><span class="p">:</span> <span class="n">PreferenceKey</span> <span class="p">{</span>
    <span class="kd">typealias</span> <span class="n">Value</span> <span class="p">=</span> <span class="n">CGFloat</span>
    <span class="kd">static</span> <span class="kd">var</span> <span class="nv">defaultValue</span><span class="p">:</span> <span class="n">CGFloat</span> <span class="p">=</span> <span class="mi">0</span>
    
    <span class="kd">static</span> <span class="kd">func</span> <span class="nf">reduce</span><span class="p">(</span><span class="n">value</span><span class="p">:</span> <span class="kr">inout</span> <span class="n">CGFloat</span><span class="p">,</span> <span class="n">nextValue</span><span class="p">:</span> <span class="p">()</span> <span class="p">-&gt;</span> <span class="n">CGFloat</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">value</span> <span class="p">=</span> <span class="n">nextValue</span><span class="p">()</span>
    <span class="p">}</span>
<span class="p">}</span>
</div></code></pre><p>So that's the complete thing. There are a few things worth mentioning.</p><h3>Function Builder</h3><p>This is the magic behind the nice SwiftUI DSL. The <code>buildBlock</code> function returns what gets passed as the trailing closure to the Gauge. So instead of this:</p><pre><code><div class="highlight"><span></span><span class="n">Gauge</span><span class="p">(</span><span class="n">value</span><span class="p">:</span> <span class="n">value</span><span class="p">,</span> <span class="n">centerView</span><span class="p">:</span> <span class="n">Text</span><span class="p">(</span><span class="s">&quot;</span><span class="si">\(</span><span class="n">value</span><span class="si">)</span><span class="s"> %&quot;</span><span class="p">)</span>
</div></code></pre><p>you can write:</p><pre><code><div class="highlight"><span></span><span class="n">Gauge</span><span class="p">(</span><span class="n">value</span><span class="p">:</span> <span class="n">value</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">Text</span><span class="p">(</span><span class="s">&quot;</span><span class="si">\(</span><span class="n">value</span><span class="si">)</span><span class="s"> %&quot;</span><span class="p">)</span>
<span class="p">}</span>
</div></code></pre><h3>Preference Key</h3><p>In SwiftUI preference keys provide the possibility for a child view to pass values up to it's ancestors. While <code>@Environment</code>-objects are visible to child views, <code>PreferenceKeys</code> are visible to parents. What we want to achieve is that the Gauge knows the width of it's <code>centerView</code> and adjusts the circles accordingly. So we add the <code>.background</code>-modifier to the <code>centerView</code> and fill its background with a transparent color. We use the <code>GeometryReader</code>'s proxy to get the size of the invisible Color and save that in the <code>GaugeWidthPreferenceKey</code>.</p><p>Now we can use the <code>.onPreferenceChange</code>-modifier on the outer ZStack to calculate the diameter of our circles. Since diamater is a <code>@State</code>-property the body property of the Gauge will be evaluated and our circles are drawn with the desired diameter. Very cool!</p><h3>Providing a default center view</h3><p>There's one more thing required to make the Gauge work without the need to provide a centerView. We need an initializer that takes only the value as an argument. This can be done with an extension of the Gauge using conditional conformance.</p><h3>Why conformance to <code>ZStack&lt;TupleView&lt;(Text, Text)&gt;&gt;</code>?</h3><p>In order to prevent the Gauge to change its size with every different value between 0 and 100 % I build a default centerView that has the invisible string "100 %" and centered on top of that the string representing the actual value. So the <code>centerView</code> will always have the same width.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://oliver-epper.de/posts/a-deprecated-way-to-save-codables</guid><title>A deprecated way to save Codables – but why?</title><description>Saving one Codable a time directly to a file handle.</description><link>https://oliver-epper.de/posts/a-deprecated-way-to-save-codables</link><pubDate>Fri, 21 Feb 2020 09:41:00 +0100</pubDate><content:encoded><![CDATA[<p>I was looking for a way to save a lot of Codables that emerge over a potentially long timespan. Just keeping them in memory looked like the obvious thing to do but I wanted something failsafe and persistent.</p><p>Saving a Codable to a file in Swift couldn’t be easier: <code>JSONEncoder.encode(T)</code> returns <code>Data</code>. That can be written to an <code>URL</code> via <code>write(to: URL)</code>.</p><p>But what if I want to append?</p><p>I for sure don’t want to load the data from a file, decode it into a JSON array, append the new Codable to the array, encode the array to data and then use that data to overwrite the file.</p><p>I do the following:</p><p>An instance of <code>CodableFileBuffer&lt;T&gt;</code> keeps an open FileHandle on an URL and whenever I call <code>append(codable)</code> on that buffer it encodes to data and writes that data to the file handle.</p><pre><code><div class="highlight"><span></span><span class="kd">public</span> <span class="kd">func</span> <span class="nf">append</span><span class="p">(</span><span class="kc">_</span> <span class="n">codable</span><span class="p">:</span> <span class="n">T</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// encode codable</span>
    <span class="k">guard</span> <span class="kd">let</span> <span class="nv">data</span> <span class="p">=</span> <span class="k">try</span><span class="p">?</span> <span class="n">encoder</span><span class="p">.</span><span class="n">encode</span><span class="p">(</span><span class="n">codable</span><span class="p">)</span> <span class="k">else</span> <span class="p">{</span>
        <span class="bp">fatalError</span><span class="p">(</span><span class="s">&quot;Cannot encode </span><span class="si">\(</span><span class="n">codable</span><span class="si">)</span><span class="s">&quot;</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="c1">// write to FileHandle</span>
    <span class="n">fileHandle</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
    <span class="n">fileHandle</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="s">&quot;,&quot;</span><span class="p">.</span><span class="n">data</span><span class="p">(</span><span class="n">using</span><span class="p">:</span> <span class="p">.</span><span class="n">utf8</span><span class="p">)</span><span class="o">!</span><span class="p">)</span>

    <span class="c1">// log</span>
    <span class="n">os_log</span><span class="p">(</span><span class="s">&quot;Did append codable to CodableFileBuffer at: %@&quot;</span><span class="p">,</span> <span class="n">log</span><span class="p">:</span> <span class="n">OSLog</span><span class="p">.</span><span class="n">CodableFileBuffer</span><span class="p">,</span> <span class="n">type</span><span class="p">:</span> <span class="p">.</span><span class="n">debug</span><span class="p">,</span> <span class="n">fileURL</span><span class="p">.</span><span class="n">lastPathComponent</span><span class="p">)</span>
<span class="p">}</span>
</div></code></pre><p>This could use a little more error handling but it is just for demo purpose. Bare with me.</p><p>The only thing not completely obvious happens on line 9. This ist just the comma that is required to form a JSON array. When I create the FileHandle I immediately write an opening square bracket to the file and the <code>retrieve() -&gt; [Codable]</code> function appends the closing square-bracket to the data before it passes it to the JSONDecoder.</p><p>So the files content loos like this:</p><pre><code><div class="highlight"><span></span><span class="c1">// after initializing</span>
<span class="p">[</span>

<span class="c1">// after writing the first codable</span>
<span class="p">[{</span><span class="s">&quot;id&quot;</span><span class="p">:</span><span class="mi">1</span><span class="p">,</span> <span class="s">&quot;key&quot;</span><span class="p">:</span> <span class="s">&quot;value_one&quot;</span><span class="p">},</span>

<span class="c1">// after writing the second codable</span>
<span class="p">[{</span><span class="s">&quot;id&quot;</span><span class="p">:</span><span class="mi">1</span><span class="p">,</span> <span class="s">&quot;key&quot;</span><span class="p">:</span> <span class="s">&quot;value_one&quot;</span><span class="p">},{</span><span class="s">&quot;id&quot;</span><span class="p">:</span><span class="mi">2</span><span class="p">,</span> <span class="s">&quot;key&quot;</span><span class="p">:</span> <span class="s">&quot;another_value&quot;</span><span class="p">},</span>

<span class="c1">// the data that gets passed to the JSONDecoder looks like this</span>
<span class="p">[{</span><span class="s">&quot;id&quot;</span><span class="p">:</span><span class="mi">1</span><span class="p">,</span> <span class="s">&quot;key&quot;</span><span class="p">:</span> <span class="s">&quot;value_one&quot;</span><span class="p">},{</span><span class="s">&quot;id&quot;</span><span class="p">:</span><span class="mi">2</span><span class="p">,</span> <span class="s">&quot;key&quot;</span><span class="p">:</span> <span class="s">&quot;another_value&quot;</span><span class="p">},]</span>
</div></code></pre><p>I know the trailing comma is ugly and no valid json. It would be an easy fix but actually the <code>JSONDecoder</code> is pretty forgiving, here.</p><p>So what do we have now?</p><p>We have a Buffer that can be used like this:</p><pre><code><div class="highlight"><span></span><span class="kd">struct</span> <span class="nc">MyCodable</span><span class="p">:</span> <span class="n">Codable</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nv">id</span><span class="p">:</span> <span class="nb">Int</span>
    <span class="kd">var</span> <span class="nv">key</span><span class="p">:</span> <span class="nb">String</span>
<span class="p">}</span>

<span class="kd">let</span> <span class="nv">buffer</span> <span class="p">=</span> <span class="n">CodableFileBuffer</span><span class="p">&lt;</span><span class="n">MyCodable</span><span class="p">&gt;()</span>

<span class="n">buffer</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">MyCodable</span><span class="p">(</span><span class="n">id</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="n">key</span><span class="p">:</span> <span class="s">&quot;value_one&quot;</span><span class="p">))</span>
<span class="n">buffer</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">MyCodable</span><span class="p">(</span><span class="n">id</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="n">key</span><span class="p">:</span> <span class="s">&quot;another_value&quot;</span><span class="p">))</span>

<span class="kd">let</span> <span class="nv">myCodables</span> <span class="p">=</span> <span class="n">buffer</span><span class="p">.</span><span class="n">retrieve</span><span class="p">()</span>
</div></code></pre><p>Neat, isn’t it?</p><p>I use it to append thousands of Codables and it works pretty nice, so far. I measured it with instruments using tens of thousands to Codables. And I use it on real devices running for days.</p><p>Here’s the complete thing:</p><p><a href="https://github.com/oliverepper/CodableFileBuffer">CodeableFileBuffer</a></p><p>So what’s next?</p><p>I have a few questions I’d like to discuss:</p><ol><li>Why is <code>FileHandle.write</code> deprecated? It sure doesn’t look swifty. It can throw exceptions without beeing marked as throwing.</li><li>How are we supposed to replace this? How does the <code>writeabilityHandler</code> work? Can anyone provide an example?</li><li>What do you think? I guess there must be other or better ways to buffer Codables on disk.</li></ol><p>I’d really appreciate your ideas.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://oliver-epper.de/posts/how-to-use-coredata-inside-xcframework</guid><title>How to use CoreData inside xcframework</title><description>Use CoreData inside xcframework</description><link>https://oliver-epper.de/posts/how-to-use-coredata-inside-xcframework</link><pubDate>Thu, 20 Feb 2020 09:41:00 +0100</pubDate><content:encoded><![CDATA[<p>The company I work for distributes a binary framework that records data on an iPhone. Since I am in charge of that framework and I enjoy working with CoreData I wanted to use it to store the collected data. Sadly my first attempt of doing this resulted in an error when I tried to use the framework inside an actual app.</p><blockquote><p>@NSManaged not allowed on computed properties</p></blockquote><p>This is coming from the generated .swiftinterface file so there is not much you can do about it. With a little research and some help I found the good news:</p><p>[[ModuleInterfaces] Don't diagnose @NSManaged properties with accessors #27676](https://github.com/apple/swift/pull/27676)</p><p>So there is a fix 🤗</p><h2>Get the fix</h2><p>At the time of writing all you need to do is to download and use the Xcode beta (11.4) which comes with a newer version of the Swift compiler that already has the fix. The rest is then pretty straight forward.</p><h2>Create the DataModel</h2><p>You can use File-&gt;New and then search for „Data Model“ in the template chooser. I will call it `MyDataModel for demo purpose.</p><h2>Create an instance of NSPersistentContainer in your framework code</h2><p>This might not be obvious at first, but it is not hard. When you create an app with core data you get the following code inside your AppDelegate:</p><pre><code><div class="highlight"><span></span><span class="kr">lazy</span> <span class="kd">var</span> <span class="nv">persistentContainer</span><span class="p">:</span> <span class="bp">NSPersistentContainer</span> <span class="p">=</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nv">container</span> <span class="p">=</span> <span class="bp">NSPersistentContainer</span><span class="p">(</span><span class="n">name</span><span class="p">:</span> <span class="s">&quot;DemoApp&quot;</span><span class="p">)</span>
  <span class="n">container</span><span class="p">.</span><span class="n">loadPersistentStores</span><span class="p">(</span><span class="n">completionHandler</span><span class="p">:</span> <span class="p">{</span> <span class="p">(</span><span class="n">storeDescription</span><span class="p">,</span> <span class="n">error</span><span class="p">)</span> <span class="k">in</span>
    <span class="k">if</span> <span class="kd">let</span> <span class="nv">error</span> <span class="p">=</span> <span class="n">error</span> <span class="k">as</span> <span class="bp">NSError</span><span class="p">?</span> <span class="p">{</span>
      <span class="bp">fatalError</span><span class="p">(</span><span class="s">&quot;Unresolved error </span><span class="si">\(</span><span class="n">error</span><span class="si">)</span><span class="s">, </span><span class="si">\(</span><span class="n">error</span><span class="p">.</span><span class="n">userInfo</span><span class="si">)</span><span class="s">&quot;</span><span class="p">)</span>
    <span class="p">}</span>
  <span class="p">})</span>
  <span class="k">return</span> <span class="n">container</span>
<span class="p">}()</span>
</div></code></pre><p>While the initializer <code>init(name: String)</code> of <code>NSPersistentContainer</code> is pretty convenient we can’t use it, because in the context of the running app it simply couldn’t find the model. We need to use <code>init(name: String, managedObjectModel: NSManagedObjectModel)</code> to get the container. <code>NSManagedObjectModel</code> has an initializer that takes an <code>URL</code>.</p><p>So update the above to this instead:</p><pre><code><div class="highlight"><span></span><span class="kr">lazy</span> <span class="kd">var</span> <span class="nv">persistentContainer</span><span class="p">:</span> <span class="bp">NSPersistentContainer</span> <span class="p">=</span> <span class="p">{</span>
    <span class="kd">let</span> <span class="nv">modelName</span> <span class="p">=</span> <span class="s">&quot;MyDataModel&quot;</span>
    <span class="k">guard</span> <span class="kd">let</span> <span class="nv">modelDir</span> <span class="p">=</span> <span class="n">Bundle</span><span class="p">(</span><span class="k">for</span><span class="p">:</span> <span class="n">type</span><span class="p">(</span><span class="n">of</span><span class="p">:</span> <span class="kc">self</span><span class="p">)).</span><span class="n">url</span><span class="p">(</span><span class="n">forResource</span><span class="p">:</span> <span class="n">modelName</span><span class="p">,</span> <span class="n">withExtension</span><span class="p">:</span> <span class="s">&quot;momd&quot;</span><span class="p">)</span> <span class="k">else</span> <span class="p">{</span> <span class="bp">fatalError</span><span class="p">()</span> <span class="p">}</span>
    <span class="k">guard</span> <span class="kd">let</span> <span class="nv">mom</span> <span class="p">=</span> <span class="bp">NSManagedObjectModel</span><span class="p">(</span><span class="n">contentsOf</span><span class="p">:</span> <span class="n">modelDir</span><span class="p">)</span> <span class="k">else</span> <span class="p">{</span> <span class="bp">fatalError</span><span class="p">()</span> <span class="p">}</span>

    <span class="kd">let</span> <span class="nv">container</span> <span class="p">=</span> <span class="bp">NSPersistentContainer</span><span class="p">(</span><span class="n">name</span><span class="p">:</span> <span class="n">modelName</span><span class="p">,</span> <span class="n">managedObjectModel</span><span class="p">:</span> <span class="n">mom</span><span class="p">)</span>
    <span class="n">container</span><span class="p">.</span><span class="n">loadPersistentStores</span><span class="p">(</span><span class="n">completionHandler</span><span class="p">:</span> <span class="p">{</span> <span class="p">(</span><span class="n">storeDescription</span><span class="p">,</span> <span class="n">error</span><span class="p">)</span> <span class="k">in</span>
        <span class="k">if</span> <span class="kd">let</span> <span class="nv">error</span> <span class="p">=</span> <span class="n">error</span> <span class="k">as</span> <span class="bp">NSError</span><span class="p">?</span> <span class="p">{</span>
            <span class="bp">fatalError</span><span class="p">(</span><span class="s">&quot;Unresolved error </span><span class="si">\(</span><span class="n">error</span><span class="si">)</span><span class="s">, </span><span class="si">\(</span><span class="n">error</span><span class="p">.</span><span class="n">userInfo</span><span class="si">)</span><span class="s">&quot;</span><span class="p">)</span>
        <span class="p">}</span>
    <span class="p">})</span>
    <span class="k">return</span> <span class="n">container</span>
<span class="p">}()</span>
</div></code></pre><h2>Final</h2><p>Please be aware, that a CoreData App has a <code>saveContext</code> function that gets automatically called by the <code>SceneDelegate</code> when the scene enters the background. If you want to use CoreData in a framework I guess you’ll decide when to save by yourself, anyways.</p>]]></content:encoded></item></channel></rss>