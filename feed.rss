<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>oliep</title><description>Golf Professional &amp; Professional Software Developer</description><link>https://oliver-epper.de</link><language>en</language><lastBuildDate>Tue, 13 Feb 2024 16:53:27 +0100</lastBuildDate><pubDate>Tue, 13 Feb 2024 16:53:27 +0100</pubDate><ttl>250</ttl><atom:link href="https://oliver-epper.de/feed.rss" rel="self" type="application/rss+xml"/><item><guid isPermaLink="true">https://oliver-epper.de/posts/learning-zfs</guid><title>Learning ZFS</title><description>Learning ZFS on the Mac</description><link>https://oliver-epper.de/posts/learning-zfs</link><pubDate>Tue, 13 Feb 2024 09:42:00 +0100</pubDate><content:encoded><![CDATA[<p>I've been using TrueNAS Core for a few years now. I am about to switch to a TrueNAS Scale VM on Proxmox. TrueNAS will still have real hardware access to the disk controller and reuse the old disks. To be well prepared I wanted to have some practice with ZFS on my Mac. During that practice, I got hooked. This is what Time Machine tried to be! And it has a much superior UI – one that is scriptable by nature.</p><h2>Installation</h2><p>I installed OpenZFS via brew and allowed the loading of the required kext. You need to change the security policy of your system for this. Boot into recovery mode start <code>Startup Security Utility</code> and change <code>Full Security</code> to <code>Allow user management of kernel extensions from identified developers</code>. After you restart, you can verify that the OpenZFS kext is loaded via the following command: <code>kextstat | grep -v com.apple</code>. This will list all kernel extensions whose names do not begin with 'com.apple'.</p><h2>The Playground</h2><p>I guess you don't have a bunch of high performing disks lying around and even if you had, I'd hope you'd be too lazy to connect them. Let's build four disks from files:</p><pre><code><div class="highlight"><span></span>mkfile<span class="w"> </span>1G<span class="w"> </span>a-disk<span class="w"> </span>b-disk<span class="w"> </span>c-disk<span class="w"> </span>d-disk
</div></code></pre><p>You could use these files immediately as ZFS <code>vdev</code>s, but follow me and attach them via hdiutil to your Mac. It's easier to simulate failing hardware that way. Let's attach the first three for now.</p><pre><code><div class="highlight"><span></span>hdiutil<span class="w"> </span>attach<span class="w"> </span>-imagekey<span class="w"> </span>diskimage-class<span class="o">=</span>CRawDiskImage<span class="w"> </span>-nomount<span class="w"> </span><span class="k">$(</span><span class="nb">pwd</span><span class="k">)</span>/a-disk
hdiutil<span class="w"> </span>attach<span class="w"> </span>-imagekey<span class="w"> </span>diskimage-class<span class="o">=</span>CRawDiskImage<span class="w"> </span>-nomount<span class="w"> </span><span class="k">$(</span><span class="nb">pwd</span><span class="k">)</span>/b-disk
hdiutil<span class="w"> </span>attach<span class="w"> </span>-imagekey<span class="w"> </span>diskimage-class<span class="o">=</span>CRawDiskImage<span class="w"> </span>-nomount<span class="w"> </span><span class="k">$(</span><span class="nb">pwd</span><span class="k">)</span>/c-disk
</div></code></pre><p>On my system that gave me <code>/dev/disk6</code>, <code>/dev/disk7</code>, <code>/dev/disk8</code>.</p><h2>ZFS Pools &amp; File systems</h2><p>Let's build a ZFS pool on <code>disk6</code>:</p><pre><code><div class="highlight"><span></span>sudo<span class="w"> </span>zpool<span class="w"> </span>create<span class="w"> </span>tank<span class="w"> </span>/dev/disk6
</div></code></pre><p>Now we have a ZFS pool called tank AND a ZFS file system called tank which is the root file system of that pool. Let's create another file system for our experiments:</p><pre><code><div class="highlight"><span></span>sudo<span class="w"> </span>zfs<span class="w"> </span>create<span class="w"> </span>tank/oliver
</div></code></pre><p>and gives permission to the local user <code>oliver</code>:</p><pre><code><div class="highlight"><span></span>sudo<span class="w"> </span>chown<span class="w"> </span>oliver:<span class="w"> </span>/Volumes/tank/oliver
</div></code></pre><p>Now the user <code>oliver</code> can create, modify and delete files and directories in that file system.</p><h2>Snapshots and Sending</h2><p>Let's use <code>disk7</code> and <code>disk8</code> to create a mirror that we use for backups:</p><pre><code><div class="highlight"><span></span>sudo<span class="w"> </span>zpool<span class="w"> </span>create<span class="w"> </span>backup<span class="w"> </span>mirror<span class="w"> </span>/dev/disk7<span class="w"> </span>/dev/disk8
</div></code></pre><p>Voilà. <code>sudo zpool status</code> should now look like this:</p><pre><code><div class="highlight"><span></span>  <span class="n">pool</span><span class="p">:</span> <span class="n">backup</span>
 <span class="n">state</span><span class="p">:</span> <span class="n">ONLINE</span>
<span class="n">config</span><span class="p">:</span>

    <span class="n">NAME</span>        <span class="n">STATE</span>     <span class="n">READ</span> <span class="n">WRITE</span> <span class="n">CKSUM</span>
    <span class="n">backup</span>      <span class="n">ONLINE</span>       <span class="mi">0</span>     <span class="mi">0</span>     <span class="mi">0</span>
      <span class="n">mirror</span><span class="o">-</span><span class="mi">0</span>  <span class="n">ONLINE</span>       <span class="mi">0</span>     <span class="mi">0</span>     <span class="mi">0</span>
        <span class="n">disk7</span>   <span class="n">ONLINE</span>       <span class="mi">0</span>     <span class="mi">0</span>     <span class="mi">0</span>
        <span class="n">disk8</span>   <span class="n">ONLINE</span>       <span class="mi">0</span>     <span class="mi">0</span>     <span class="mi">0</span>

<span class="n">errors</span><span class="p">:</span> <span class="n">No</span> <span class="n">known</span> <span class="n">data</span> <span class="n">errors</span>

  <span class="n">pool</span><span class="p">:</span> <span class="n">tank</span>
 <span class="n">state</span><span class="p">:</span> <span class="n">ONLINE</span>
<span class="n">config</span><span class="p">:</span>

    <span class="n">NAME</span>        <span class="n">STATE</span>     <span class="n">READ</span> <span class="n">WRITE</span> <span class="n">CKSUM</span>
    <span class="n">tank</span>        <span class="n">ONLINE</span>       <span class="mi">0</span>     <span class="mi">0</span>     <span class="mi">0</span>
      <span class="n">disk6</span>     <span class="n">ONLINE</span>       <span class="mi">0</span>     <span class="mi">0</span>     <span class="mi">0</span>

<span class="n">errors</span><span class="p">:</span> <span class="n">No</span> <span class="n">known</span> <span class="n">data</span> <span class="n">errors</span>
</div></code></pre><p>Let's touch a file on <code>/Volumes/tank/oliver</code> and then take a snapshot of the file system</p><pre><code><div class="highlight"><span></span>touch<span class="w"> </span>/Volumes/tank/oliver/Init
sudo<span class="w"> </span>zfs<span class="w"> </span>snapshot<span class="w"> </span>tank/oliver@1
</div></code></pre><p>You can list the snapshots with <code>sudo zfs list -t snapshot</code>. It should now look like this:</p><pre><code><div class="highlight"><span></span><span class="n">NAME</span>            <span class="n">USED</span>  <span class="n">AVAIL</span>  <span class="n">REFER</span>  <span class="n">MOUNTPOINT</span>
<span class="n">tank</span><span class="o">/</span><span class="n">oliver</span><span class="p">@</span><span class="mi">1</span>     <span class="mi">0</span><span class="n">B</span>      <span class="o">-</span>  <span class="mf">1.73</span><span class="n">M</span>  <span class="o">-</span>
</div></code></pre><p>Now let's create a backup:</p><pre><code><div class="highlight"><span></span>sudo<span class="w"> </span>zfs<span class="w"> </span>send<span class="w"> </span>tank/oliver@1<span class="w"> </span><span class="p">|</span><span class="w"> </span>sudo<span class="w"> </span>zfs<span class="w"> </span>recv<span class="w"> </span>backup/oliver
</div></code></pre><p>That's it. There is a file system <code>backup/oliver</code> now that contains the file <code>Init</code>.</p><h2>Sending Incremental Snapshots</h2><p>Let's touch another file on <code>tank/oliver</code> and then take another snapshot:</p><pre><code><div class="highlight"><span></span>touch<span class="w"> </span>/Volumes/tank/oliver/One
sudo<span class="w"> </span>zfs<span class="w"> </span>snapshot<span class="w"> </span>tank/oliver@2
</div></code></pre><p>Now let's send only the diff between the first and the second snapshot to the backup pool:</p><pre><code><div class="highlight"><span></span>sudo<span class="w"> </span>zfs<span class="w"> </span>send<span class="w"> </span>-RI<span class="w"> </span>@1<span class="w"> </span>tank/oliver@2<span class="w"> </span><span class="p">|</span><span class="w"> </span>sudo<span class="w"> </span>zfs<span class="w"> </span>recv<span class="w"> </span>-Fu<span class="w"> </span>backup/oliver
</div></code></pre><p>We used different options, here. See me man pages for <code>zfs-send</code> and <code>zfs-recv</code></p><h2>Make the backup safer</h2><p>Let's make our backup even safer:</p><pre><code><div class="highlight"><span></span>sudo<span class="w"> </span>zfs<span class="w"> </span><span class="nb">set</span><span class="w"> </span><span class="nv">copies</span><span class="o">=</span><span class="m">2</span><span class="w"> </span>backup/oliver
</div></code></pre><p>This tells the file system <code>backup/oliver</code> to hold two copies of my precious data. How cool is that?</p><h2>Make the backup smaller</h2><pre><code><div class="highlight"><span></span>sudo<span class="w"> </span>zfs<span class="w"> </span><span class="nb">set</span><span class="w"> </span><span class="nv">compression</span><span class="o">=</span>gzip<span class="w"> </span>backup/oliver
</div></code></pre><h2>Make the backup even more useful</h2><p>Let's delete the files on <code>tank/oliver</code> and safe a new snapshot to the backup:</p><pre><code><div class="highlight"><span></span>rm<span class="w"> </span>/Volumes/tank/oliver/*
sudo<span class="w"> </span>zfs<span class="w"> </span>snapshot<span class="w"> </span>tank/oliver@3
sudo<span class="w"> </span>zfs<span class="w"> </span>send<span class="w"> </span>-RI<span class="w"> </span>@2<span class="w"> </span>tank/oliver@3<span class="w"> </span><span class="p">|</span><span class="w"> </span>sudo<span class="w"> </span>zfs<span class="w"> </span>recv<span class="w"> </span>-Fu<span class="w"> </span>backup/oliver
</div></code></pre><p>Let's make all of our snapshots visible to the file system <code>backup/oliver</code>:</p><pre><code><div class="highlight"><span></span>sudo<span class="w"> </span>zfs<span class="w"> </span><span class="nb">set</span><span class="w"> </span><span class="nv">snapdir</span><span class="o">=</span>visible<span class="w"> </span>backup/oliver
</div></code></pre><p>Now open <code>/Volumes/backup/oliver</code> in Finder and press <code>Cmd</code> + <code>Shift</code> + <code>.</code> to make dot-files visible and navigate to <code>.zfs/snapshot/oliver@2</code> and you have read-only access to your deleted files.</p><figure>
    <picture>
        <source srcset="/images/zfs-snapshots-dark.png" media="(prefers-color-scheme: dark)">
        <img src="https://oliver-epper.de/images/zfs-snapshots.png" alt="zfs-snapshots">
    </picture>
</figure><h2>Simulate a disk-failure</h2><p>Let's export (think unmount) the pool <code>backup</code>:</p><pre><code><div class="highlight"><span></span>sudo<span class="w"> </span>zpool<span class="w"> </span><span class="nb">export</span><span class="w"> </span>backup
</div></code></pre><p>and detach <code>disk8</code>:</p><pre><code><div class="highlight"><span></span>hdiutil<span class="w"> </span>detach<span class="w"> </span>/dev/disk8
</div></code></pre><p>Now bring back the pool <code>backup</code>, again:</p><pre><code><div class="highlight"><span></span>sudo<span class="w"> </span>zpool<span class="w"> </span>import<span class="w"> </span>backup
</div></code></pre><p><code>sudo zpool status -x</code> should now look like this:</p><pre><code><div class="highlight"><span></span>  <span class="n">pool</span><span class="p">:</span> <span class="n">backup</span>
 <span class="n">state</span><span class="p">:</span> <span class="n">DEGRADED</span>
<span class="n">status</span><span class="p">:</span> <span class="n">One</span> <span class="n">or</span> <span class="n">more</span> <span class="n">devices</span> <span class="n">could</span> <span class="n">not</span> <span class="n">be</span> <span class="n">opened</span><span class="p">.</span>  <span class="n">Sufficient</span> <span class="n">replicas</span> <span class="n">exist</span> <span class="k">for</span>
    <span class="n">the</span> <span class="n">pool</span> <span class="n">to</span> <span class="k">continue</span> <span class="n">functioning</span> <span class="k">in</span> <span class="n">a</span> <span class="n">degraded</span> <span class="n">state</span><span class="p">.</span>
<span class="n">action</span><span class="p">:</span> <span class="n">Attach</span> <span class="n">the</span> <span class="n">missing</span> <span class="n">device</span> <span class="n">and</span> <span class="n">online</span> <span class="n">it</span> <span class="n">using</span> <span class="err">&#39;</span><span class="n">zpool</span> <span class="n">online</span><span class="err">&#39;</span><span class="p">.</span>
   <span class="n">see</span><span class="p">:</span> <span class="n">https</span><span class="p">:</span><span class="c1">//openzfs.github.io/openzfs-docs/msg/ZFS-8000-2Q</span>
<span class="n">config</span><span class="p">:</span>

    <span class="n">NAME</span>                                            <span class="n">STATE</span>     <span class="n">READ</span> <span class="n">WRITE</span> <span class="n">CKSUM</span>
    <span class="n">backup</span>                                          <span class="n">DEGRADED</span>     <span class="mi">0</span>     <span class="mi">0</span>     <span class="mi">0</span>
      <span class="n">mirror</span><span class="o">-</span><span class="mi">0</span>                                      <span class="n">DEGRADED</span>     <span class="mi">0</span>     <span class="mi">0</span>     <span class="mi">0</span>
        <span class="n">media</span><span class="o">-</span><span class="mi">0</span><span class="n">BC56ABF</span><span class="o">-</span><span class="mi">50</span><span class="n">C7</span><span class="o">-</span><span class="n">AF4C</span><span class="o">-</span><span class="n">BC93</span><span class="o">-</span><span class="mi">86</span><span class="n">D958969282</span>  <span class="n">ONLINE</span>       <span class="mi">0</span>     <span class="mi">0</span>     <span class="mi">0</span>
        <span class="mi">1904242345373318257</span>                         <span class="n">UNAVAIL</span>      <span class="mi">0</span>     <span class="mi">0</span>     <span class="mi">0</span>  <span class="n">was</span> <span class="o">/</span><span class="n">dev</span><span class="o">/</span><span class="n">disk8s1</span>

<span class="n">errors</span><span class="p">:</span> <span class="n">No</span> <span class="n">known</span> <span class="n">data</span> <span class="n">errors</span>
</div></code></pre><p>Attach the file <code>d-disk</code>:</p><pre><code><div class="highlight"><span></span>hdiutil<span class="w"> </span>attach<span class="w"> </span>-imagekey<span class="w"> </span>diskimage-class<span class="o">=</span>CRawDiskImage<span class="w"> </span>-nomount<span class="w"> </span><span class="k">$(</span><span class="nb">pwd</span><span class="k">)</span>/d-disk
</div></code></pre><p>This became <code>/dev/disk10</code> on my system. Let's use it to replace the unavailable <code>vdev</code> in <code>backup</code>:</p><pre><code><div class="highlight"><span></span>sudo<span class="w"> </span>zpool<span class="w"> </span>replace<span class="w"> </span>backup<span class="w"> </span><span class="m">1904242345373318257</span><span class="w"> </span>/dev/disk10
</div></code></pre><p>Done. <code>sudo zpool status -x</code> shows <code>all pools are healthy</code>.</p><pre><code><div class="highlight"><span></span>  <span class="n">pool</span><span class="p">:</span> <span class="n">backup</span>
 <span class="n">state</span><span class="p">:</span> <span class="n">ONLINE</span>
  <span class="n">scan</span><span class="p">:</span> <span class="n">resilvered</span> <span class="mf">4.59</span><span class="n">M</span> <span class="k">in</span> <span class="mi">00</span><span class="p">:</span><span class="mi">00</span><span class="p">:</span><span class="mi">00</span> <span class="n">with</span> <span class="mi">0</span> <span class="n">errors</span> <span class="n">on</span> <span class="n">Tue</span> <span class="n">Feb</span> <span class="mi">13</span> <span class="mi">15</span><span class="p">:</span><span class="mi">57</span><span class="p">:</span><span class="mi">51</span> <span class="mi">2024</span>
<span class="n">config</span><span class="p">:</span>

    <span class="n">NAME</span>                                            <span class="n">STATE</span>     <span class="n">READ</span> <span class="n">WRITE</span> <span class="n">CKSUM</span>
    <span class="n">backup</span>                                          <span class="n">ONLINE</span>       <span class="mi">0</span>     <span class="mi">0</span>     <span class="mi">0</span>
      <span class="n">mirror</span><span class="o">-</span><span class="mi">0</span>                                      <span class="n">ONLINE</span>       <span class="mi">0</span>     <span class="mi">0</span>     <span class="mi">0</span>
        <span class="n">media</span><span class="o">-</span><span class="mi">0</span><span class="n">BC56ABF</span><span class="o">-</span><span class="mi">50</span><span class="n">C7</span><span class="o">-</span><span class="n">AF4C</span><span class="o">-</span><span class="n">BC93</span><span class="o">-</span><span class="mi">86</span><span class="n">D958969282</span>  <span class="n">ONLINE</span>       <span class="mi">0</span>     <span class="mi">0</span>     <span class="mi">0</span>
        <span class="n">disk10</span>                                      <span class="n">ONLINE</span>       <span class="mi">0</span>     <span class="mi">0</span>     <span class="mi">0</span>

<span class="n">errors</span><span class="p">:</span> <span class="n">No</span> <span class="n">known</span> <span class="n">data</span> <span class="n">errors</span>

  <span class="n">pool</span><span class="p">:</span> <span class="n">tank</span>
 <span class="n">state</span><span class="p">:</span> <span class="n">ONLINE</span>
<span class="n">config</span><span class="p">:</span>

    <span class="n">NAME</span>        <span class="n">STATE</span>     <span class="n">READ</span> <span class="n">WRITE</span> <span class="n">CKSUM</span>
    <span class="n">tank</span>        <span class="n">ONLINE</span>       <span class="mi">0</span>     <span class="mi">0</span>     <span class="mi">0</span>
      <span class="n">disk6</span>     <span class="n">ONLINE</span>       <span class="mi">0</span>     <span class="mi">0</span>     <span class="mi">0</span>

<span class="n">errors</span><span class="p">:</span> <span class="n">No</span> <span class="n">known</span> <span class="n">data</span> <span class="n">errors</span>
</div></code></pre><p><code>disk10</code> will become something like <code>media-xxxx</code> when you export and import the pool <code>backup</code>.</p><h2>Addendum</h2><p>Just for reference. If you want to see the mapping between gptids and classic device names on FreeBSD use <code>glabel status</code>. In macOS this is shown by <code>diskutil list</code> or <code>diskutil info</code>. <code>diskutil info /dev/disk7s1</code> shows <code>0BC56ABF-50C7-AF4C-BC93-86D958969282</code> which matches the media-id of the first disk in the pool <code>backup</code>.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://oliver-epper.de/posts/using-bsd-sockets-from-cpp</guid><title>Using the BSD socket API from C++</title><description>How I use the BSD socket API from C++</description><link>https://oliver-epper.de/posts/using-bsd-sockets-from-cpp</link><pubDate>Thu, 1 Feb 2024 09:42:00 +0100</pubDate><content:encoded><![CDATA[<h2>Setting the stage</h2><p>A lot of the POSIX API functions come in pairs: <code>getifaddrs</code> and <code>freeifaddrs</code> or <code>getaddrinfo</code> and <code>freeaddrinfo</code>. Both take the address of a pointer as an out parameter and, if successful, make that point to a linked-list allocated on the free-store. This memory resources must be freed via the <code>free</code>-functions.</p><pre><code><div class="highlight"><span></span><span class="kt">void</span><span class="w"> </span><span class="nf">demo</span><span class="p">()</span><span class="w"> </span><span class="p">{</span>
<span class="w">    </span><span class="n">ifaddrs</span><span class="w"> </span><span class="o">*</span><span class="n">result</span><span class="p">;</span>
<span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">status</span><span class="p">{</span><span class="mi">0</span><span class="p">};</span>
<span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">((</span><span class="n">status</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">getifaddrs</span><span class="p">(</span><span class="o">&amp;</span><span class="n">result</span><span class="p">))</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="mi">0</span><span class="p">)</span>
<span class="w">        </span><span class="k">throw</span><span class="w"> </span><span class="n">error</span><span class="p">{</span><span class="n">gai_strerror</span><span class="p">(</span><span class="n">status</span><span class="p">)};</span>

<span class="w">    </span><span class="c1">// use result</span>

<span class="w">    </span><span class="n">freeifaddrs</span><span class="p">(</span><span class="n">result</span><span class="p">);</span>
<span class="p">}</span>
</div></code></pre><p>This is not a good solution, because it's hard to make sure that the free-function is called and called only once. In C++ smart-pointers provide a handle to a memory allocation and thus can guarantee the release of the resource.</p><h2>Using a smart-pointer for the out parameter</h2><pre><code><div class="highlight"><span></span><span class="kt">void</span><span class="w"> </span><span class="nf">demo</span><span class="p">()</span><span class="w"> </span><span class="p">{</span>
<span class="w">    </span><span class="k">auto</span><span class="w"> </span><span class="n">deleter</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">[](</span><span class="n">ifaddrs</span><span class="w"> </span><span class="o">*</span><span class="n">ia</span><span class="p">){</span><span class="w"> </span><span class="n">freeifaddrs</span><span class="p">(</span><span class="n">ia</span><span class="p">);</span><span class="w"> </span><span class="p">};</span>
<span class="w">    </span><span class="n">std</span><span class="o">::</span><span class="n">unique_ptr</span><span class="o">&lt;</span><span class="n">ifaddrs</span><span class="p">,</span><span class="w"> </span><span class="k">decltype</span><span class="p">(</span><span class="n">deleter</span><span class="p">)</span><span class="o">&gt;</span><span class="w"> </span><span class="n">result</span><span class="p">;</span>

<span class="w">    </span><span class="p">{</span>
<span class="w">        </span><span class="n">ifaddrs</span><span class="w"> </span><span class="o">*</span><span class="n">temp</span><span class="p">;</span>
<span class="w">        </span><span class="kt">int</span><span class="w"> </span><span class="n">status</span><span class="p">{</span><span class="mi">0</span><span class="p">};</span>
<span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="p">((</span><span class="n">status</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">getifaddrs</span><span class="p">(</span><span class="o">&amp;</span><span class="n">temp</span><span class="p">))</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="mi">0</span><span class="p">)</span>
<span class="w">            </span><span class="k">throw</span><span class="w"> </span><span class="n">error</span><span class="p">{</span><span class="n">gai_strerror</span><span class="p">(</span><span class="n">status</span><span class="p">)};</span>
<span class="w">        </span><span class="n">result</span><span class="p">.</span><span class="n">reset</span><span class="p">(</span><span class="n">temp</span><span class="p">);</span>
<span class="w">    </span><span class="p">}</span>

<span class="w">    </span><span class="c1">// use result</span>
<span class="p">}</span>
</div></code></pre><p>This is really nice. The smart-pointer handles the release of the allocated memory for us, now.</p><h2>Using C++ algorithms</h2><p>Since these POSIX functions provide linked-lists it would be very nice to provide an iterator that would make them usable with the STL algorithms.</p><h3>Linked-List-Iterator</h3><pre><code><div class="highlight"><span></span><span class="cp">#include</span><span class="w"> </span><span class="cpf">&lt;cstddef&gt;</span>
<span class="cp">#include</span><span class="w"> </span><span class="cpf">&lt;iterator&gt;</span>
<span class="cp">#include</span><span class="w"> </span><span class="cpf">&lt;functional&gt;</span>

<span class="k">template</span><span class="w"> </span><span class="o">&lt;</span><span class="k">typename</span><span class="w"> </span><span class="nc">T</span><span class="o">&gt;</span>
<span class="k">struct</span><span class="w"> </span><span class="nc">linked_list_iterator</span><span class="w"> </span><span class="p">{</span>
<span class="w">    </span><span class="k">using</span><span class="w"> </span><span class="n">value_type</span><span class="w">        </span><span class="o">=</span><span class="w"> </span><span class="n">T</span><span class="p">;</span>
<span class="w">    </span><span class="k">using</span><span class="w"> </span><span class="n">difference_type</span><span class="w">   </span><span class="o">=</span><span class="w"> </span><span class="n">std</span><span class="o">::</span><span class="kt">ptrdiff_t</span><span class="p">;</span>
<span class="w">    </span><span class="k">using</span><span class="w"> </span><span class="n">iterator_category</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">std</span><span class="o">::</span><span class="n">forward_iterator_tag</span><span class="p">;</span>
<span class="w">    </span><span class="k">using</span><span class="w"> </span><span class="n">pointer</span><span class="w">           </span><span class="o">=</span><span class="w"> </span><span class="n">T</span><span class="o">*</span><span class="p">;</span>
<span class="w">    </span><span class="k">using</span><span class="w"> </span><span class="n">refernce</span><span class="w">          </span><span class="o">=</span><span class="w"> </span><span class="n">T</span><span class="o">&amp;</span><span class="p">;</span>
<span class="w">    </span><span class="k">using</span><span class="w"> </span><span class="n">Next</span><span class="w">              </span><span class="o">=</span><span class="w"> </span><span class="n">std</span><span class="o">::</span><span class="n">function</span><span class="o">&lt;</span><span class="n">T</span><span class="o">*</span><span class="p">(</span><span class="n">T</span><span class="o">*</span><span class="p">)</span><span class="o">&gt;</span><span class="p">;</span>

<span class="w">    </span><span class="k">explicit</span><span class="w"> </span><span class="n">linked_list_iterator</span><span class="p">(</span><span class="n">T</span><span class="o">*</span><span class="w"> </span><span class="n">current</span><span class="p">,</span><span class="w"> </span><span class="n">Next</span><span class="w"> </span><span class="n">next</span><span class="p">)</span><span class="w"> </span><span class="o">:</span><span class="w"> </span><span class="n">m_current</span><span class="p">{</span><span class="n">current</span><span class="p">},</span><span class="w"> </span><span class="n">m_next</span><span class="p">{</span><span class="n">next</span><span class="p">}</span><span class="w"> </span><span class="p">{}</span>

<span class="w">    </span><span class="n">refernce</span><span class="w"> </span><span class="k">operator</span><span class="o">*</span><span class="p">()</span><span class="w"> </span><span class="k">const</span><span class="w"> </span><span class="p">{</span>
<span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="o">*</span><span class="n">m_current</span><span class="p">;</span>
<span class="w">    </span><span class="p">}</span>

<span class="w">    </span><span class="n">pointer</span><span class="w"> </span><span class="k">operator</span><span class="o">-&gt;</span><span class="p">()</span><span class="w"> </span><span class="k">const</span><span class="w"> </span><span class="p">{</span>
<span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="o">&amp;</span><span class="p">(</span><span class="k">operator</span><span class="o">*</span><span class="p">());</span>
<span class="w">    </span><span class="p">}</span>

<span class="w">    </span><span class="n">linked_list_iterator</span><span class="w"> </span><span class="k">operator</span><span class="o">++</span><span class="p">()</span><span class="w"> </span><span class="p">{</span>
<span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">m_current</span><span class="p">)</span>
<span class="w">            </span><span class="n">m_current</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">m_next</span><span class="p">(</span><span class="n">m_current</span><span class="p">);</span>
<span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="o">*</span><span class="k">this</span><span class="p">;</span>
<span class="w">    </span><span class="p">}</span>

<span class="w">    </span><span class="n">linked_list_iterator</span><span class="w"> </span><span class="k">operator</span><span class="o">++</span><span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="w"> </span><span class="p">{</span>
<span class="w">        </span><span class="n">linked_list_iterator</span><span class="w"> </span><span class="n">temp</span><span class="p">{</span><span class="o">*</span><span class="k">this</span><span class="p">};</span>
<span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">m_current</span><span class="p">)</span>
<span class="w">            </span><span class="n">m_current</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">m_next</span><span class="p">(</span><span class="n">m_current</span><span class="p">);</span>
<span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="n">temp</span><span class="p">;</span>
<span class="w">    </span><span class="p">}</span>

<span class="w">    </span><span class="kt">bool</span><span class="w"> </span><span class="k">operator</span><span class="o">==</span><span class="p">(</span><span class="k">const</span><span class="w"> </span><span class="n">linked_list_iterator</span><span class="o">&amp;</span><span class="w"> </span><span class="n">other</span><span class="p">)</span><span class="w"> </span><span class="k">const</span><span class="w"> </span><span class="p">{</span>
<span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="n">m_current</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">other</span><span class="p">.</span><span class="n">m_current</span><span class="p">;</span>
<span class="w">    </span><span class="p">}</span>

<span class="w">    </span><span class="kt">bool</span><span class="w"> </span><span class="k">operator</span><span class="o">!=</span><span class="p">(</span><span class="k">const</span><span class="w"> </span><span class="n">linked_list_iterator</span><span class="o">&amp;</span><span class="w"> </span><span class="n">other</span><span class="p">)</span><span class="w"> </span><span class="k">const</span><span class="w"> </span><span class="p">{</span>
<span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="o">!</span><span class="p">(</span><span class="o">*</span><span class="k">this</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">other</span><span class="p">);</span>
<span class="w">    </span><span class="p">}</span>

<span class="k">private</span><span class="o">:</span>
<span class="w">    </span><span class="n">Next</span><span class="w"> </span><span class="n">m_next</span><span class="p">;</span>
<span class="w">    </span><span class="n">T</span><span class="w"> </span><span class="o">*</span><span class="n">m_current</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">nullptr</span><span class="p">;</span>
<span class="p">};</span>
</div></code></pre><h3>Using count_if example</h3><pre><code><div class="highlight"><span></span><span class="kt">int</span><span class="w"> </span><span class="nf">count_addresses</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">family</span><span class="p">)</span><span class="w"> </span><span class="p">{</span>
<span class="w">    </span><span class="k">auto</span><span class="w"> </span><span class="n">deleter</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">[](</span><span class="n">ifaddrs</span><span class="w"> </span><span class="o">*</span><span class="n">ia</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="n">freeifaddrs</span><span class="p">(</span><span class="n">ia</span><span class="p">);</span><span class="w"> </span><span class="p">};</span>
<span class="w">    </span><span class="n">std</span><span class="o">::</span><span class="n">unique_ptr</span><span class="o">&lt;</span><span class="n">ifaddrs</span><span class="p">,</span><span class="w"> </span><span class="k">decltype</span><span class="p">(</span><span class="n">deleter</span><span class="p">)</span><span class="o">&gt;</span><span class="w"> </span><span class="n">result</span><span class="p">;</span>

<span class="w">    </span><span class="p">{</span>
<span class="w">        </span><span class="n">ifaddrs</span><span class="w"> </span><span class="o">*</span><span class="n">temp</span><span class="p">;</span>
<span class="w">        </span><span class="kt">int</span><span class="w"> </span><span class="n">status</span><span class="p">{</span><span class="mi">0</span><span class="p">};</span>
<span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="p">((</span><span class="n">status</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">getifaddrs</span><span class="p">(</span><span class="o">&amp;</span><span class="n">temp</span><span class="p">))</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="mi">0</span><span class="p">)</span>
<span class="w">            </span><span class="k">throw</span><span class="w"> </span><span class="n">error</span><span class="p">{</span><span class="n">gai_strerror</span><span class="p">(</span><span class="n">status</span><span class="p">)};</span>
<span class="w">        </span><span class="n">result</span><span class="p">.</span><span class="n">reset</span><span class="p">(</span><span class="n">temp</span><span class="p">);</span>
<span class="w">    </span><span class="p">}</span>

<span class="w">    </span><span class="c1">// use result</span>
<span class="w">    </span><span class="k">auto</span><span class="w"> </span><span class="n">begin</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">linked_list_iterator</span><span class="o">&lt;</span><span class="n">ifaddrs</span><span class="o">&gt;</span><span class="p">(</span><span class="n">result</span><span class="p">.</span><span class="n">get</span><span class="p">(),</span><span class="w"> </span><span class="p">[](</span><span class="n">ifaddrs</span><span class="w"> </span><span class="o">*</span><span class="n">ia</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="k">return</span><span class="w"> </span><span class="n">ia</span><span class="o">-&gt;</span><span class="n">ifa_next</span><span class="p">;</span><span class="w"> </span><span class="p">});</span>
<span class="w">    </span><span class="k">auto</span><span class="w"> </span><span class="n">end</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">linked_list_iterator</span><span class="o">&lt;</span><span class="n">ifaddrs</span><span class="o">&gt;</span><span class="p">{};</span>

<span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="n">std</span><span class="o">::</span><span class="n">count_if</span><span class="p">(</span><span class="n">begin</span><span class="p">,</span><span class="w"> </span><span class="n">end</span><span class="p">,</span><span class="w"> </span><span class="p">[</span><span class="n">family</span><span class="p">](</span><span class="k">auto</span><span class="w"> </span><span class="o">&amp;</span><span class="n">ia</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="k">return</span><span class="w"> </span><span class="n">ia</span><span class="p">.</span><span class="n">ifa_addr</span><span class="o">-&gt;</span><span class="n">sa_family</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">family</span><span class="p">;</span><span class="w"> </span><span class="p">});</span>
<span class="p">}</span>
</div></code></pre><h2>Complete Demo</h2><p><a href="https://christiantietze.de">Chris Tietze</a> made me realize that wrapping things up in a handle class <code>IfAddrs</code> makes things even nicer!</p><h3>IfAddrs</h3><pre><code><div class="highlight"><span></span><span class="cp">#include</span><span class="w"> </span><span class="cpf">&quot;linked_list_iterator.h&quot;</span>
<span class="cp">#include</span><span class="w"> </span><span class="cpf">&lt;ifaddrs.h&gt;</span>
<span class="cp">#include</span><span class="w"> </span><span class="cpf">&lt;netdb.h&gt;</span>

<span class="k">struct</span><span class="w"> </span><span class="nc">IfAddrs</span><span class="w"> </span><span class="p">{</span>
<span class="w">    </span><span class="k">static</span><span class="w"> </span><span class="k">constexpr</span><span class="w"> </span><span class="k">auto</span><span class="w"> </span><span class="n">deleter</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">[](</span><span class="n">ifaddrs</span><span class="w"> </span><span class="o">*</span><span class="n">ia</span><span class="p">){</span><span class="w"> </span><span class="n">freeifaddrs</span><span class="p">(</span><span class="n">ia</span><span class="p">);</span><span class="w"> </span><span class="p">};</span>

<span class="w">    </span><span class="k">explicit</span><span class="w"> </span><span class="n">IfAddrs</span><span class="p">()</span><span class="w"> </span><span class="o">:</span><span class="w"> </span><span class="n">m_list</span><span class="p">{</span><span class="k">nullptr</span><span class="p">}</span><span class="w"> </span><span class="p">{</span>
<span class="w">        </span><span class="n">ifaddrs</span><span class="w"> </span><span class="o">*</span><span class="n">list</span><span class="p">;</span>
<span class="w">        </span><span class="kt">int</span><span class="w"> </span><span class="n">status</span><span class="p">;</span>
<span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="p">((</span><span class="n">status</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">getifaddrs</span><span class="p">(</span><span class="o">&amp;</span><span class="n">list</span><span class="p">))</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="mi">0</span><span class="p">)</span>
<span class="w">            </span><span class="k">throw</span><span class="w"> </span><span class="n">std</span><span class="o">::</span><span class="n">runtime_error</span><span class="p">{</span><span class="n">gai_strerror</span><span class="p">(</span><span class="n">status</span><span class="p">)};</span>

<span class="w">        </span><span class="n">m_list</span><span class="p">.</span><span class="n">reset</span><span class="p">(</span><span class="n">list</span><span class="p">);</span>
<span class="w">    </span><span class="p">}</span>

<span class="w">    </span><span class="n">linked_list_iterator</span><span class="o">&lt;</span><span class="n">ifaddrs</span><span class="o">&gt;</span><span class="w"> </span><span class="n">begin</span><span class="p">()</span><span class="w"> </span><span class="p">{</span>
<span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="n">linked_list_iterator</span><span class="o">&lt;</span><span class="n">ifaddrs</span><span class="o">&gt;</span><span class="p">(</span><span class="n">m_list</span><span class="p">.</span><span class="n">get</span><span class="p">(),</span><span class="w"> </span><span class="p">[](</span><span class="n">ifaddrs</span><span class="w"> </span><span class="o">*</span><span class="n">ia</span><span class="p">){</span><span class="w"> </span><span class="k">return</span><span class="w"> </span><span class="n">ia</span><span class="o">-&gt;</span><span class="n">ifa_next</span><span class="p">;</span><span class="w"> </span><span class="p">});</span>
<span class="w">    </span><span class="p">}</span>

<span class="w">    </span><span class="n">linked_list_iterator</span><span class="o">&lt;</span><span class="n">ifaddrs</span><span class="o">&gt;</span><span class="w"> </span><span class="n">end</span><span class="p">()</span><span class="w"> </span><span class="p">{</span>
<span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="n">linked_list_iterator</span><span class="o">&lt;</span><span class="n">ifaddrs</span><span class="o">&gt;</span><span class="p">(</span><span class="k">nullptr</span><span class="p">,</span><span class="w"> </span><span class="k">nullptr</span><span class="p">);</span>
<span class="w">    </span><span class="p">}</span>

<span class="k">private</span><span class="o">:</span>
<span class="w">    </span><span class="n">std</span><span class="o">::</span><span class="n">unique_ptr</span><span class="o">&lt;</span><span class="n">ifaddrs</span><span class="p">,</span><span class="w"> </span><span class="k">decltype</span><span class="p">(</span><span class="n">deleter</span><span class="p">)</span><span class="o">&gt;</span><span class="w"> </span><span class="n">m_list</span><span class="p">;</span>
<span class="p">};</span>
</div></code></pre><h3>main</h3><pre><code><div class="highlight"><span></span><span class="k">auto</span><span class="w"> </span><span class="n">main</span><span class="p">()</span><span class="w"> </span><span class="o">-&gt;</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="p">{</span>
<span class="w">    </span><span class="k">const</span><span class="w"> </span><span class="k">auto</span><span class="w"> </span><span class="n">convert</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">[](</span><span class="n">ifaddrs</span><span class="w"> </span><span class="o">&amp;</span><span class="n">ia</span><span class="p">)</span><span class="w"> </span><span class="p">{</span>
<span class="w">        </span><span class="k">switch</span><span class="w"> </span><span class="p">(</span><span class="n">ia</span><span class="p">.</span><span class="n">ifa_addr</span><span class="o">-&gt;</span><span class="n">sa_family</span><span class="p">)</span><span class="w"> </span><span class="p">{</span>
<span class="w">            </span><span class="k">case</span><span class="w"> </span><span class="no">AF_INET</span><span class="p">:</span><span class="w"> </span><span class="p">{</span>
<span class="w">                </span><span class="k">auto</span><span class="w"> </span><span class="n">address</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">reinterpret_cast</span><span class="o">&lt;</span><span class="n">sockaddr_in</span><span class="w"> </span><span class="o">*&gt;</span><span class="p">(</span><span class="n">ia</span><span class="p">.</span><span class="n">ifa_addr</span><span class="p">);</span>
<span class="w">                </span><span class="kt">char</span><span class="w"> </span><span class="n">ip</span><span class="p">[</span><span class="n">INET_ADDRSTRLEN</span><span class="p">];</span>
<span class="w">                </span><span class="n">inet_ntop</span><span class="p">(</span><span class="n">AF_INET</span><span class="p">,</span><span class="w"> </span><span class="o">&amp;</span><span class="p">(</span><span class="n">address</span><span class="o">-&gt;</span><span class="n">sin_addr</span><span class="p">),</span><span class="w"> </span><span class="n">ip</span><span class="p">,</span><span class="w"> </span><span class="n">INET_ADDRSTRLEN</span><span class="p">);</span>
<span class="w">                </span><span class="k">return</span><span class="w"> </span><span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="p">{</span><span class="n">ip</span><span class="p">};</span>
<span class="w">            </span><span class="p">}</span>
<span class="w">            </span><span class="k">case</span><span class="w"> </span><span class="no">AF_INET6</span><span class="p">:</span><span class="w"> </span><span class="p">{</span>
<span class="w">                </span><span class="k">auto</span><span class="w"> </span><span class="n">address</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">reinterpret_cast</span><span class="o">&lt;</span><span class="n">sockaddr_in6</span><span class="w"> </span><span class="o">*&gt;</span><span class="p">(</span><span class="n">ia</span><span class="p">.</span><span class="n">ifa_addr</span><span class="p">);</span>
<span class="w">                </span><span class="kt">char</span><span class="w"> </span><span class="n">ip</span><span class="p">[</span><span class="n">INET6_ADDRSTRLEN</span><span class="p">];</span>
<span class="w">                </span><span class="n">inet_ntop</span><span class="p">(</span><span class="n">AF_INET6</span><span class="p">,</span><span class="w"> </span><span class="o">&amp;</span><span class="p">(</span><span class="n">address</span><span class="o">-&gt;</span><span class="n">sin6_addr</span><span class="p">),</span><span class="w"> </span><span class="n">ip</span><span class="p">,</span><span class="w"> </span><span class="n">INET6_ADDRSTRLEN</span><span class="p">);</span>
<span class="w">                </span><span class="k">return</span><span class="w"> </span><span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="p">{</span><span class="n">ip</span><span class="p">};</span>
<span class="w">            </span><span class="p">}</span>
<span class="w">            </span><span class="k">default</span><span class="o">:</span><span class="w"> </span><span class="p">{</span>
<span class="w">                </span><span class="k">return</span><span class="w"> </span><span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="p">{</span><span class="s">&quot;Unknown&quot;</span><span class="p">};</span>
<span class="w">            </span><span class="p">}</span>
<span class="w">        </span><span class="p">}</span>
<span class="w">    </span><span class="p">};</span>

<span class="w">    </span><span class="k">auto</span><span class="w"> </span><span class="n">ips</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">std</span><span class="o">::</span><span class="n">views</span><span class="o">::</span><span class="n">all</span><span class="p">(</span><span class="n">IfAddrs</span><span class="p">{})</span>
<span class="w">               </span><span class="o">|</span><span class="w"> </span><span class="n">std</span><span class="o">::</span><span class="n">views</span><span class="o">::</span><span class="n">filter</span><span class="p">([](</span><span class="k">const</span><span class="w"> </span><span class="k">auto</span><span class="o">&amp;</span><span class="w"> </span><span class="n">ia</span><span class="p">){</span><span class="w"> </span><span class="k">return</span><span class="w"> </span><span class="n">ia</span><span class="p">.</span><span class="n">ifa_addr</span><span class="o">-&gt;</span><span class="n">sa_family</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">AF_INET6</span><span class="p">;</span><span class="w"> </span><span class="p">})</span>
<span class="w">               </span><span class="o">|</span><span class="w"> </span><span class="n">std</span><span class="o">::</span><span class="n">views</span><span class="o">::</span><span class="n">transform</span><span class="p">([</span><span class="o">&amp;</span><span class="n">convert</span><span class="p">](</span><span class="k">auto</span><span class="o">&amp;</span><span class="w"> </span><span class="n">ia</span><span class="p">){</span><span class="w"> </span><span class="k">return</span><span class="w"> </span><span class="n">convert</span><span class="p">(</span><span class="n">ia</span><span class="p">);</span><span class="w"> </span><span class="p">});</span>

<span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="k">const</span><span class="w"> </span><span class="k">auto</span><span class="o">&amp;</span><span class="w"> </span><span class="n">ip</span><span class="w"> </span><span class="o">:</span><span class="w"> </span><span class="n">ips</span><span class="p">)</span>
<span class="w">        </span><span class="n">std</span><span class="o">::</span><span class="n">cout</span><span class="w"> </span><span class="o">&lt;&lt;</span><span class="w"> </span><span class="n">ip</span><span class="w"> </span><span class="o">&lt;&lt;</span><span class="w"> </span><span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>

<span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="n">EXIT_SUCCESS</span><span class="p">;</span>
<span class="p">}</span>
</div></code></pre>]]></content:encoded></item><item><guid isPermaLink="true">https://oliver-epper.de/posts/autostart-in-macos</guid><title>Autostart in macOS</title><description>The modern way</description><link>https://oliver-epper.de/posts/autostart-in-macos</link><pubDate>Fri, 6 Oct 2023 09:41:00 +0200</pubDate><content:encoded><![CDATA[<h2>Registering your app as a LoginItem</h2><p>If you search on how to register your app programmatically as a LoginItem you find a plethora of outdated information. So I thought it might be helpful to share this.</p><p>Basically you can register your app through <code>SMAppService.mainApp.register()</code> and unregister it with <code>SMAppService.mainApp.unregister()</code>. Checking what is currently configured is possible through <code>SMAppService.mainApp.status</code>. The thing that bugged me is: I found no way to get a notification of some kind if someone deletes your app from the LoginItems via the Settings app. I tried KVO without success. Thanks <a href="https://davedelong.com">Dave</a> for confirming.</p><p>Say you want to show a toggle for the autostart feature in your app that might easily get out of sync with what is really configured in your system (if the LoginItem gets deleted via the Settings app). So we need to work around that.</p><p>The best idea so far is to re-check the current state when the mouse re-enters our window. Thanks <a href="https://kilian.io">Kilian</a> for the idea!</p><h2>Autostart Model</h2><pre><code><div class="highlight"><span></span><span class="kd">import</span> <span class="nc">Combine</span>
<span class="kd">import</span> <span class="nc">ServiceManagement</span>

<span class="kd">extension</span> <span class="nc">String</span><span class="p">:</span> <span class="n">LocalizedError</span> <span class="p">{</span>
    <span class="kd">public</span> <span class="kd">var</span> <span class="nv">errorDescription</span><span class="p">:</span> <span class="nb">String</span><span class="p">?</span> <span class="p">{</span>
        <span class="k">return</span> <span class="kc">self</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kr">final</span> <span class="kd">class</span> <span class="nc">Autostart</span><span class="p">:</span> <span class="n">ObservableObject</span> <span class="p">{</span>
    <span class="kd">enum</span> <span class="nc">State</span><span class="p">:</span> <span class="nb">Equatable</span> <span class="p">{</span>
        <span class="k">case</span> <span class="n">unknown</span>
        <span class="k">case</span> <span class="n">pending</span>
        <span class="k">case</span> <span class="n">autostart</span><span class="p">(</span><span class="nb">Bool</span><span class="p">)</span>

        <span class="kd">static</span> <span class="kd">func</span> <span class="p">==</span> <span class="p">(</span><span class="n">lhs</span><span class="p">:</span> <span class="n">State</span><span class="p">,</span> <span class="n">rhs</span><span class="p">:</span> <span class="n">State</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="nb">Bool</span> <span class="p">{</span>
            <span class="k">switch</span> <span class="p">(</span><span class="n">lhs</span><span class="p">,</span> <span class="n">rhs</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">case</span> <span class="p">(.</span><span class="n">unknown</span><span class="p">,</span> <span class="p">.</span><span class="n">unknown</span><span class="p">),</span> <span class="p">(.</span><span class="n">pending</span><span class="p">,</span> <span class="p">.</span><span class="n">pending</span><span class="p">):</span>
                <span class="k">return</span> <span class="kc">true</span>
            <span class="k">case</span> <span class="kd">let</span> <span class="p">(.</span><span class="n">autostart</span><span class="p">(</span><span class="n">lhsValue</span><span class="p">),</span> <span class="p">.</span><span class="n">autostart</span><span class="p">(</span><span class="n">rhsValue</span><span class="p">)):</span>
                <span class="k">return</span> <span class="n">lhsValue</span> <span class="p">==</span> <span class="n">rhsValue</span>
            <span class="k">default</span><span class="p">:</span>
                <span class="k">return</span> <span class="kc">false</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="p">@</span><span class="n">Published</span> <span class="kd">var</span> <span class="nv">hasAutostart</span><span class="p">:</span> <span class="n">State</span> <span class="p">=</span> <span class="p">.</span><span class="n">unknown</span>
    <span class="kd">private</span> <span class="kd">var</span> <span class="nv">cancellables</span> <span class="p">=</span> <span class="n">Set</span><span class="p">&lt;</span><span class="n">AnyCancellable</span><span class="p">&gt;()</span>

    <span class="kd">init</span><span class="p">(</span><span class="n">useTimer</span><span class="p">:</span> <span class="nb">Bool</span> <span class="p">=</span> <span class="kc">false</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">check</span><span class="p">()</span>
        <span class="k">if</span> <span class="n">useTimer</span> <span class="p">{</span>
            <span class="n">Timer</span><span class="p">.</span><span class="n">publish</span><span class="p">(</span><span class="n">every</span><span class="p">:</span> <span class="mf">1.0</span><span class="p">,</span> <span class="n">on</span><span class="p">:</span> <span class="p">.</span><span class="n">current</span><span class="p">,</span> <span class="k">in</span><span class="p">:</span> <span class="p">.</span><span class="n">common</span><span class="p">).</span><span class="n">autoconnect</span><span class="p">().</span><span class="n">sink</span> <span class="p">{</span> <span class="p">[</span><span class="kr">weak</span> <span class="kc">self</span><span class="p">]</span> <span class="kc">_</span> <span class="k">in</span>
                <span class="kc">self</span><span class="p">?.</span><span class="n">check</span><span class="p">()</span>
            <span class="p">}.</span><span class="n">store</span><span class="p">(</span><span class="k">in</span><span class="p">:</span> <span class="p">&amp;</span><span class="n">cancellables</span><span class="p">)</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="kd">func</span> <span class="nf">check</span><span class="p">()</span> <span class="p">{</span>
        <span class="n">hasAutostart</span> <span class="p">=</span> <span class="p">.</span><span class="n">autostart</span><span class="p">(</span><span class="n">SMAppService</span><span class="p">.</span><span class="n">mainApp</span><span class="p">.</span><span class="n">status</span> <span class="p">==</span> <span class="p">.</span><span class="n">enabled</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="kd">func</span> <span class="nf">request</span><span class="p">(</span><span class="n">autostart</span><span class="p">:</span> <span class="nb">Bool</span><span class="p">)</span> <span class="kr">throws</span> <span class="p">{</span>
        <span class="n">hasAutostart</span> <span class="p">=</span> <span class="p">.</span><span class="n">pending</span>
        <span class="k">if</span> <span class="n">autostart</span> <span class="p">{</span>
<span class="cp">#if</span> <span class="cp">DEBUG</span>
            <span class="k">if</span> <span class="nb">Bool</span><span class="p">.</span><span class="n">random</span><span class="p">()</span> <span class="p">{</span>
                <span class="k">throw</span> <span class="s">&quot;Your random error that no one saw comming...&quot;</span>
            <span class="p">}</span>
<span class="cp">#endif</span>
            <span class="k">try</span> <span class="n">SMAppService</span><span class="p">.</span><span class="n">mainApp</span><span class="p">.</span><span class="n">register</span><span class="p">()</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="k">try</span> <span class="n">SMAppService</span><span class="p">.</span><span class="n">mainApp</span><span class="p">.</span><span class="n">unregister</span><span class="p">()</span>
        <span class="p">}</span>
        <span class="n">hasAutostart</span> <span class="p">=</span> <span class="p">.</span><span class="n">autostart</span><span class="p">(</span><span class="n">autostart</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</div></code></pre><h2>A simple view</h2><pre><code><div class="highlight"><span></span><span class="kd">import</span> <span class="nc">SwiftUI</span>

<span class="kd">struct</span> <span class="nc">ContentView</span><span class="p">:</span> <span class="n">View</span> <span class="p">{</span>
    <span class="p">@</span><span class="n">StateObject</span> <span class="kd">var</span> <span class="nv">autostart</span> <span class="p">=</span> <span class="n">Autostart</span><span class="p">(</span><span class="n">useTimer</span><span class="p">:</span> <span class="kc">true</span><span class="p">)</span>
    <span class="p">@</span><span class="n">State</span> <span class="kd">private</span> <span class="kd">var</span> <span class="nv">errorMsg</span><span class="p">:</span> <span class="nb">String</span><span class="p">?</span>

    <span class="kd">var</span> <span class="nv">body</span><span class="p">:</span> <span class="n">some</span> <span class="n">View</span> <span class="p">{</span>
        <span class="kd">let</span> <span class="nv">projection</span> <span class="p">=</span> <span class="n">Binding</span><span class="p">&lt;</span><span class="nb">Bool</span><span class="p">&gt;</span> <span class="p">{</span>
            <span class="k">if</span> <span class="k">case</span> <span class="kd">let</span> <span class="p">.</span><span class="n">autostart</span><span class="p">(</span><span class="n">value</span><span class="p">)</span> <span class="p">=</span> <span class="n">autostart</span><span class="p">.</span><span class="n">hasAutostart</span> <span class="p">{</span>
                <span class="k">return</span> <span class="n">value</span>
            <span class="p">}</span>
            <span class="k">return</span> <span class="kc">false</span>
        <span class="p">}</span> <span class="kr">set</span><span class="p">:</span> <span class="p">{</span> <span class="n">wantsAutostart</span> <span class="k">in</span>
            <span class="k">do</span> <span class="p">{</span>
                <span class="k">try</span> <span class="n">autostart</span><span class="p">.</span><span class="n">request</span><span class="p">(</span><span class="n">autostart</span><span class="p">:</span> <span class="n">wantsAutostart</span><span class="p">)</span>
                <span class="n">errorMsg</span> <span class="p">=</span> <span class="kc">nil</span>
            <span class="p">}</span> <span class="k">catch</span> <span class="p">{</span>
                <span class="n">errorMsg</span> <span class="p">=</span> <span class="n">error</span><span class="p">.</span><span class="n">localizedDescription</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="k">return</span> <span class="n">ZStack</span> <span class="p">{</span>
            <span class="n">Color</span><span class="p">.</span><span class="n">clear</span><span class="p">.</span><span class="n">onHover</span> <span class="p">{</span> <span class="kc">_</span> <span class="k">in</span>
                <span class="n">autostart</span><span class="p">.</span><span class="n">check</span><span class="p">()</span>
            <span class="p">}</span>
            <span class="n">VStack</span> <span class="p">{</span>
                <span class="k">if</span> <span class="kd">let</span> <span class="nv">errorMsg</span> <span class="p">{</span>
                    <span class="n">Text</span><span class="p">(</span><span class="n">verbatim</span><span class="p">:</span> <span class="n">errorMsg</span><span class="p">).</span><span class="n">foregroundStyle</span><span class="p">(.</span><span class="n">red</span><span class="p">)</span>
                <span class="p">}</span>
                <span class="n">Toggle</span><span class="p">(</span><span class="n">isOn</span><span class="p">:</span> <span class="n">projection</span><span class="p">)</span> <span class="p">{</span>
                    <span class="n">Text</span><span class="p">(</span><span class="n">verbatim</span><span class="p">:</span> <span class="s">&quot;wants Autostart&quot;</span><span class="p">)</span>
                <span class="p">}</span>
                <span class="p">.</span><span class="n">toggleStyle</span><span class="p">(</span><span class="n">SwitchToggleStyle</span><span class="p">())</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</div></code></pre>]]></content:encoded></item><item><guid isPermaLink="true">https://oliver-epper.de/posts/low-level-etude-one-hello-worlds-part3</guid><title>Low Level Etude One – Hello Worlds (Part 3)</title><description>Connect a few dots</description><link>https://oliver-epper.de/posts/low-level-etude-one-hello-worlds-part3</link><pubDate>Thu, 4 Aug 2022 09:41:00 +0200</pubDate><content:encoded><![CDATA[<h2>Hello World - bare metal</h2><p><a href="https://oliver-epper.de/posts/low-level-etude-one-hello-worlds-part2/">Part 2</a></p><p>To finish this first etude lets demo one more Hello World program. There are many options, but I stumbled upon another great resource on the internet that's worth mentioning: The <a href="https://wiki.osdev.org/Main_Page">OSDev.org Wiki</a>. They have a wonderful Hello World example here: <a href="https://wiki.osdev.org/QEMU_AArch64_Virt_Bare_Bones">QEMU AArch64 Virt Bare Bones</a>.</p><p>They do the following:</p><pre><code><div class="highlight"><span></span><span class="na">.globl</span><span class="w">            </span><span class="no">_start</span>

<span class="nl">_start:</span>
<span class="w">                  </span><span class="nf">ldr</span><span class="w"> </span><span class="no">x30</span><span class="p">,</span><span class="w"> </span><span class="err">=</span><span class="no">stack_top</span>
<span class="w">                  </span><span class="nf">mov</span><span class="w"> </span><span class="no">sp</span><span class="p">,</span><span class="w"> </span><span class="no">x30</span>
<span class="w">                  </span><span class="nf">bl</span><span class="w"> </span><span class="no">kmain</span>
<span class="w">                  </span><span class="nf">b</span><span class="w"> </span><span class="p">.</span>
</div></code></pre><p>This is the boot code. It basically sets up the stack and jumps into the <code>kmain</code> function. If that returns the last line will loop forever.</p><pre><code><div class="highlight"><span></span><span class="cp">#include</span><span class="w"> </span><span class="cpf">&lt;stdint.h&gt;</span>

<span class="k">volatile</span><span class="w"> </span><span class="kt">uint8_t</span><span class="w"> </span><span class="o">*</span><span class="n">uart</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="kt">uint8_t</span><span class="w"> </span><span class="o">*</span><span class="p">)</span><span class="w"> </span><span class="mh">0x09000000</span><span class="p">;</span>

<span class="kt">void</span><span class="w"> </span><span class="nf">putchar</span><span class="p">(</span><span class="kt">char</span><span class="w"> </span><span class="n">c</span><span class="p">)</span><span class="w"> </span><span class="p">{</span>
<span class="w">      </span><span class="o">*</span><span class="n">uart</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">c</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">void</span><span class="w"> </span><span class="nf">print</span><span class="p">(</span><span class="k">const</span><span class="w"> </span><span class="kt">char</span><span class="w"> </span><span class="o">*</span><span class="n">s</span><span class="p">)</span><span class="w"> </span><span class="p">{</span>
<span class="w">      </span><span class="k">while</span><span class="w"> </span><span class="p">(</span><span class="o">*</span><span class="n">s</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="sc">&#39;\0&#39;</span><span class="p">)</span><span class="w"> </span><span class="p">{</span>
<span class="w">            </span><span class="n">putchar</span><span class="p">(</span><span class="o">*</span><span class="n">s</span><span class="p">);</span>
<span class="w">            </span><span class="n">s</span><span class="o">++</span><span class="p">;</span>
<span class="w">      </span><span class="p">}</span>
<span class="p">}</span>

<span class="kt">void</span><span class="w"> </span><span class="nf">kmain</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="w"> </span><span class="p">{</span>
<span class="w">      </span><span class="n">print</span><span class="p">(</span><span class="s">&quot;Hello World!</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
<span class="p">}</span>
</div></code></pre><p>There's your <em>kernel</em>. Since we are no longer in a hosted environment we need to build a <code>print</code> function ourselfs. Don't forget the volatile keyword if you talk to memory mapped hardware resources, otherwise the compiler will optimize away every assignment but the last.</p><pre><code><div class="highlight"><span></span><span class="n">ENTRY</span><span class="p">(</span><span class="n">_start</span><span class="p">)</span>
<span class="n">SECTIONS</span> <span class="p">{</span>
      <span class="p">.</span> <span class="p">=</span> <span class="mh">0x40000000</span><span class="p">;</span>
      <span class="p">.</span><span class="n">startup</span> <span class="p">.</span> <span class="p">:</span> <span class="p">{</span> <span class="n">boot</span><span class="p">.</span><span class="n">o</span><span class="p">(.</span><span class="n">text</span><span class="p">)</span> <span class="p">}</span>
      <span class="p">.</span><span class="n">text</span> <span class="p">:</span> <span class="p">{</span> <span class="o">*</span><span class="p">(.</span><span class="n">text</span><span class="p">)</span> <span class="p">}</span>
      <span class="p">.</span><span class="n">data</span> <span class="p">:</span> <span class="p">{</span> <span class="o">*</span><span class="p">(.</span><span class="n">data</span><span class="p">)</span> <span class="p">}</span>
      <span class="p">.</span><span class="n">bss</span> <span class="p">:</span> <span class="p">{</span> <span class="o">*</span><span class="p">(.</span><span class="n">bss</span> <span class="n">COMMON</span><span class="p">)</span> <span class="p">}</span>
      <span class="p">.</span> <span class="p">=</span> <span class="n">ALIGN</span><span class="p">(</span><span class="mi">8</span><span class="p">);</span>
      <span class="p">.</span> <span class="o">+=</span> <span class="mh">0x1000</span><span class="p">;</span> <span class="cm">/* 4kb of stack memory */</span>
      <span class="n">stack_top</span> <span class="p">=</span> <span class="p">.;</span>
<span class="p">}</span>
</div></code></pre><p>This is the linker configuration that helps produce the <code>ELF</code> file that we need. You can install the required compiler and tools via <code>brew install aarch-elf-gcc qemu</code>.</p><p>Build the kernel via:</p><pre><code><div class="highlight"><span></span>aarch64-elf-as<span class="w"> </span>-o<span class="w"> </span>boot.o<span class="w"> </span>boot.s<span class="w">                                   </span>
aarch64-elf-gcc<span class="w"> </span>-ffreestanding<span class="w"> </span>-c<span class="w"> </span>kernel.c<span class="w"> </span>-o<span class="w"> </span>kernel.o<span class="w">            </span>
aarch64-elf-ld<span class="w"> </span>-nostdlib<span class="w"> </span>-Tlinker.ld<span class="w"> </span>boot.o<span class="w"> </span>kernel.o<span class="w"> </span>-o<span class="w"> </span>kernel.elf
</div></code></pre><p>And run it via:</p><pre><code><div class="highlight"><span></span>qemu-system-aarch64<span class="w"> </span>-machine<span class="w"> </span>virt<span class="w"> </span>-cpu<span class="w"> </span>cortex-a57<span class="w"> </span>-kernel<span class="w"> </span>kernel.elf<span class="w"> </span>-nographic
</div></code></pre><p>The OS Dev wiki examples ends here. If you tried it you have the qemu process running in an endless loop, now (<code>b .</code>). Let's try to fix that.</p><p>I have no clue (yet) how a real OS performs shutdown or reboot but we can use the semihosting interface <a href="https://developer.arm.com/documentation/dui0471/g/Bgbjjgij">What is semihosting?</a> of the ARM CPU to tell qemu that our software has finished execution. <a href="https://stackoverflow.com/questions/31990487/how-to-cleanly-exit-qemu-after-executing-bare-metal-program-without-user-interve/49930361#49930361">How to cleanly exit QEMU after executing bare metal program without user intervention?</a></p><pre><code><div class="highlight"><span></span><span class="na">.globl</span><span class="w">            </span><span class="no">_start</span>


<span class="nl">shutdown:</span>
<span class="w">                  </span><span class="nf">mov</span><span class="w"> </span><span class="no">x0</span><span class="p">,</span><span class="w"> </span><span class="mi">#0</span><span class="no">x18</span>
<span class="w">                  </span><span class="nf">hlt</span><span class="w"> </span><span class="mi">0xf000</span>

<span class="nl">_start:</span>
<span class="w">                  </span><span class="nf">ldr</span><span class="w"> </span><span class="no">x30</span><span class="p">,</span><span class="w"> </span><span class="err">=</span><span class="no">stack_top</span>
<span class="w">                  </span><span class="nf">mov</span><span class="w"> </span><span class="no">sp</span><span class="p">,</span><span class="w"> </span><span class="no">x30</span>
<span class="w">                  </span><span class="nf">bl</span><span class="w"> </span><span class="no">kmain</span>
<span class="w">                  </span><span class="nf">b</span><span class="w"> </span><span class="no">shutdown</span>
</div></code></pre><p>If I understand this right, the above makes qemu call SYS_exit through the semihosting interface on our behalf. Now we need to add the <code>-semihosting</code> option to qemu and indeed the process returns.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://oliver-epper.de/posts/low-level-etude-one-hello-worlds-part2</guid><title>Low Level Etude One – Hello Worlds (Part 2)</title><description>Connect a few dots</description><link>https://oliver-epper.de/posts/low-level-etude-one-hello-worlds-part2</link><pubDate>Sun, 31 Jul 2022 09:41:00 +0200</pubDate><content:encoded><![CDATA[<h2>Hello World - puts or printf?</h2><p><a href="https://oliver-epper.de/posts/low-level-etude-one-hello-worlds/">Part 1</a></p><h3>bl - branch with link</h3><p>Let's get back on track and learn about <code>bl</code>. Consider the following simple program:</p><pre><code><div class="highlight"><span></span><span class="na">.globl</span><span class="w">      </span><span class="no">_start</span>
<span class="na">.p2align</span><span class="w">    </span><span class="mi">2</span>

<span class="nl">say_hello:</span>
<span class="w">            </span><span class="nf">mov</span><span class="w"> </span><span class="no">x0</span><span class="p">,</span><span class="w"> </span><span class="mi">#1</span>
<span class="w">            </span><span class="nf">adrp</span><span class="w"> </span><span class="no">x1</span><span class="p">,</span><span class="w"> </span><span class="no">msg@PAGE</span>
<span class="w">            </span><span class="nf">add</span><span class="w"> </span><span class="no">x1</span><span class="p">,</span><span class="w"> </span><span class="no">x1</span><span class="p">,</span><span class="w"> </span><span class="no">msg@PAGEOFF</span>
<span class="w">            </span><span class="nf">adrp</span><span class="w"> </span><span class="no">x2</span><span class="p">,</span><span class="w"> </span><span class="no">msg_sz@PAGE</span>
<span class="w">            </span><span class="nf">add</span><span class="w"> </span><span class="no">x2</span><span class="p">,</span><span class="w"> </span><span class="no">x2</span><span class="p">,</span><span class="w"> </span><span class="no">msg_sz@PAGEOFF</span>
<span class="w">            </span><span class="nf">ldr</span><span class="w"> </span><span class="no">x2</span><span class="p">,</span><span class="w"> </span><span class="p">[</span><span class="no">x2</span><span class="p">]</span>
<span class="w">            </span><span class="nf">mov</span><span class="w"> </span><span class="no">x16</span><span class="p">,</span><span class="w"> </span><span class="mi">#4</span>
<span class="w">            </span><span class="nf">svc</span><span class="w"> </span><span class="mi">0x80</span>

<span class="nl">_start:</span>
<span class="w">            </span><span class="nf">b</span><span class="w"> </span><span class="no">say_hello</span>
<span class="w">            </span><span class="nf">mov</span><span class="w"> </span><span class="no">x16</span><span class="p">,</span><span class="w"> </span><span class="mi">#1</span>
<span class="w">            </span><span class="nf">svc</span><span class="w"> </span><span class="mi">0x80</span>


<span class="na">.data</span>
<span class="nl">msg:</span><span class="w">        </span><span class="na">.asciz</span><span class="w">  </span><span class="s">&quot;Hello World!&quot;</span>
<span class="nl">msg_sz:</span><span class="w">     </span><span class="na">.word</span><span class="w">   </span><span class="no">.-msg-1</span>
</div></code></pre><p>If you build and start this it will print <code>Hello World</code> forever. The <code>b - branch</code> instruction will jump to <code>say_hello</code> and continue execution after <code>say_hello</code> with the next line which is the same branch instruction, thus repeating forever.</p><p>So we need to change <code>b</code> to <code>bl - branch with link</code> and at the end of the <code>say_hello</code> block we add a <code>ret</code> instruction. Now the execution will continue right after the <code>bl say_hello</code> instruction. This happens because <code>bl</code> saves the address of the next instruction into the <code>lr</code> register and <code>ret</code> jumps to the address saved in the <code>lr</code> register.</p><p><strong>But!</strong> What if we override the <code>lr</code> registers content with another <code>bl</code> instruction? Let's add the following:</p><pre><code><div class="highlight"><span></span><span class="na">.globl</span><span class="w">      </span><span class="no">_start</span>
<span class="na">.p2align</span><span class="w">    </span><span class="mi">2</span>

<span class="nl">print_newline:</span>
<span class="w">            </span><span class="nf">mov</span><span class="w"> </span><span class="no">x0</span><span class="p">,</span><span class="w"> </span><span class="mi">#1</span>
<span class="w">            </span><span class="nf">adrp</span><span class="w"> </span><span class="no">x1</span><span class="p">,</span><span class="w"> </span><span class="no">newline@PAGE</span>
<span class="w">            </span><span class="nf">add</span><span class="w"> </span><span class="no">x1</span><span class="p">,</span><span class="w"> </span><span class="no">x1</span><span class="p">,</span><span class="w"> </span><span class="no">newline@PAGEOFF</span>
<span class="w">            </span><span class="nf">mov</span><span class="w"> </span><span class="no">x2</span><span class="p">,</span><span class="w"> </span><span class="mi">#1</span>
<span class="w">            </span><span class="nf">mov</span><span class="w"> </span><span class="no">x16</span><span class="p">,</span><span class="w"> </span><span class="mi">#4</span>
<span class="w">            </span><span class="nf">svc</span><span class="w"> </span><span class="mi">0x80</span>
<span class="w">            </span><span class="nf">ret</span>

<span class="nl">say_hello:</span>
<span class="w">            </span><span class="nf">mov</span><span class="w"> </span><span class="no">x0</span><span class="p">,</span><span class="w"> </span><span class="mi">#1</span>
<span class="w">            </span><span class="nf">adrp</span><span class="w"> </span><span class="no">x1</span><span class="p">,</span><span class="w"> </span><span class="no">msg@PAGE</span>
<span class="w">            </span><span class="nf">add</span><span class="w"> </span><span class="no">x1</span><span class="p">,</span><span class="w"> </span><span class="no">x1</span><span class="p">,</span><span class="w"> </span><span class="no">msg@PAGEOFF</span>
<span class="w">            </span><span class="nf">adrp</span><span class="w"> </span><span class="no">x2</span><span class="p">,</span><span class="w"> </span><span class="no">msg_sz@PAGE</span>
<span class="w">            </span><span class="nf">add</span><span class="w"> </span><span class="no">x2</span><span class="p">,</span><span class="w"> </span><span class="no">x2</span><span class="p">,</span><span class="w"> </span><span class="no">msg_sz@PAGEOFF</span>
<span class="w">            </span><span class="nf">ldr</span><span class="w"> </span><span class="no">x2</span><span class="p">,</span><span class="w"> </span><span class="p">[</span><span class="no">x2</span><span class="p">]</span>
<span class="w">            </span><span class="nf">mov</span><span class="w"> </span><span class="no">x16</span><span class="p">,</span><span class="w"> </span><span class="mi">#4</span>
<span class="w">            </span><span class="nf">svc</span><span class="w"> </span><span class="mi">0x80</span>
<span class="w">            </span><span class="nf">bl</span><span class="w"> </span><span class="no">print_newline</span>
<span class="w">            </span><span class="nf">ret</span>

<span class="nl">_start:</span>
<span class="w">            </span><span class="nf">bl</span><span class="w"> </span><span class="no">say_hello</span>
<span class="w">            </span><span class="nf">mov</span><span class="w"> </span><span class="no">x16</span><span class="p">,</span><span class="w"> </span><span class="mi">#1</span>
<span class="w">            </span><span class="nf">svc</span><span class="w"> </span><span class="mi">0x80</span>


<span class="na">.data</span>
<span class="nl">msg:</span><span class="w">        </span><span class="na">.asciz</span><span class="w">  </span><span class="s">&quot;Hello World!&quot;</span>
<span class="nl">msg_sz:</span><span class="w">     </span><span class="na">.word</span><span class="w">   </span><span class="no">.-msg-1</span>
<span class="na">.align</span><span class="w"> </span><span class="mi">4</span>
<span class="nl">newline:</span><span class="w">    </span><span class="na">.asciz</span><span class="w">  </span><span class="s">&quot;\n&quot;</span>
</div></code></pre><p>Can you already see the problem? With <code>bl print_newline</code> we save another address to the <code>lr</code> register and overwrite what was already saved. So once we call <code>ret</code> from <code>print_newline</code> we'll fall on the <code>ret</code> instruction at the end of <code>say_hello</code> which is another <code>ret</code> statement that will jump to that very location, again. So we're in an endless loop.</p><p>The easy fix is to just save the content of the <code>lr</code> register before the <code>bl</code> instruction and restore if before the <code>ret</code> instruction:</p><pre><code><div class="highlight"><span></span><span class="nl">say_hello:</span>
<span class="w">            </span><span class="nf">mov</span><span class="w"> </span><span class="no">x0</span><span class="p">,</span><span class="w"> </span><span class="mi">#1</span>
<span class="w">            </span><span class="nf">adrp</span><span class="w"> </span><span class="no">x1</span><span class="p">,</span><span class="w"> </span><span class="no">msg@PAGE</span>
<span class="w">            </span><span class="nf">add</span><span class="w"> </span><span class="no">x1</span><span class="p">,</span><span class="w"> </span><span class="no">x1</span><span class="p">,</span><span class="w"> </span><span class="no">msg@PAGEOFF</span>
<span class="w">            </span><span class="nf">adrp</span><span class="w"> </span><span class="no">x2</span><span class="p">,</span><span class="w"> </span><span class="no">msg_sz@PAGE</span>
<span class="w">            </span><span class="nf">add</span><span class="w"> </span><span class="no">x2</span><span class="p">,</span><span class="w"> </span><span class="no">x2</span><span class="p">,</span><span class="w"> </span><span class="no">msg_sz@PAGEOFF</span>
<span class="w">            </span><span class="nf">ldr</span><span class="w"> </span><span class="no">x2</span><span class="p">,</span><span class="w"> </span><span class="p">[</span><span class="no">x2</span><span class="p">]</span>
<span class="w">            </span><span class="nf">mov</span><span class="w"> </span><span class="no">x16</span><span class="p">,</span><span class="w"> </span><span class="mi">#4</span>
<span class="w">            </span><span class="nf">svc</span><span class="w"> </span><span class="mi">0x80</span>
<span class="w">            </span><span class="nf">mov</span><span class="w"> </span><span class="no">x3</span><span class="p">,</span><span class="w"> </span><span class="no">lr</span>
<span class="w">            </span><span class="nf">bl</span><span class="w"> </span><span class="no">print_newline</span>
<span class="w">            </span><span class="nf">mov</span><span class="w"> </span><span class="no">lr</span><span class="p">,</span><span class="w"> </span><span class="no">x3</span>
<span class="w">            </span><span class="nf">ret</span>
</div></code></pre><p>Beware that this will only work if the code that we jump into will not fiddle with the <code>x3</code> register that we used to save the content of the <code>lr</code> register.</p><h3>Function call convention</h3><p>So what is the right way to make a proper function call in arm64 assembler? <a href="https://books.apple.com/de/book/programming-with-64-bit-arm-assembly-language/id1512321883">Stephens Book</a> has a nice summary:</p><p><strong>For the calling routine:</strong></p><ul><li>Save registers <code>x0 - x18</code> if you use them.</li><li>Move the first eight parameters into the registers <code>x0 - x7</code>. <em>Functions with varadic parameters might be handled differently, we'll come to that</em></li><li>Push additional parameters on the stack.</li><li>Use <code>bl</code> to call the function.</li><li>Evalute the return code in <code>x0</code>.</li><li>Restore <code>x0 - x18</code>, if needed.</li></ul><p><strong>For the called function:</strong></p><ul><li>Push <code>lr</code> and <code>x19 - x30</code> onto the stack if used in the routine.</li><li>Do the work.</li><li>Put return code in <code>x0</code></li><li>Pop <code>lr</code> and <code>x19 - x30</code> if pushed in step 1.</li><li>Use <code>ret</code> instruction.</li></ul><p>So that's no quite what we have been doing. Let's double check what clang did for us, again:</p><pre><code><div class="highlight"><span></span><span class="nl">.LC0:</span>
<span class="w">        </span><span class="na">.string</span><span class="w"> </span><span class="s">&quot;Hello World!&quot;</span>
<span class="nl">main:</span>
<span class="w">        </span><span class="nf">stp</span><span class="w">     </span><span class="no">x29</span><span class="p">,</span><span class="w"> </span><span class="no">x30</span><span class="p">,</span><span class="w"> </span><span class="p">[</span><span class="no">sp</span><span class="p">,</span><span class="w"> </span><span class="mi">-16</span><span class="p">]!</span>
<span class="w">        </span><span class="nf">mov</span><span class="w">     </span><span class="no">x29</span><span class="p">,</span><span class="w"> </span><span class="no">sp</span>
<span class="w">        </span><span class="nf">adrp</span><span class="w">    </span><span class="no">x0</span><span class="p">,</span><span class="w"> </span><span class="no">.LC0</span>
<span class="w">        </span><span class="nf">add</span><span class="w">     </span><span class="no">x0</span><span class="p">,</span><span class="w"> </span><span class="no">x0</span><span class="p">,</span><span class="w"> </span><span class="p">:</span><span class="no">lo12</span><span class="p">:.</span><span class="no">LC0</span>
<span class="w">        </span><span class="nf">bl</span><span class="w">      </span><span class="no">puts</span>
<span class="w">        </span><span class="nf">ldp</span><span class="w">     </span><span class="no">x29</span><span class="p">,</span><span class="w"> </span><span class="no">x30</span><span class="p">,</span><span class="w"> </span><span class="p">[</span><span class="no">sp</span><span class="p">],</span><span class="w"> </span><span class="mi">16</span>
<span class="w">        </span><span class="nf">ret</span>
</div></code></pre><p>The first line stores a pair (<em>st</em> ore <em>p</em> air) of registers on the stack after subtracting 16 from <code>sp</code>. <code>sp</code> is the stack pointer that holds the currect position of the stack. Since the stack grows in negative direction subtracting 16 makes room to save the contents of two registers.</p><p>Let's check what the two registers are. Start <code>lldb two</code> and enter <code>b start</code> and <code>r</code>. Now type <code>re r</code>.</p><pre><code><div class="highlight"><span></span><span class="n">General</span> <span class="n">Purpose</span> <span class="n">Registers</span><span class="p">:</span>
        <span class="n">x0</span> <span class="p">=</span> <span class="mh">0x0000000000000001</span>
        <span class="n">x1</span> <span class="p">=</span> <span class="mh">0x000000016fdff618</span>
        <span class="n">x2</span> <span class="p">=</span> <span class="mh">0x000000016fdff628</span>
        <span class="n">x3</span> <span class="p">=</span> <span class="mh">0x000000016fdff778</span>
        <span class="p">[...]</span>
       <span class="n">x27</span> <span class="p">=</span> <span class="mh">0x0000000000000000</span>
       <span class="n">x28</span> <span class="p">=</span> <span class="mh">0x0000000000000000</span>
        <span class="n">fp</span> <span class="p">=</span> <span class="mh">0x000000016fdff5f0</span>
        <span class="n">lr</span> <span class="p">=</span> <span class="mh">0x000000010000d08c</span>  <span class="n">dyld</span><span class="p">`</span><span class="n">start</span> <span class="o">+</span> <span class="mi">520</span>
        <span class="n">sp</span> <span class="p">=</span> <span class="mh">0x000000016fdff4b0</span>
        <span class="n">pc</span> <span class="p">=</span> <span class="mh">0x0000000100003f8c</span>  <span class="n">zero</span><span class="p">`</span><span class="n">start</span>
      <span class="n">cpsr</span> <span class="p">=</span> <span class="mh">0x60001000</span>
</div></code></pre><p>So <code>x29</code> is the frame pointer and <code>x30</code> is the link register. Let's explore this with a minimal sample program:</p><pre><code><div class="highlight"><span></span><span class="na">.globl</span><span class="w">      </span><span class="no">_start</span>
<span class="na">.p2align</span><span class="w">    </span><span class="mi">2</span>


<span class="nl">_start:</span>
<span class="w">            </span><span class="nf">stp</span><span class="w"> </span><span class="no">fp</span><span class="p">,</span><span class="w"> </span><span class="no">lr</span><span class="p">,</span><span class="w"> </span><span class="p">[</span><span class="no">sp</span><span class="p">,</span><span class="w"> </span><span class="mi">-16</span><span class="p">]!</span>
<span class="w">            </span><span class="nf">mov</span><span class="w"> </span><span class="no">fp</span><span class="p">,</span><span class="w"> </span><span class="no">sp</span>

<span class="w">            </span><span class="c1">; work</span>

<span class="w">            </span><span class="nf">ldp</span><span class="w"> </span><span class="no">fp</span><span class="p">,</span><span class="w"> </span><span class="no">lr</span><span class="p">,</span><span class="w"> </span><span class="p">[</span><span class="no">sp</span><span class="p">],</span><span class="w"> </span><span class="mi">16</span>
<span class="w">            </span><span class="nf">ret</span>
</div></code></pre><p>Build the program and start it in the debugger breaking on start. Let's explore the stack:</p><pre><code><div class="highlight"><span></span><span class="p">(</span><span class="n">lldb</span><span class="p">)</span> <span class="n">re</span> <span class="n">r</span> <span class="n">sp</span>
      <span class="n">sp</span> <span class="p">=</span> <span class="mh">0x000000016fdff460</span>
<span class="p">(</span><span class="n">lldb</span><span class="p">)</span> <span class="n">m</span> <span class="n">read</span> <span class="mh">0x000000016fdff460</span>
<span class="mh">0x16fdff460</span><span class="p">:</span> <span class="mi">00</span> <span class="mi">00</span> <span class="mi">00</span> <span class="mi">00</span> <span class="mi">00</span> <span class="mi">00</span> <span class="mi">00</span> <span class="mi">00</span> <span class="mi">00</span> <span class="mi">00</span> <span class="mi">00</span> <span class="mi">00</span> <span class="mi">00</span> <span class="mi">00</span> <span class="mi">00</span> <span class="mi">00</span>  <span class="p">................</span>
<span class="mh">0x16fdff470</span><span class="p">:</span> <span class="mi">00</span> <span class="mi">00</span> <span class="mi">00</span> <span class="mi">00</span> <span class="mi">00</span> <span class="mi">00</span> <span class="mi">00</span> <span class="mi">00</span> <span class="mi">00</span> <span class="mi">00</span> <span class="mi">00</span> <span class="mi">00</span> <span class="mi">00</span> <span class="mi">00</span> <span class="mi">00</span> <span class="mi">00</span>  <span class="p">................</span>
</div></code></pre><p>Execute the first instruction and check again:</p><pre><code><div class="highlight"><span></span><span class="p">(</span><span class="n">lldb</span><span class="p">)</span> <span class="n">re</span> <span class="n">r</span> <span class="n">sp</span>
      <span class="n">sp</span> <span class="p">=</span> <span class="mh">0x000000016fdff450</span>
<span class="p">(</span><span class="n">lldb</span><span class="p">)</span> <span class="n">m</span> <span class="n">read</span> <span class="mh">0x000000016fdff450</span>
<span class="mh">0x16fdff450</span><span class="p">:</span> <span class="n">a0</span> <span class="n">f5</span> <span class="n">df</span> <span class="mi">6</span><span class="n">f</span> <span class="mi">01</span> <span class="mi">00</span> <span class="mi">00</span> <span class="mi">00</span> <span class="mi">8</span><span class="n">c</span> <span class="n">d0</span> <span class="mi">00</span> <span class="mi">00</span> <span class="mi">01</span> <span class="mi">00</span> <span class="mi">00</span> <span class="mi">00</span>  <span class="p">...</span><span class="n">o</span><span class="p">............</span>
<span class="mh">0x16fdff460</span><span class="p">:</span> <span class="mi">00</span> <span class="mi">00</span> <span class="mi">00</span> <span class="mi">00</span> <span class="mi">00</span> <span class="mi">00</span> <span class="mi">00</span> <span class="mi">00</span> <span class="mi">00</span> <span class="mi">00</span> <span class="mi">00</span> <span class="mi">00</span> <span class="mi">00</span> <span class="mi">00</span> <span class="mi">00</span> <span class="mi">00</span>  <span class="p">................</span>
</div></code></pre><p>Let's check if that looks like it should:</p><pre><code><div class="highlight"><span></span><span class="p">(</span><span class="n">lldb</span><span class="p">)</span> <span class="n">re</span> <span class="n">r</span> <span class="n">fp</span>
      <span class="n">fp</span> <span class="p">=</span> <span class="mh">0x000000016fdff5a0</span>
<span class="p">(</span><span class="n">lldb</span><span class="p">)</span> <span class="n">re</span> <span class="n">r</span> <span class="n">lr</span>
      <span class="n">lr</span> <span class="p">=</span> <span class="mh">0x000000010000d08c</span>  <span class="n">dyld</span><span class="p">`</span><span class="n">start</span> <span class="o">+</span> <span class="mi">520</span>
</div></code></pre><p>Looks pretty good. Indeed the stack pointer got decremented by 16 bytes making room for the two 8 byte values saved in <code>fp</code> and <code>lr</code> and then they got pushed onto the stack. (In little endian byte order!) Next we move the <code>fp - frame pointer</code> to the new position of the stack pointer so that the called function can construct a stack frame that can hold its local variables if needed. After the work is done we pop back <code>fp</code> and <code>lr</code> and are safe to call <code>ret</code>.</p><p>So let's rewrite our last hello world example a little bit:</p><pre><code><div class="highlight"><span></span><span class="nl">say_hello:</span>
<span class="w">            </span><span class="nf">stp</span><span class="w"> </span><span class="no">fp</span><span class="p">,</span><span class="w"> </span><span class="no">lr</span><span class="p">,</span><span class="w"> </span><span class="p">[</span><span class="no">sp</span><span class="p">,</span><span class="w"> </span><span class="mi">-16</span><span class="p">]!</span>
<span class="w">            </span><span class="nf">mov</span><span class="w"> </span><span class="no">fp</span><span class="p">,</span><span class="w"> </span><span class="no">sp</span>

<span class="w">            </span><span class="nf">mov</span><span class="w"> </span><span class="no">x0</span><span class="p">,</span><span class="w"> </span><span class="mi">#1</span>
<span class="w">            </span><span class="nf">adrp</span><span class="w"> </span><span class="no">x1</span><span class="p">,</span><span class="w"> </span><span class="no">msg@PAGE</span>
<span class="w">            </span><span class="nf">add</span><span class="w"> </span><span class="no">x1</span><span class="p">,</span><span class="w"> </span><span class="no">x1</span><span class="p">,</span><span class="w"> </span><span class="no">msg@PAGEOFF</span>
<span class="w">            </span><span class="nf">adrp</span><span class="w"> </span><span class="no">x2</span><span class="p">,</span><span class="w"> </span><span class="no">msg_sz@PAGE</span>
<span class="w">            </span><span class="nf">add</span><span class="w"> </span><span class="no">x2</span><span class="p">,</span><span class="w"> </span><span class="no">x2</span><span class="p">,</span><span class="w"> </span><span class="no">msg_sz@PAGEOFF</span>
<span class="w">            </span><span class="nf">ldr</span><span class="w"> </span><span class="no">x2</span><span class="p">,</span><span class="w"> </span><span class="p">[</span><span class="no">x2</span><span class="p">]</span>
<span class="w">            </span><span class="nf">mov</span><span class="w"> </span><span class="no">x16</span><span class="p">,</span><span class="w"> </span><span class="mi">#4</span>
<span class="w">            </span><span class="nf">svc</span><span class="w"> </span><span class="mi">0x80</span>
<span class="w">            </span><span class="nf">bl</span><span class="w"> </span><span class="no">print_newline</span>
<span class="w">            </span>
<span class="w">            </span><span class="nf">ldp</span><span class="w"> </span><span class="no">fp</span><span class="p">,</span><span class="w"> </span><span class="no">lr</span><span class="p">,</span><span class="w"> </span><span class="p">[</span><span class="no">sp</span><span class="p">],</span><span class="w"> </span><span class="mi">16</span>
<span class="w">            </span><span class="nf">ret</span>
</div></code></pre><p>So far so good!</p><h3>Variadic parameters</h3><p>Now let's write a <code>printf</code> driven Hello World program. Since <code>printf</code> uses variadic parameters we cannot use the registers <code>x1 - x7</code> for all but the first parameter. The call convention simply differs. The variadic parameters go on the stack. Let's see how this is done:</p><pre><code><div class="highlight"><span></span><span class="na">.globl</span><span class="w">            </span><span class="no">_start</span>
<span class="na">.p2align</span><span class="w">          </span><span class="mi">2</span>

<span class="w">                  </span><span class="na">.equ</span><span class="w"> </span><span class="no">variadic_param_1</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span>

<span class="nl">say_hello:</span>
<span class="w">                  </span><span class="nf">stp</span><span class="w"> </span><span class="no">fp</span><span class="p">,</span><span class="w"> </span><span class="no">lr</span><span class="p">,</span><span class="w"> </span><span class="p">[</span><span class="no">sp</span><span class="p">,</span><span class="w"> </span><span class="mi">#-16</span><span class="p">]!</span>
<span class="w">                  </span><span class="nf">sub</span><span class="w"> </span><span class="no">sp</span><span class="p">,</span><span class="w"> </span><span class="no">sp</span><span class="p">,</span><span class="w"> </span><span class="mi">#16</span>
<span class="w">                  </span><span class="nf">mov</span><span class="w"> </span><span class="no">fp</span><span class="p">,</span><span class="w"> </span><span class="no">sp</span>

<span class="w">                  </span><span class="nf">adrp</span><span class="w"> </span><span class="no">x0</span><span class="p">,</span><span class="w"> </span><span class="no">format_str@PAGE</span>
<span class="w">                  </span><span class="nf">add</span><span class="w"> </span><span class="no">x0</span><span class="p">,</span><span class="w"> </span><span class="no">x0</span><span class="p">,</span><span class="w"> </span><span class="no">format_str@PAGEOFF</span>

<span class="w">                  </span><span class="nf">adrp</span><span class="w"> </span><span class="no">x1</span><span class="p">,</span><span class="w"> </span><span class="no">msg@PAGE</span>
<span class="w">                  </span><span class="nf">add</span><span class="w"> </span><span class="no">x1</span><span class="p">,</span><span class="w"> </span><span class="no">x1</span><span class="p">,</span><span class="w"> </span><span class="no">msg@PAGEOFF</span>

<span class="w">                  </span><span class="nf">str</span><span class="w"> </span><span class="no">x1</span><span class="p">,</span><span class="w"> </span><span class="p">[</span><span class="no">fp</span><span class="p">,</span><span class="w"> </span><span class="c1">#variadic_param_1]</span>

<span class="w">                  </span><span class="nf">bl</span><span class="w"> </span><span class="no">_printf</span>

<span class="w">                  </span><span class="nf">add</span><span class="w"> </span><span class="no">sp</span><span class="p">,</span><span class="w"> </span><span class="no">sp</span><span class="p">,</span><span class="w"> </span><span class="mi">#16</span>
<span class="w">                  </span><span class="nf">ldp</span><span class="w"> </span><span class="no">fp</span><span class="p">,</span><span class="w"> </span><span class="no">lr</span><span class="p">,</span><span class="w"> </span><span class="p">[</span><span class="no">sp</span><span class="p">],</span><span class="w"> </span><span class="mi">#16</span>
<span class="w">                  </span><span class="nf">ret</span>

<span class="nl">_start:</span>
<span class="w">                  </span><span class="nf">stp</span><span class="w"> </span><span class="no">fp</span><span class="p">,</span><span class="w"> </span><span class="no">lr</span><span class="p">,</span><span class="w"> </span><span class="p">[</span><span class="no">sp</span><span class="p">,</span><span class="w"> </span><span class="mi">#-16</span><span class="p">]!</span>
<span class="w">                  </span><span class="nf">mov</span><span class="w"> </span><span class="no">fp</span><span class="p">,</span><span class="w"> </span><span class="no">sp</span>

<span class="w">                  </span><span class="nf">bl</span><span class="w"> </span><span class="no">say_hello</span>

<span class="w">                  </span><span class="nf">ldp</span><span class="w"> </span><span class="no">fp</span><span class="p">,</span><span class="w"> </span><span class="no">lr</span><span class="p">,</span><span class="w"> </span><span class="p">[</span><span class="no">sp</span><span class="p">],</span><span class="w"> </span><span class="mi">#16</span>
<span class="w">                  </span><span class="nf">ret</span>

<span class="nl">format_str:</span><span class="w">       </span><span class="na">.asciz</span><span class="w">      </span><span class="s">&quot;%s\n&quot;</span>

<span class="na">.data</span>
<span class="nl">msg:</span><span class="w">              </span><span class="na">.asciz</span><span class="w">      </span><span class="s">&quot;Hello World!&quot;</span>
</div></code></pre><p>The <code>equ</code> directive gives a symbolic name to a numeric constant. We will reserve some space on the stack for the variadic parameters, and the first one will go in the first bucket, hence the 0 offset. After storing <code>fp</code> and <code>lr</code> onto the stack we move the stack pointer and our frame pointer 16 bytes further. This will give us room for 2 64 bit values. We only need one, but the <code>sp</code> needs to be 16 byte aligned on Dariwn. After we loaded the address of <code>msg</code> into the <code>x1</code> register we can save it to our stack-frame (which can hold 2 64bit values). Since that is where the stack-pointer points to, that's also where <code>printf</code> will be looking for it's first variadic parameter if the format string requires it.</p><p>You can play with a second variadic parameter and make another symbolic name: <code>.equ variadic_param_2, 8</code> or just store the second value to our stack frame using: <code>str reg, [fp, #8]</code> instead of <code>str reg, [fp, #variadic_param_2]</code>.</p><p><a href="https://oliver-epper.de/posts/low-level-etude-one-hello-worlds-part3/">Part 3</a></p>]]></content:encoded></item><item><guid isPermaLink="true">https://oliver-epper.de/posts/low-level-etude-one-hello-worlds</guid><title>Low Level Etude One – Hello Worlds</title><description>Connect a few dots</description><link>https://oliver-epper.de/posts/low-level-etude-one-hello-worlds</link><pubDate>Fri, 29 Jul 2022 09:41:00 +0200</pubDate><content:encoded><![CDATA[<h2>Hello Worlds</h2><p>There is a great book about ARM64 assembler <a href="https://books.apple.com/de/book/programming-with-64-bit-arm-assembly-language/id1512321883">Programming with 64-Bit ARM Assembly Language</a> from <a href="https://smist08.wordpress.com">Stephen Smith</a> and the great repository <a href="https://github.com/below/HelloSilicon">Hello Silicon</a> in which <a href="https://twitter.com/avbelow">Alex</a> translated all the content from the book to Apple Silicon.</p><h2>Why Assembler</h2><p><em>Disclaimer: Don't write your software in plain Assembler!</em></p><p>With that out of the way I encourage you to actually DO WRITE (at least mini-) software in Assembler, just because it can be great fun (see here: <a href="https://tomorrowcorporation.com/humanresourcemachine">Human Resource Machine</a>) and – on a serious note – it might sharpen your debugging skills and you might appreciate what higher level languages can do for you – I think you even get a clearer view on what you want higher level languages to do.</p><h2>Hello World – syscall</h2><p>Let's start with the first Hello World example, presented in the aformentioned resources:</p><pre><code><div class="highlight"><span></span><span class="c1">; zero.s</span>
<span class="na">.globl</span><span class="w">      </span><span class="no">_start</span>
<span class="na">.p2align</span><span class="w">    </span><span class="mi">2</span>

<span class="nl">_start:</span>
<span class="w">            </span><span class="nf">mov</span><span class="w"> </span><span class="no">x0</span><span class="p">,</span><span class="w"> </span><span class="mi">#1</span>
<span class="w">            </span><span class="nf">adr</span><span class="w"> </span><span class="no">x1</span><span class="p">,</span><span class="w"> </span><span class="no">msg</span>
<span class="w">            </span><span class="nf">mov</span><span class="w"> </span><span class="no">x2</span><span class="p">,</span><span class="w"> </span><span class="mi">#13</span>
<span class="w">            </span><span class="nf">mov</span><span class="w"> </span><span class="no">x16</span><span class="p">,</span><span class="w"> </span><span class="mi">#4</span>
<span class="w">            </span><span class="nf">svc</span><span class="w"> </span><span class="mi">0x80</span>

<span class="w">            </span><span class="nf">mov</span><span class="w"> </span><span class="no">x16</span><span class="p">,</span><span class="w"> </span><span class="mi">#1</span>
<span class="w">            </span><span class="nf">svc</span><span class="w"> </span><span class="mi">0x80</span>

<span class="nl">msg:</span><span class="w">        </span><span class="na">.asciz</span><span class="w">  </span><span class="s">&quot;Hello World!\n&quot;</span>
</div></code></pre><p>Let's build and run:</p><pre><code><div class="highlight"><span></span>as<span class="w"> </span>-o<span class="w"> </span>zero.o<span class="w"> </span>zero.s
ld<span class="w"> </span>-o<span class="w"> </span>zero<span class="w"> </span>zero.o<span class="w"> </span>-lSystem<span class="w"> </span>-syslibroot<span class="w"> </span><span class="sb">`</span>xcrun<span class="w"> </span>-sdk<span class="w"> </span>macosx<span class="w"> </span>--show-sdk-path<span class="sb">`</span><span class="w"> </span>-e<span class="w"> </span>_start
./zero
</div></code></pre><p>It should indeed print <code>Hello World</code> on the screen.</p><h3>What happens</h3><p><code>svc</code> is the mnemonic for <code>supervisor call</code> so it calls into the OS kernel and it calls the SYS_write syscall. How do I know? Let's check.</p><pre><code><div class="highlight"><span></span>open<span class="w"> </span><span class="sb">`</span>xcrun<span class="w"> </span>-sdk<span class="w"> </span>macosx<span class="w"> </span>--show-sdk-path<span class="sb">`</span>/usr/include/sys/syscall.h
</div></code></pre><p>and see for youself.</p><pre><code><div class="highlight"><span></span><span class="c1">// [...]</span>
<span class="cp">#define SYS_syscall        0</span>
<span class="cp">#define SYS_exit           1</span>
<span class="cp">#define SYS_fork           2</span>
<span class="cp">#define SYS_read           3</span>
<span class="cp">#define SYS_write          4</span>
<span class="c1">// [...]</span>
</div></code></pre><p>Now you know what the last two lines do. They exit the program with whatever exit code there is in the <code>x0</code> register at that moment. Let's check:</p><pre><code><div class="highlight"><span></span>./zero<span class="p">;</span><span class="w"> </span><span class="nb">echo</span><span class="w"> </span><span class="nv">$?</span>
</div></code></pre><p>I bet the return code is <code>13</code>, how do I know that? Let's find out:</p><pre><code><div class="highlight"><span></span>open<span class="w"> </span><span class="sb">`</span>xcrun<span class="w"> </span>-sdk<span class="w"> </span>macosx<span class="w"> </span>--show-sdk-path<span class="sb">`</span>/usr/include/unistd.h
</div></code></pre><p>and search for <code> write(</code>. You'll find the following declaration:</p><pre><code><div class="highlight"><span></span><span class="kt">ssize_t</span><span class="w">  </span><span class="nf">write</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">__fd</span><span class="p">,</span><span class="w"> </span><span class="k">const</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">__buf</span><span class="p">,</span><span class="w"> </span><span class="kt">size_t</span><span class="w"> </span><span class="n">__nbyte</span><span class="p">)</span><span class="w"> </span><span class="n">__DARWIN_ALIAS_C</span><span class="p">(</span><span class="n">write</span><span class="p">);</span>
</div></code></pre><p>and with very little fantasy you can imagine that calling <code>SYS_write</code> will return the number of bytes written. You can even make sense of the values in the <code>x0, x1 and x2</code> registers, now. It's the file descriptor (<code>stdin=0, stdout=1, stderr=2</code>) the address of the string and its length.</p><p><em>The first 8 arguments to a function go into the reigsters x0-x7, the return value can be read from x0. We will explore how functions with more (or variadic) parameters work.</em></p><p>Try changing the value for <code>__nbyte</code> to 5 and build and run the program again.</p><p><em>Normally one would expect a well written Hello World program to exit with the exit code <code>0</code> if it was successfull and some other value otherwise (do you hear me <code>codesign</code> 🤬). So please insert a <code>mov x0, #0</code> to set the parameter to <code>SYS_exit</code> to <code>0</code> no matter what happend before that – totally ignoring error handling – if you want to replicate the <code>codesign</code> behaviour in the case of finding ambigious certificates to codesign your binary and thus not signing your binary, at all.</em></p><h3>Make it more readable</h3><p>You can actually use names instead of numbers if you use clang or gcc's preprocessor. Copy <code>zero.s</code> to <code>zero_names.S</code> and change it to the following:</p><pre><code><div class="highlight"><span></span><span class="c1">#include &lt;sys/syscall.h&gt;</span>

<span class="na">.globl</span><span class="w">      </span><span class="no">_start</span>
<span class="na">.p2align</span><span class="w">    </span><span class="mi">2</span>

<span class="nl">_start:</span>
<span class="w">            </span><span class="nf">mov</span><span class="w"> </span><span class="no">x0</span><span class="p">,</span><span class="w"> </span><span class="mi">#1</span>
<span class="w">            </span><span class="nf">adr</span><span class="w"> </span><span class="no">x1</span><span class="p">,</span><span class="w"> </span><span class="no">msg</span>
<span class="w">            </span><span class="nf">mov</span><span class="w"> </span><span class="no">x2</span><span class="p">,</span><span class="w"> </span><span class="mi">#13</span>
<span class="w">            </span><span class="nf">mov</span><span class="w"> </span><span class="no">x16</span><span class="p">,</span><span class="w"> </span><span class="c1">#SYS_write</span>
<span class="w">            </span><span class="nf">svc</span><span class="w"> </span><span class="mi">0x80</span>

<span class="w">            </span><span class="nf">mov</span><span class="w"> </span><span class="no">x16</span><span class="p">,</span><span class="w"> </span><span class="c1">#SYS_exit</span>
<span class="w">            </span><span class="nf">svc</span><span class="w"> </span><span class="mi">0x80</span>

<span class="nl">msg:</span><span class="w">        </span><span class="na">.asciz</span><span class="w">  </span><span class="s">&quot;Hello World!\n&quot;</span>
</div></code></pre><p>Now you need a C compiler to build this:</p><pre><code><div class="highlight"><span></span>clang<span class="w"> </span>-o<span class="w"> </span>zero_names<span class="w"> </span>zero_names.S<span class="w"> </span>-e<span class="w"> </span>_start
</div></code></pre><p>I will explain the reason behind <code>-e start</code> later and if I miss anything <a href="https://twitter.com/avbelow">Alex</a> or <a href="https://smist08.wordpress.com">Stephen</a> will have you covered.</p><p>Let's first ask another question:</p><h3>Why linking against libSystem</h3><p>That's a good question. We don't use any function provided by <code>libSystem</code> in <code>zero.s</code> do we? We talk directly to the OS kernel.</p><p>Let's build what we have in plain C and see what happens:</p><pre><code><div class="highlight"><span></span><span class="cp">#include</span><span class="w"> </span><span class="cpf">&lt;unistd.h&gt;</span>
<span class="cp">#include</span><span class="w"> </span><span class="cpf">&lt;sys/syscall.h&gt;</span>

<span class="kt">int</span><span class="w"> </span><span class="nf">main</span><span class="p">()</span><span class="w"> </span><span class="p">{</span>
<span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="n">syscall</span><span class="p">(</span><span class="n">SYS_write</span><span class="p">,</span><span class="w"> </span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="s">&quot;Hello World!</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="w"> </span><span class="mi">13</span><span class="p">);</span>
<span class="p">}</span>
</div></code></pre><p><em>Hey <code>codesign</code>! See what I did there returning something useful instead of <code>0</code> in every case?</em></p><p>Compile it with:</p><pre><code><div class="highlight"><span></span>clang<span class="w"> </span>-o<span class="w"> </span>zero_in_c<span class="w"> </span>zero_in_c.c<span class="w"> </span>-Wno-deprecated
</div></code></pre><p>Before we talk about the supression of the deprecation warning I want to introduce you to a really great website: <a href="https://godbolt.org/">Compiler Explorer</a> by <a href="https://twitter.com/mattgodbolt">Matt Goldbold</a>. Open it and paste our C programm in there. Make sure to select C as the language and ARM64 as the platform. You can click <a href="https://godbolt.org/z/9fq5Efz65">here</a>.</p><p>This is not quite the assembler programm we wrote :-/ I mean it basically does the same, but there are three differences:</p><ul><li>There's some fiddeling with the stack,</li><li>it uses <code>bl</code> to call the <code>syscall</code> function instead of <code>svc</code> and</li><li>the addressing of the string resource is a bit more general.</li></ul><p>There will be more etudes explaining all of this.</p><p>Back to the warning. Please delete <code>-Wno-deprecated</code> from the command above and read the following:</p><pre><code><div class="highlight"><span></span><span class="n">zero_in_c</span><span class="p">.</span><span class="n">c</span><span class="p">:</span><span class="mi">5</span><span class="p">:</span><span class="mi">9</span><span class="p">:</span> <span class="n">warning</span><span class="p">:</span> <span class="err">&#39;</span><span class="n">syscall</span><span class="err">&#39;</span> <span class="k">is</span> <span class="n">deprecated</span><span class="p">:</span> <span class="bp">first</span> <span class="n">deprecated</span> <span class="k">in</span> <span class="n">macOS</span> <span class="mf">10.12</span> <span class="o">-</span> <span class="n">syscall</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="k">is</span> <span class="n">unsupported</span><span class="p">;</span> <span class="n">please</span> <span class="k">switch</span> <span class="n">to</span> <span class="n">a</span> <span class="n">supported</span> <span class="n">interface</span><span class="p">.</span> <span class="n">For</span> <span class="n">SYS_kdebug_trace</span> <span class="n">use</span> <span class="n">kdebug_signpost</span><span class="p">().</span> <span class="p">[</span><span class="o">-</span><span class="n">Wdeprecated</span><span class="o">-</span><span class="n">declarations</span><span class="p">]</span>
        <span class="k">return</span> <span class="n">syscall</span><span class="p">(</span><span class="n">SYS_write</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="s">&quot;Hello World!</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="mi">13</span><span class="p">);</span>
               <span class="o">^</span>
<span class="o">/</span><span class="n">Applications</span><span class="o">/</span><span class="n">Xcode</span><span class="o">-</span><span class="mf">14.0</span><span class="p">.</span><span class="mi">0</span><span class="o">-</span><span class="n">Beta</span><span class="p">.</span><span class="mf">3.</span><span class="n">app</span><span class="o">/</span><span class="n">Contents</span><span class="o">/</span><span class="n">Developer</span><span class="o">/</span><span class="n">Platforms</span><span class="o">/</span><span class="n">MacOSX</span><span class="p">.</span><span class="n">platform</span><span class="o">/</span><span class="n">Developer</span><span class="o">/</span><span class="n">SDKs</span><span class="o">/</span><span class="n">MacOSX</span><span class="p">.</span><span class="n">sdk</span><span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">include</span><span class="o">/</span><span class="n">unistd</span><span class="p">.</span><span class="n">h</span><span class="p">:</span><span class="mi">746</span><span class="p">:</span><span class="mi">6</span><span class="p">:</span> <span class="n">note</span><span class="p">:</span> <span class="err">&#39;</span><span class="n">syscall</span><span class="err">&#39;</span> <span class="n">has</span> <span class="n">been</span> <span class="n">explicitly</span> <span class="n">marked</span> <span class="n">deprecated</span> <span class="n">here</span>
<span class="n">int</span>      <span class="n">syscall</span><span class="p">(</span><span class="n">int</span><span class="p">,</span> <span class="p">...);</span>
         <span class="o">^</span>
<span class="mi">1</span> <span class="n">warning</span> <span class="n">generated</span><span class="p">.</span>
</div></code></pre><p>Let me translate this for you:</p><blockquote><p>"Please don't talk to our kernel directly! Use the APIs we provide!".</p></blockquote><p>Wait there is even something between the lines:</p><blockquote><p>"We could change the layout and the numbering of the syscalls anytime without telling you, because we know you will only use our APIs and we'll update them alongside our kernel. So everything will work fine!"</p></blockquote><p>Fair enough! We have been warned.</p><p>Now you know the reason we need to link even our first version of the Hello World program to <code>libSystem</code>. This is the lowest ground where Apple wants us to live. In fact neither Alex nor I manged to build a Mach executable without linking it to <code>libSystem</code>.</p><p>You can link it:</p><pre><code><div class="highlight"><span></span><span class="n">ld</span> <span class="o">-</span><span class="n">o</span> <span class="n">zero</span> <span class="n">zero</span><span class="p">.</span><span class="n">o</span> <span class="o">-</span><span class="n">e</span> <span class="n">_start</span> <span class="o">-</span><span class="kd">static</span>
</div></code></pre><p>But you cannot start it. (Is there a way? Please tell me!)</p><h3>Improved Hello World – syscall</h3><p>One thing that I found annoying right away is having to provide the length of the string. Stephens book has a neat trick for that:</p><pre><code><div class="highlight"><span></span><span class="c1">; zero_length.s</span>
<span class="na">.globl</span><span class="w">      </span><span class="no">_start</span>
<span class="na">.p2align</span><span class="w">    </span><span class="mi">2</span>

<span class="nl">_start:</span>
<span class="w">            </span><span class="nf">mov</span><span class="w"> </span><span class="no">x0</span><span class="p">,</span><span class="w"> </span><span class="mi">#1</span>
<span class="w">            </span><span class="nf">adrp</span><span class="w"> </span><span class="no">x1</span><span class="p">,</span><span class="w"> </span><span class="no">msg@PAGE</span>
<span class="w">            </span><span class="nf">add</span><span class="w"> </span><span class="no">x1</span><span class="p">,</span><span class="w"> </span><span class="no">x1</span><span class="p">,</span><span class="w"> </span><span class="no">msg@PAGEOFF</span>
<span class="w">            </span><span class="nf">adrp</span><span class="w"> </span><span class="no">x2</span><span class="p">,</span><span class="w"> </span><span class="no">msg_sz@PAGE</span>
<span class="w">            </span><span class="nf">add</span><span class="w"> </span><span class="no">x2</span><span class="p">,</span><span class="w"> </span><span class="no">x2</span><span class="p">,</span><span class="w"> </span><span class="no">msg_sz@PAGEOFF</span>
<span class="w">            </span><span class="nf">ldr</span><span class="w"> </span><span class="no">x2</span><span class="p">,</span><span class="w"> </span><span class="p">[</span><span class="no">x2</span><span class="p">]</span>
<span class="w">            </span><span class="nf">mov</span><span class="w"> </span><span class="no">x16</span><span class="p">,</span><span class="w"> </span><span class="mi">#4</span>
<span class="w">            </span><span class="nf">svc</span><span class="w"> </span><span class="mi">0x80</span>

<span class="w">            </span><span class="nf">mov</span><span class="w"> </span><span class="no">x16</span><span class="p">,</span><span class="w"> </span><span class="mi">#1</span>
<span class="w">            </span><span class="nf">svc</span><span class="w"> </span><span class="mi">0x80</span>

<span class="na">.data</span>
<span class="nl">msg:</span><span class="w">        </span><span class="na">.asciz</span><span class="w">  </span><span class="s">&quot;Hello World!\n&quot;</span>
<span class="nl">msg_sz:</span><span class="w">     </span><span class="na">.word</span><span class="w">   </span><span class="no">.-msg</span>
</div></code></pre><p>For this to work we needed to move the string <code>msg</code> out of the explicit text section of our program into the data section. <code>Text section</code> can be read and executed, <code>data section</code> can be read and written, not executed!</p><p>Untill now we could load the string in <code>msg</code> with <code>adr reg, msg</code>. That generated an address relative to the pc register. <em>I encourage you to read Stephens book to find out how ARM64 manages it to put 64 bit addresses into opcodes that are only 64 bit long.</em> Now we need to use <code>adrp</code> and <code>add</code>. <code>adrp</code> gives us the address to the memory page that holds <code>msg</code> and add adds the approriate offset.</p><p>Let's evaluate that the line <code>add x1, x1, msg@PAGEOFF</code> does in fact add nothing to x1, because <code>msg</code> has zero offset from the page start.</p><p>Build the programm and run it with</p><pre><code><div class="highlight"><span></span>lldb<span class="w"> </span>zero_length
</div></code></pre><p>Once in lldb enter <code>b start</code> and then <code>r</code>. Now you can see it already:</p><pre><code><div class="highlight"><span></span><span class="p">-&gt;</span>  <span class="mh">0x100003f90</span> <span class="o">&lt;+</span><span class="mi">0</span><span class="p">&gt;:</span>  <span class="n">mov</span>    <span class="n">x0</span><span class="p">,</span> <span class="p">#</span><span class="mh">0x1</span>
    <span class="mh">0x100003f94</span> <span class="o">&lt;+</span><span class="mi">4</span><span class="p">&gt;:</span>  <span class="n">adrp</span>   <span class="n">x1</span><span class="p">,</span> <span class="mi">1</span>
    <span class="mh">0x100003f98</span> <span class="o">&lt;+</span><span class="mi">8</span><span class="p">&gt;:</span>  <span class="n">add</span>    <span class="n">x1</span><span class="p">,</span> <span class="n">x1</span><span class="p">,</span> <span class="p">#</span><span class="mh">0x0</span>              <span class="p">;</span> <span class="n">msg</span>
    <span class="mh">0x100003f9c</span> <span class="o">&lt;+</span><span class="mi">12</span><span class="p">&gt;:</span> <span class="n">adrp</span>   <span class="n">x2</span><span class="p">,</span> <span class="mi">1</span>
</div></code></pre><p><code>msg</code> lives at 0 offset. Enter <code>n</code> 3 times and then <code>re r x1</code> to see the content of the x1 register (<em>re</em> gister <em>r</em> ead x1). Copy the value and enter:</p><pre><code><div class="highlight"><span></span><span class="n">m</span> <span class="n">read</span> <span class="mh">0x0000000100004000</span>
</div></code></pre><p><code>0x0000000100004000</code> being the value from x1.</p><p>Now step again two times and see whats in <code>x2</code></p><pre><code><div class="highlight"><span></span><span class="p">(</span><span class="n">lldb</span><span class="p">)</span> <span class="n">re</span> <span class="n">r</span> <span class="n">x2</span>
      <span class="n">x2</span> <span class="p">=</span> <span class="mh">0x000000010000400e</span>  <span class="n">msg_sz</span>
</div></code></pre><p>check the memory at that address:</p><pre><code><div class="highlight"><span></span><span class="mh">0x10000400e</span><span class="p">:</span> <span class="mi">0</span><span class="n">e</span> <span class="mi">00</span> <span class="mi">00</span> <span class="mi">00</span> <span class="mi">00</span> <span class="mi">00</span> <span class="mi">00</span> <span class="mi">00</span> <span class="mi">00</span> <span class="mi">00</span> <span class="mi">00</span> <span class="mi">00</span> <span class="mi">00</span> <span class="mi">00</span> <span class="mi">00</span> <span class="mi">00</span>  <span class="p">................</span>
<span class="mh">0x10000401e</span><span class="p">:</span> <span class="mi">00</span> <span class="mi">00</span> <span class="mi">00</span> <span class="mi">00</span> <span class="mi">00</span> <span class="mi">00</span> <span class="mi">00</span> <span class="mi">00</span> <span class="mi">00</span> <span class="mi">00</span> <span class="mi">00</span> <span class="mi">00</span> <span class="mi">00</span> <span class="mi">00</span> <span class="mi">00</span> <span class="mi">00</span>  <span class="p">................</span>
</div></code></pre><p>So the value is <code>0e</code> which is 14 in decimal.</p><p><code>ldr x2, [x2]</code> loads the value from the address in x2 to the x2 register.</p><p>So the assembler evaluated <code>.</code> to the current memory address which is right after <code>msg</code> and <code>-msg</code> subtracts the offset of <code>msg</code> giving you its length + 1. So actually it should read:</p><pre><code><div class="highlight"><span></span><span class="na">.data</span>
<span class="nl">msg:</span><span class="w">        </span><span class="na">.asciz</span><span class="w">  </span><span class="s">&quot;Hello World!\n&quot;</span>
<span class="nl">msg_sz:</span><span class="w">     </span><span class="na">.word</span><span class="w">   </span><span class="no">.-msg-1</span>
</div></code></pre><p>Let's check in the debugger:</p><pre><code><div class="highlight"><span></span><span class="p">(</span><span class="n">lldb</span><span class="p">)</span> <span class="n">re</span> <span class="n">r</span> <span class="n">x2</span>
      <span class="n">x2</span> <span class="p">=</span> <span class="mh">0x000000000000000d</span>
</div></code></pre><p>That's 13!</p><h2>Hello World - puts or printf?</h2><p>Ok. We learned that we're not supposed to talk to the OS kernel directly. How would a reasonable C Hello World example look in assembler anyway.</p><pre><code><div class="highlight"><span></span><span class="kt">int</span><span class="w"> </span><span class="nf">main</span><span class="p">()</span><span class="w"> </span><span class="p">{</span>
<span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="n">puts</span><span class="p">(</span><span class="s">&quot;Hello World!&quot;</span><span class="p">);</span>
<span class="p">}</span>
</div></code></pre><p>Put that into <a href="https://godbolt.org">Compiler Explorer</a> and get: (You can click <a href="https://godbolt.org/z/aYfcEfzKc">here</a>)</p><pre><code><div class="highlight"><span></span><span class="nl">.LC0:</span>
<span class="w">        </span><span class="na">.string</span><span class="w"> </span><span class="s">&quot;Hello World!&quot;</span>
<span class="nl">main:</span>
<span class="w">        </span><span class="nf">stp</span><span class="w">     </span><span class="no">x29</span><span class="p">,</span><span class="w"> </span><span class="no">x30</span><span class="p">,</span><span class="w"> </span><span class="p">[</span><span class="no">sp</span><span class="p">,</span><span class="w"> </span><span class="mi">-16</span><span class="p">]!</span>
<span class="w">        </span><span class="nf">mov</span><span class="w">     </span><span class="no">x29</span><span class="p">,</span><span class="w"> </span><span class="no">sp</span>
<span class="w">        </span><span class="nf">adrp</span><span class="w">    </span><span class="no">x0</span><span class="p">,</span><span class="w"> </span><span class="no">.LC0</span>
<span class="w">        </span><span class="nf">add</span><span class="w">     </span><span class="no">x0</span><span class="p">,</span><span class="w"> </span><span class="no">x0</span><span class="p">,</span><span class="w"> </span><span class="p">:</span><span class="no">lo12</span><span class="p">:.</span><span class="no">LC0</span>
<span class="w">        </span><span class="nf">bl</span><span class="w">      </span><span class="no">puts</span>
<span class="w">        </span><span class="nf">ldp</span><span class="w">     </span><span class="no">x29</span><span class="p">,</span><span class="w"> </span><span class="no">x30</span><span class="p">,</span><span class="w"> </span><span class="p">[</span><span class="no">sp</span><span class="p">],</span><span class="w"> </span><span class="mi">16</span>
<span class="w">        </span><span class="nf">ret</span>
</div></code></pre><p>We understand the addressing already, but we need to learn about <code>bl - branch with link</code> and the stack next.</p><p>Before we do that. I just want to try out something else. Copy <code>zero.s</code> to <code>zero_no_symbols.s</code> and change it to the following:</p><pre><code><div class="highlight"><span></span><span class="c1">; zero_no_symbols.s</span>

<span class="na">.globl</span><span class="w">      </span><span class="no">_start</span>
<span class="na">.p2align</span><span class="w">    </span><span class="mi">2</span>

<span class="nl">_start:</span>
<span class="w">            </span><span class="nf">mov</span><span class="w"> </span><span class="no">x0</span><span class="p">,</span><span class="w"> </span><span class="mi">#0</span><span class="w">                  </span><span class="c1">// 0</span>
<span class="w">            </span><span class="nf">adr</span><span class="w"> </span><span class="no">x1</span><span class="p">,</span><span class="w"> </span><span class="mi">#0</span><span class="no">x18</span><span class="w">               </span><span class="c1">// 4</span>
<span class="w">            </span><span class="nf">mov</span><span class="w"> </span><span class="no">x2</span><span class="p">,</span><span class="w"> </span><span class="mi">#13</span><span class="w">                 </span><span class="c1">// 8        + 4</span>
<span class="w">            </span><span class="nf">mov</span><span class="w"> </span><span class="no">x16</span><span class="p">,</span><span class="w"> </span><span class="mi">#4</span><span class="w">                 </span><span class="c1">// 12       + 8</span>
<span class="w">            </span><span class="nf">svc</span><span class="w"> </span><span class="mi">0x80</span><span class="w">                    </span><span class="c1">// 16       + 12</span>

<span class="w">            </span><span class="nf">mov</span><span class="w"> </span><span class="no">x16</span><span class="p">,</span><span class="w"> </span><span class="mi">#1</span><span class="w">                 </span><span class="c1">// 20       + 16</span>
<span class="w">            </span><span class="nf">svc</span><span class="w"> </span><span class="mi">0x80</span><span class="w">                    </span><span class="c1">// 24       + 20</span>

<span class="nl">msg:</span><span class="w">        </span><span class="na">.asciz</span><span class="w">  </span><span class="s">&quot;Hello World!\n&quot;</span><span class="w">    </span><span class="c1">// 28       + 24 = 0x18</span>
</div></code></pre><p>Instead of using <code>adr x1, msg</code> you can simply count instructions and calculate the position of <code>msg</code> yourself. Darwin wants everything aligned on 4 byte boundaries. That is what <code>p2align 2</code> does. So you can see that the second instruction is 4 bytes from the program start and <code>msg</code> is 24 bytes from the pc register after the first instruction is executed (the pc register (<em>p</em> rogramm <em>c</em> ounter) always has the next line that is going to be executed). So since 24 is 0x18 in hex we can put that there instead of <code>msg</code>. Pretty useless, but helpful to understand.</p><p>To prove all this execute:</p><pre><code><div class="highlight"><span></span>lldb<span class="w"> </span>zero
</div></code></pre><p>and enter <code>b start</code> then <code>r</code> and <code>dis</code>:</p><pre><code><div class="highlight"><span></span><span class="n">zero</span><span class="p">`</span><span class="n">start</span><span class="p">:</span>
<span class="p">-&gt;</span>  <span class="mh">0x100003f8c</span> <span class="o">&lt;+</span><span class="mi">0</span><span class="p">&gt;:</span>  <span class="n">mov</span>    <span class="n">x0</span><span class="p">,</span> <span class="p">#</span><span class="mh">0x1</span>
    <span class="mh">0x100003f90</span> <span class="o">&lt;+</span><span class="mi">4</span><span class="p">&gt;:</span>  <span class="n">adr</span>    <span class="n">x1</span><span class="p">,</span> <span class="p">#</span><span class="mh">0x18</span>                 <span class="p">;</span> <span class="n">msg</span>
    <span class="mh">0x100003f94</span> <span class="o">&lt;+</span><span class="mi">8</span><span class="p">&gt;:</span>  <span class="n">mov</span>    <span class="n">x2</span><span class="p">,</span> <span class="p">#</span><span class="mh">0x5</span>
    <span class="mh">0x100003f98</span> <span class="o">&lt;+</span><span class="mi">12</span><span class="p">&gt;:</span> <span class="n">mov</span>    <span class="n">x16</span><span class="p">,</span> <span class="p">#</span><span class="mh">0x4</span>
    <span class="mh">0x100003f9c</span> <span class="o">&lt;+</span><span class="mi">16</span><span class="p">&gt;:</span> <span class="n">svc</span>    <span class="p">#</span><span class="mh">0x80</span>
    <span class="mh">0x100003fa0</span> <span class="o">&lt;+</span><span class="mi">20</span><span class="p">&gt;:</span> <span class="n">mov</span>    <span class="n">x16</span><span class="p">,</span> <span class="p">#</span><span class="mh">0x1</span>
    <span class="mh">0x100003fa4</span> <span class="o">&lt;+</span><span class="mi">24</span><span class="p">&gt;:</span> <span class="n">svc</span>    <span class="p">#</span><span class="mh">0x80</span>
</div></code></pre><p>Enter <code>n</code> one time and then check the pc register <code>re r pc</code></p><pre><code><div class="highlight"><span></span><span class="p">(</span><span class="n">lldb</span><span class="p">)</span> <span class="n">re</span> <span class="n">r</span> <span class="n">pc</span>
      <span class="n">pc</span> <span class="p">=</span> <span class="mh">0x0000000100003f90</span>  <span class="n">zero</span><span class="p">`</span><span class="n">start</span> <span class="o">+</span> <span class="mi">4</span>
</div></code></pre><p>Add <code>24</code> to <code>0x0000000100003f90</code> which is <code>0x0000000100003fa8</code> and then enter <code>m read 0x0000000100003fa8</code>:</p><pre><code><div class="highlight"><span></span><span class="p">(</span><span class="n">lldb</span><span class="p">)</span> <span class="n">m</span> <span class="n">read</span> <span class="mh">0x0000000100003fa8</span>
<span class="mh">0x100003fa8</span><span class="p">:</span> <span class="mi">48</span> <span class="mi">65</span> <span class="mi">6</span><span class="n">c</span> <span class="mi">6</span><span class="n">c</span> <span class="mi">6</span><span class="n">f</span> <span class="mi">20</span> <span class="mi">57</span> <span class="mi">6</span><span class="n">f</span> <span class="mi">72</span> <span class="mi">6</span><span class="n">c</span> <span class="mi">64</span> <span class="mi">21</span> <span class="mi">0</span><span class="n">a</span> <span class="mi">00</span> <span class="mi">00</span> <span class="mi">00</span>  <span class="n">Hello</span> <span class="n">World</span><span class="p">!....</span>
<span class="mh">0x100003fb8</span><span class="p">:</span> <span class="mi">01</span> <span class="mi">00</span> <span class="mi">00</span> <span class="mi">00</span> <span class="mi">1</span><span class="n">c</span> <span class="mi">00</span> <span class="mi">00</span> <span class="mi">00</span> <span class="mi">00</span> <span class="mi">00</span> <span class="mi">00</span> <span class="mi">00</span> <span class="mi">1</span><span class="n">c</span> <span class="mi">00</span> <span class="mi">00</span> <span class="mi">00</span>  <span class="p">................</span>
</div></code></pre><p>See! There's your <code>msg</code>.</p><p><a href="https://oliver-epper.de/posts/low-level-etude-one-hello-worlds-part2/">Part 2</a></p><h2>Links</h2><p>Oh! By the way if you want your own Linux syscall to play with start here: <a href="https://oliver-epper.de/posts/implementing-a-linux-syscall/">Implementing a Linux syscall</a></p>]]></content:encoded></item><item><guid isPermaLink="true">https://oliver-epper.de/posts/managing-binary-dependencies-for-swift</guid><title>Managing binary dependencies for swift</title><description>Make PjSIP Project available for mutiple architectures and targets</description><link>https://oliver-epper.de/posts/managing-binary-dependencies-for-swift</link><pubDate>Fri, 22 Apr 2022 09:41:00 +0200</pubDate><content:encoded><![CDATA[<h2>The problem</h2><p>One of the core dependencies for my employer is the <a href="https://www.pjsip.org">PjSIP Project</a>. As many others libraries it is written in C for maximum compatibility. Modernizing parts of our stack I wanted a single swift package <code>PjSIP</code> that I can rely on with no further fiddeling.</p><p>To be useable it needed to support at least the following environments: macOS (Intel and Apple Silicon), iPhoneOS and iPhone Simulator running on Apple Silicon. PjSIP project is a complex library to begin with and the above are four builds, already. So we want to build them in a controlled fashion and use as binary dependency.</p><h2>XCFramework</h2><p>XCFrameworks handle the above well. They can contain libraries for multiple platforms (and variants!) and the libraries can even be fat-libs so we get everything we need.</p><p>So the first step was to create an XCFramework. You can see how it's done here <a href="https://github.com/oliverepper/pjproject-apple-platforms/blob/main/start.sh">pjproject-apple-platforms</a> beginning at around line 150 <code>cat &lt;&lt; 'END' &gt; pjproject/build_apple_platforms.sh</code>. Basically we build the object files and pack them together with <code>libtool</code>.</p><p>XCFrameworks are simple: The build system sees them, reads their <code>Info.plist</code> and copies the appropriate library to your build folder before the build. So speaking in C-lingo <code>-lpjproject</code> will be happy.</p><h2>Headers vs Modules</h2><p>If we would start a multiplatform app now and drop the XCFramwork into the app the linker would be able to link against our <code>libpjproject</code> and see the <code>_pj_init</code> symbol, for example. But Swift still can't see any of the symbols from PjSIP project. In Xcode you could create a Bridging-Header and configure the include paths.</p><p>Since our goal is a neat Swift Package we create one for PjSIP project including the following:</p><pre><code><div class="highlight"><span></span><span class="p">.</span><span class="n">systemLibrary</span><span class="p">(</span><span class="n">name</span><span class="p">:</span> <span class="s">&quot;Cpjproject&quot;</span><span class="p">,</span> <span class="n">pkgConfig</span><span class="p">:</span> <span class="s">&quot;pjproject-apple-platforms&quot;</span><span class="p">)</span>
</div></code></pre><p>Pkg-config is a simple yet super-useful mechanism to configure the C/C++ compilers. If you have installed my final brew package for pjproject <code>brew install oliverepper/made/pjproject-apple-platforms</code> you can try it out by typing:</p><pre><code><div class="highlight"><span></span>pkg-config<span class="w"> </span>--cflags<span class="w"> </span>--libs<span class="w"> </span>pjproject-apple-platforms
</div></code></pre><p>What you receive as output can be passed to a C/C++ compiler on the command-line. Let's make an example.</p><h3>Example program in ObjC</h3><p>Create the program</p><pre><code><div class="highlight"><span></span>cat<span class="w"> </span><span class="s">&lt;&lt; EOF &gt; pjsip-test.m</span>
<span class="s">#define PJ_AUTOCONF 1</span>

<span class="s">#include &lt;pjsua.h&gt;</span>

<span class="s">int main()</span>
<span class="s">{</span>
<span class="s">	pj_init();</span>

<span class="s">	return 0;</span>
<span class="s">}</span>
<span class="s">EOF</span>
</div></code></pre><p>compile it for macOS</p><pre><code><div class="highlight"><span></span>clang<span class="w"> </span>-isysroot<span class="w"> </span><span class="k">$(</span>xcode-select<span class="w"> </span>-p<span class="k">)</span>/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk<span class="w"> </span><span class="sb">`</span>pkg-config<span class="w"> </span>--libs<span class="w"> </span>--cflags<span class="w"> </span>pjproject-apple-platforms<span class="sb">`</span><span class="w"> </span>-o<span class="w"> </span>pjsip-test<span class="w"> </span>pjsip-test.m
</div></code></pre><p>It should give you the following output:</p><pre><code><div class="highlight"><span></span><span class="mi">08</span><span class="p">:</span><span class="mi">40</span><span class="p">:</span><span class="mf">15.580</span>         <span class="n">os_core_unix</span><span class="p">.</span><span class="n">c</span> <span class="o">!</span><span class="n">pjlib</span> <span class="mf">2.12</span> <span class="k">for</span> <span class="n">POSIX</span> <span class="n">initialized</span>
</div></code></pre><p>You can compile it for the iPhone simulator running on Apple Silicon like this:</p><pre><code><div class="highlight"><span></span>clang<span class="w"> </span>-isysroot<span class="w"> </span>/Applications/Xcode-13.3.1.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk<span class="w"> </span><span class="sb">`</span>pkg-config<span class="w"> </span>--libs<span class="w"> </span>--cflags<span class="w"> </span>pjproject-apple-platforms-iPhoneSimulator<span class="sb">`</span><span class="w"> </span>-o<span class="w"> </span>pjsip-test<span class="w"> </span>pjsip-test.m
</div></code></pre><h3>SPM</h3><p>Back to the <code>systemLibrary</code>-target we're still missing the translation between C-style header files and Swift modules. This can be achieved via the following <code>module.modulemap</code>:</p><pre><code><div class="highlight"><span></span><span class="n">module</span> <span class="n">Cpjproject</span> <span class="p">[</span><span class="n">system</span><span class="p">]</span> <span class="p">{</span>
    <span class="n">header</span> <span class="s">&quot;shim.h&quot;</span>
<span class="p">}</span>
</div></code></pre><p>and the shim header:</p><pre><code><div class="highlight"><span></span><span class="cp">#define PJ_AUTOCONF 1</span>
<span class="cp">#include</span><span class="w"> </span><span class="cpf">&lt;pjsua.h&gt;</span>
</div></code></pre><h3>Wrapper or test target</h3><p>Now we can create other targets in our swift package that can depend on <code>Cpjproject</code> and the will "see" all of pjproject from within Swift. All is great as long as we only build for the Mac!</p><h2>Other target</h2><p>Once we try to build the swift package for other platforms (iPhoneOS, iPhoneSimulator) the pkg-config file configures the linker to load the version of <code>libpjproject.a</code> that was build for macOS which will then fail.</p><h3>The trick</h3><p>I made another pkg-config file called <code>pjproject-apple-platforms-SPM</code> that intentionally gives no path to the libraries so using <code>-lpjproject</code> would fail.</p><pre><code><div class="highlight"><span></span><span class="p">.</span><span class="n">systemLibrary</span><span class="p">(</span><span class="n">name</span><span class="p">:</span> <span class="s">&quot;Cpjproject&quot;</span><span class="p">,</span> <span class="n">pkgConfig</span><span class="p">:</span> <span class="s">&quot;pjproject-apple-platforms-SPM&quot;</span><span class="p">)</span>
</div></code></pre><p>Swift package has another target type that can do the rescue, here:</p><pre><code><div class="highlight"><span></span><span class="p">.</span><span class="n">binaryTarget</span><span class="p">(</span><span class="n">name</span><span class="p">:</span> <span class="s">&quot;libpjproject&quot;</span><span class="p">,</span> <span class="n">path</span><span class="p">:</span> <span class="s">&quot;libpjproject.xcframework&quot;</span><span class="p">)</span>
</div></code></pre><p>A binary target understands XCFrameworks and copies the right libraries into place just before the build. This enables the linker to find the appropriate library for <code>-lpjproject</code>.</p><h2>Final</h2><p>Finally create a third target:</p><pre><code><div class="highlight"><span></span><span class="p">.</span><span class="n">target</span><span class="p">(</span><span class="n">name</span><span class="p">:</span> <span class="s">&quot;PJSIP&quot;</span><span class="p">,</span> <span class="n">dependencies</span><span class="p">:</span> <span class="p">[</span><span class="s">&quot;Cpjproject&quot;</span><span class="p">,</span> <span class="s">&quot;libpjproject&quot;</span><span class="p">])</span>
</div></code></pre><p>that you can use to give PjSIP project a nice swift interface. Something like <code>func pjInit() throws</code> and so on.</p><p>What we have achieved now ist that you can work on the swift package in isolation and have executable targets for integration tests, test targets for unit tests and once you use the swift package in a multiplatform app everything is automatically configured for you. Pretty neat :-D</p><h3>Links</h3><ul><li><a href="https://github.com/oliverepper/homebrew-made">brew package</a></li><li><a href="https://github.com/oliverepper/pjproject-apple-platforms-Demo">demo App</a></li></ul>]]></content:encoded></item><item><guid isPermaLink="true">https://oliver-epper.de/posts/super-simple-example-of-a-swift-actor</guid><title>Super Simple Example of a Swift Actor</title><description>Use an actor to prevent a data race</description><link>https://oliver-epper.de/posts/super-simple-example-of-a-swift-actor</link><pubDate>Mon, 31 Jan 2022 09:41:00 +0100</pubDate><content:encoded><![CDATA[<p>Besides classes, structs and enum Swift has actors, now. Let's create a super simple example of what an actor can do.</p><h2>Let's build something super simple</h2><pre><code><div class="highlight"><span></span><span class="kd">class</span> <span class="nc">Counter</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nv">value</span> <span class="p">=</span> <span class="mi">0</span>

    <span class="kd">func</span> <span class="nf">increment</span><span class="p">()</span> <span class="p">{</span>
        <span class="n">value</span> <span class="o">+=</span> <span class="mi">1</span>
    <span class="p">}</span>

    <span class="kd">func</span> <span class="nf">decrement</span><span class="p">()</span> <span class="p">{</span>
        <span class="n">value</span> <span class="o">-=</span> <span class="mi">1</span>
    <span class="p">}</span>
<span class="p">}</span>
</div></code></pre><p>Let's build a view model that uses a counter:</p><pre><code><div class="highlight"><span></span><span class="kr">final</span> <span class="kd">class</span> <span class="nc">Model</span><span class="p">:</span> <span class="n">ObservableObject</span> <span class="p">{</span>
    <span class="p">@</span><span class="n">Published</span> <span class="kd">var</span> <span class="nv">counterValue</span><span class="p">:</span> <span class="nb">String</span><span class="p">?</span>
    <span class="kd">private</span> <span class="kd">var</span> <span class="nv">counter</span><span class="p">:</span> <span class="n">Counter</span>

    <span class="kd">init</span><span class="p">()</span> <span class="p">{</span>
        <span class="n">counter</span> <span class="p">=</span> <span class="n">Counter</span><span class="p">()</span>
        <span class="n">update</span><span class="p">()</span>
    <span class="p">}</span>

    <span class="kd">func</span> <span class="nf">increment</span><span class="p">(</span><span class="n">times</span><span class="p">:</span> <span class="nb">Int</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">for</span> <span class="kc">_</span> <span class="k">in</span> <span class="mf">1.</span><span class="p">..</span><span class="n">times</span> <span class="p">{</span>
            <span class="n">counter</span><span class="p">.</span><span class="n">increment</span><span class="p">()</span>
        <span class="p">}</span>
        <span class="n">update</span><span class="p">()</span>
    <span class="p">}</span>

    <span class="kd">func</span> <span class="nf">decrement</span><span class="p">(</span><span class="n">times</span><span class="p">:</span> <span class="nb">Int</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">for</span> <span class="kc">_</span> <span class="k">in</span> <span class="mf">1.</span><span class="p">..</span><span class="n">times</span> <span class="p">{</span>
            <span class="n">counter</span><span class="p">.</span><span class="n">decrement</span><span class="p">()</span>
        <span class="p">}</span>
        <span class="n">update</span><span class="p">()</span>
    <span class="p">}</span>

    <span class="kd">private</span> <span class="kd">func</span> <span class="nf">update</span><span class="p">()</span> <span class="p">{</span>
        <span class="bp">assert</span><span class="p">(</span><span class="n">Thread</span><span class="p">.</span><span class="n">isMainThread</span><span class="p">)</span>
        <span class="n">counterValue</span> <span class="p">=</span> <span class="n">counter</span><span class="p">.</span><span class="n">value</span><span class="p">.</span><span class="n">description</span>
    <span class="p">}</span>
<span class="p">}</span>
</div></code></pre><p>and a view that uses the view model:</p><pre><code><div class="highlight"><span></span><span class="kd">struct</span> <span class="nc">ContentView</span><span class="p">:</span> <span class="n">View</span> <span class="p">{</span>
    <span class="p">@</span><span class="n">StateObject</span> <span class="kd">var</span> <span class="nv">model</span> <span class="p">=</span> <span class="n">Model</span><span class="p">()</span>

    <span class="kd">var</span> <span class="nv">body</span><span class="p">:</span> <span class="n">some</span> <span class="n">View</span> <span class="p">{</span>
        <span class="n">VStack</span> <span class="p">{</span>
            <span class="k">if</span> <span class="kd">let</span> <span class="nv">value</span> <span class="p">=</span> <span class="n">model</span><span class="p">.</span><span class="n">counterValue</span> <span class="p">{</span>
                <span class="n">Text</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
            <span class="p">}</span>
            <span class="n">Button</span><span class="p">(</span><span class="s">&quot;do something...&quot;</span><span class="p">)</span> <span class="p">{</span>
                <span class="kd">let</span> <span class="nv">start</span> <span class="p">=</span> <span class="n">Date</span><span class="p">()</span>
                <span class="n">model</span><span class="p">.</span><span class="n">increment</span><span class="p">(</span><span class="n">times</span><span class="p">:</span> <span class="mi">1_000_000</span><span class="p">)</span>
                <span class="n">model</span><span class="p">.</span><span class="n">increment</span><span class="p">(</span><span class="n">times</span><span class="p">:</span> <span class="mi">1_000_005</span><span class="p">)</span>
                <span class="n">model</span><span class="p">.</span><span class="n">decrement</span><span class="p">(</span><span class="n">times</span><span class="p">:</span> <span class="mi">2_000_000</span><span class="p">)</span>
                <span class="kd">let</span> <span class="nv">elapsed</span> <span class="p">=</span> <span class="n">Date</span><span class="p">().</span><span class="n">timeIntervalSince</span><span class="p">(</span><span class="n">start</span><span class="p">)</span>
                <span class="bp">print</span><span class="p">(</span><span class="nb">String</span><span class="p">(</span><span class="n">format</span><span class="p">:</span> <span class="s">&quot;%.05f&quot;</span><span class="p">,</span> <span class="n">elapsed</span><span class="p">))</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="p">.</span><span class="n">padding</span><span class="p">()</span>
    <span class="p">}</span>
<span class="p">}</span>
</div></code></pre><p>Press the button and the desired output <code>5</code> will appear. The time spend in the buttons closure will be printed to the console.</p><h2>Now break it</h2><p>Let's break it by offloading the millions of incrementens and decrements to another Thread. Change the view model like this:</p><pre><code><div class="highlight"><span></span><span class="kd">func</span> <span class="nf">increment</span><span class="p">(</span><span class="n">times</span><span class="p">:</span> <span class="nb">Int</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">DispatchQueue</span><span class="p">(</span><span class="n">label</span><span class="p">:</span> <span class="p">.</span><span class="kd">init</span><span class="p">()).</span><span class="k">async</span> <span class="p">{</span>
        <span class="k">for</span> <span class="kc">_</span> <span class="k">in</span> <span class="mf">1.</span><span class="p">..</span><span class="n">times</span> <span class="p">{</span>
            <span class="kc">self</span><span class="p">.</span><span class="n">counter</span><span class="p">.</span><span class="n">increment</span><span class="p">()</span>
        <span class="p">}</span>
        <span class="n">DispatchQueue</span><span class="p">.</span><span class="n">main</span><span class="p">.</span><span class="k">async</span> <span class="p">{</span>
            <span class="kc">self</span><span class="p">.</span><span class="n">update</span><span class="p">()</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</div></code></pre><p>or</p><pre><code><div class="highlight"><span></span><span class="kd">func</span> <span class="nf">decrement</span><span class="p">(</span><span class="n">times</span><span class="p">:</span> <span class="nb">Int</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">Thread</span> <span class="p">{</span>
        <span class="k">for</span> <span class="kc">_</span> <span class="k">in</span> <span class="mf">1.</span><span class="p">..</span><span class="n">times</span> <span class="p">{</span>
            <span class="kc">self</span><span class="p">.</span><span class="n">counter</span><span class="p">.</span><span class="n">decrement</span><span class="p">()</span>
        <span class="p">}</span>
        <span class="n">DispatchQueue</span><span class="p">.</span><span class="n">main</span><span class="p">.</span><span class="k">async</span> <span class="p">{</span>
            <span class="kc">self</span><span class="p">.</span><span class="n">update</span><span class="p">()</span>
        <span class="p">}</span>
    <span class="p">}.</span><span class="n">start</span><span class="p">()</span>
<span class="p">}</span>
</div></code></pre><p>If you run this now, the time spend in the "do something..." button closure is close to 0, but the UI no longer shows <code>5</code>. There's your obvious data-race.</p><h2>Fix it</h2><p>Let's go into the <code>Counter</code> and introduce a queue that will perform all mutations to the value property:</p><pre><code><div class="highlight"><span></span><span class="kd">class</span> <span class="nc">Counter</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nv">value</span> <span class="p">=</span> <span class="mi">0</span>

    <span class="kd">private</span> <span class="kd">var</span> <span class="nv">queue</span> <span class="p">=</span> <span class="n">DispatchQueue</span><span class="p">(</span><span class="n">label</span><span class="p">:</span> <span class="s">&quot;Counter&quot;</span><span class="p">)</span>

    <span class="kd">func</span> <span class="nf">increment</span><span class="p">()</span> <span class="p">{</span>
        <span class="n">queue</span><span class="p">.</span><span class="n">sync</span> <span class="p">{</span>
            <span class="n">value</span> <span class="o">+=</span> <span class="mi">1</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="kd">func</span> <span class="nf">decrement</span><span class="p">()</span> <span class="p">{</span>
        <span class="n">queue</span><span class="p">.</span><span class="n">sync</span> <span class="p">{</span>
            <span class="n">value</span> <span class="o">-=</span> <span class="mi">1</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</div></code></pre><p>The closure returns immediately and after some time (you really have to give it some time) we're getting the desired <code>5</code> in the UI again. There's a high chance that there are different values shown before all the operations are performed. Press again and it will settle with 10. All good, again.</p><h2>Fix it with an actor</h2><p>Now let's use an actor. Go back to the original <code>Counter</code> but make it an actor.</p><pre><code><div class="highlight"><span></span><span class="kd">actor</span> <span class="n">Counter</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nv">value</span> <span class="p">=</span> <span class="mi">0</span>

    <span class="kd">func</span> <span class="nf">increment</span><span class="p">()</span> <span class="p">{</span>
        <span class="n">value</span> <span class="o">+=</span> <span class="mi">1</span>
    <span class="p">}</span>

    <span class="kd">func</span> <span class="nf">decrement</span><span class="p">()</span> <span class="p">{</span>
        <span class="n">value</span> <span class="o">-=</span> <span class="mi">1</span>
    <span class="p">}</span>
<span class="p">}</span>
</div></code></pre><p>The cool thing is that you can have the compiler guide you from now on. To improve even further on that mark the <code>counterValue</code> property in the view model as <code>@MainActor</code>.</p><pre><code><div class="highlight"><span></span><span class="p">@</span><span class="n">MainActor</span> <span class="p">@</span><span class="n">Published</span> <span class="kd">var</span> <span class="nv">counterValue</span><span class="p">:</span> <span class="nb">String</span><span class="p">?</span>
</div></code></pre><p>Now build and lets go through the errors.</p><p>The first error message is:</p><blockquote><p><code>Actor-isolated instance method 'increment()' can not be referenced from a non-isolated context</code></p></blockquote><p>so let's fix that by awaiting the call to <code>counter.incerement()</code> from an async context. Change <code>increment(times:)</code> to this:</p><pre><code><div class="highlight"><span></span><span class="kd">func</span> <span class="nf">increment</span><span class="p">(</span><span class="n">times</span><span class="p">:</span> <span class="nb">Int</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">Task</span> <span class="p">{</span>
        <span class="k">for</span> <span class="kc">_</span> <span class="k">in</span> <span class="mf">1.</span><span class="p">..</span><span class="n">times</span> <span class="p">{</span>
            <span class="k">await</span> <span class="n">counter</span><span class="p">.</span><span class="n">increment</span><span class="p">()</span>
        <span class="p">}</span>
        <span class="n">update</span><span class="p">()</span> <span class="c1">// not done, yet</span>
    <span class="p">}</span>
<span class="p">}</span>
</div></code></pre><p>Note that you can drop <code>self</code> from <code>self.counter.increment()</code>, again. Do the same for <code>decrement(times:)</code> and you'll get to the next error:</p><blockquote><p><code>Property 'counterValue' isolated to global actor 'MainActor' can not be mutated from this context</code></p></blockquote><p>Xcode even gives us a code action, now. Press fix for <code>'Add '@MainActor' to make instance method 'update()' part of global actor 'MainActor'</code>. Once <code>update()</code> is isolated on the MainActor you need to await all calls to it. The reason is that Swift might need to perform a context switch because your code might not be running on the <code>MainActor</code> at the time you call <code>update()</code>.</p><p>Since <code>init()</code> is a normal Swift function and not an async function we need to put the call to <code>update()</code> in a Task block:</p><pre><code><div class="highlight"><span></span><span class="kd">init</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">counter</span> <span class="p">=</span> <span class="n">Counter</span><span class="p">()</span>
    <span class="n">Task</span> <span class="p">{</span>
        <span class="k">await</span> <span class="n">update</span><span class="p">()</span>
    <span class="p">}</span>
<span class="p">}</span>
</div></code></pre><p>If I understand everything right an async function has it's own execution stack which can be executed and suspended from an operating system thread. So the last error message:</p><blockquote><p><code>Actor-isolated property 'value' can not be referenced from the main actor</code></p></blockquote><p>tells us that the code:</p><pre><code><div class="highlight"><span></span><span class="p">@</span><span class="n">MainActor</span> <span class="kd">private</span> <span class="kd">func</span> <span class="nf">update</span><span class="p">()</span> <span class="p">{</span>
    <span class="bp">assert</span><span class="p">(</span><span class="n">Thread</span><span class="p">.</span><span class="n">isMainThread</span><span class="p">)</span>
    <span class="n">counterValue</span> <span class="p">=</span> <span class="n">counter</span><span class="p">.</span><span class="n">value</span><span class="p">.</span><span class="n">description</span>
<span class="p">}</span>
</div></code></pre><p>has an async execution context (the MainActor) and wants to read a value from another Actor (our Counter Actor). So for this to work we need to send the Counter Actor the message that we want to read its <code>value</code> property. This needs to be awaited. So fix the code like this:</p><pre><code><div class="highlight"><span></span><span class="p">@</span><span class="n">MainActor</span> <span class="kd">private</span> <span class="kd">func</span> <span class="nf">update</span><span class="p">()</span> <span class="k">async</span> <span class="p">{</span>
    <span class="bp">assert</span><span class="p">(</span><span class="n">Thread</span><span class="p">.</span><span class="n">isMainThread</span><span class="p">)</span>
    <span class="n">counterValue</span> <span class="p">=</span> <span class="k">await</span> <span class="n">counter</span><span class="p">.</span><span class="n">value</span><span class="p">.</span><span class="n">description</span>
<span class="p">}</span>
</div></code></pre><p>Here's the updated view model:</p><pre><code><div class="highlight"><span></span><span class="kr">final</span> <span class="kd">class</span> <span class="nc">Model</span><span class="p">:</span> <span class="n">ObservableObject</span> <span class="p">{</span>
    <span class="p">@</span><span class="n">MainActor</span> <span class="p">@</span><span class="n">Published</span> <span class="kd">var</span> <span class="nv">counterValue</span><span class="p">:</span> <span class="nb">String</span><span class="p">?</span>
    <span class="kd">private</span> <span class="kd">var</span> <span class="nv">counter</span><span class="p">:</span> <span class="n">Counter</span>

    <span class="kd">init</span><span class="p">()</span> <span class="p">{</span>
        <span class="n">counter</span> <span class="p">=</span> <span class="n">Counter</span><span class="p">()</span>
        <span class="n">Task</span> <span class="p">{</span>
            <span class="k">await</span> <span class="n">update</span><span class="p">()</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="kd">func</span> <span class="nf">increment</span><span class="p">(</span><span class="n">times</span><span class="p">:</span> <span class="nb">Int</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">Task</span> <span class="p">{</span>
            <span class="k">for</span> <span class="kc">_</span> <span class="k">in</span> <span class="mf">1.</span><span class="p">..</span><span class="n">times</span> <span class="p">{</span>
                <span class="k">await</span> <span class="n">counter</span><span class="p">.</span><span class="n">increment</span><span class="p">()</span>
            <span class="p">}</span>
            <span class="k">await</span> <span class="n">update</span><span class="p">()</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="kd">func</span> <span class="nf">decrement</span><span class="p">(</span><span class="n">times</span><span class="p">:</span> <span class="nb">Int</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">Task</span> <span class="p">{</span>
            <span class="k">for</span> <span class="kc">_</span> <span class="k">in</span> <span class="mf">1.</span><span class="p">..</span><span class="n">times</span> <span class="p">{</span>
                <span class="k">await</span> <span class="n">counter</span><span class="p">.</span><span class="n">decrement</span><span class="p">()</span>
            <span class="p">}</span>
            <span class="k">await</span> <span class="n">update</span><span class="p">()</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="p">@</span><span class="n">MainActor</span> <span class="kd">private</span> <span class="kd">func</span> <span class="nf">update</span><span class="p">()</span> <span class="k">async</span> <span class="p">{</span>
        <span class="bp">assert</span><span class="p">(</span><span class="n">Thread</span><span class="p">.</span><span class="n">isMainThread</span><span class="p">)</span>
        <span class="n">counterValue</span> <span class="p">=</span> <span class="k">await</span> <span class="n">counter</span><span class="p">.</span><span class="n">value</span><span class="p">.</span><span class="n">description</span>
    <span class="p">}</span>
<span class="p">}</span>
</div></code></pre><p>The <code>@MainActor</code> annotation of the <code>@Published</code> property <code>counterValue</code> helps with error messages. Get in the habit and think: "I will use this property in the view so it needs to be modified on the main actor."</p>]]></content:encoded></item><item><guid isPermaLink="true">https://oliver-epper.de/posts/wrap-a-delegate-api-in-async-await</guid><title>Wrap a delegate API in async/await</title><description>How to use an existing delegate API with the new Swift concurrency system</description><link>https://oliver-epper.de/posts/wrap-a-delegate-api-in-async-await</link><pubDate>Fri, 28 Jan 2022 09:41:00 +0100</pubDate><content:encoded><![CDATA[<p>The new Swift concurrency system looks super promising in terms of cleaner and easier to reason about code in a complex application. As with SwiftUI and AppKit/UIKit there's an opportunity to wrap existing APIs and make them availabe via the new APIs.</p><h2>Create a delegate based sample API</h2><p>Although <code>URLSession</code> already has an async/await API we use it to build a super simple delegate based API.</p><pre><code><div class="highlight"><span></span><span class="kd">protocol</span> <span class="nc">DownloaderDelegate</span><span class="p">:</span> <span class="nb">AnyObject</span> <span class="p">{</span>
    <span class="kd">func</span> <span class="nf">downloader</span><span class="p">(</span><span class="kc">_</span> <span class="n">downloader</span><span class="p">:</span> <span class="n">Downloader</span><span class="p">,</span> <span class="n">didFinishDownloadingData</span> <span class="n">data</span><span class="p">:</span> <span class="n">Data</span><span class="p">)</span>
    <span class="kd">func</span> <span class="nf">downloader</span><span class="p">(</span><span class="kc">_</span> <span class="n">downloader</span><span class="p">:</span> <span class="n">Downloader</span><span class="p">,</span> <span class="n">didFailWithError</span> <span class="n">error</span><span class="p">:</span> <span class="n">Error</span><span class="p">)</span>
    <span class="kd">func</span> <span class="nf">downloader</span><span class="p">(</span><span class="kc">_</span> <span class="n">downloader</span><span class="p">:</span> <span class="n">Downloader</span><span class="p">,</span> <span class="n">didFailWithHttpStatusCode</span> <span class="n">code</span><span class="p">:</span> <span class="nb">Int</span><span class="p">)</span>
<span class="p">}</span>
</div></code></pre><pre><code><div class="highlight"><span></span><span class="kd">struct</span> <span class="nc">Downloader</span> <span class="p">{</span>
    <span class="kr">weak</span> <span class="kd">var</span> <span class="nv">delegate</span><span class="p">:</span> <span class="n">DownloaderDelegate</span><span class="p">?</span>

    <span class="kd">func</span> <span class="nf">download</span><span class="p">(</span><span class="n">url</span><span class="p">:</span> <span class="n">URL</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">URLSession</span><span class="p">.</span><span class="n">shared</span><span class="p">.</span><span class="n">dataTask</span><span class="p">(</span><span class="n">with</span><span class="p">:</span> <span class="n">url</span><span class="p">)</span> <span class="p">{</span> <span class="n">data</span><span class="p">,</span> <span class="n">response</span><span class="p">,</span> <span class="n">error</span> <span class="k">in</span>
            <span class="k">if</span> <span class="kd">let</span> <span class="nv">error</span> <span class="p">=</span> <span class="n">error</span> <span class="p">{</span>
                <span class="n">delegate</span><span class="p">?.</span><span class="n">downloader</span><span class="p">(</span><span class="kc">self</span><span class="p">,</span> <span class="n">didFailWithError</span><span class="p">:</span> <span class="n">error</span><span class="p">)</span>
                <span class="k">return</span>
            <span class="p">}</span>

            <span class="k">guard</span> <span class="kd">let</span> <span class="nv">statusCode</span> <span class="p">=</span> <span class="p">(</span><span class="n">response</span> <span class="k">as</span><span class="p">?</span> <span class="n">HTTPURLResponse</span><span class="p">)?.</span><span class="n">statusCode</span> <span class="k">else</span> <span class="p">{</span>
                <span class="bp">fatalError</span><span class="p">()</span>
            <span class="p">}</span>

            <span class="k">guard</span> <span class="n">statusCode</span> <span class="p">==</span> <span class="mi">200</span> <span class="k">else</span> <span class="p">{</span>
                <span class="n">delegate</span><span class="p">?.</span><span class="n">downloader</span><span class="p">(</span><span class="kc">self</span><span class="p">,</span> <span class="n">didFailWithHttpStatusCode</span><span class="p">:</span> <span class="n">statusCode</span><span class="p">)</span>
                <span class="k">return</span>
            <span class="p">}</span>

            <span class="k">guard</span> <span class="kd">let</span> <span class="nv">data</span> <span class="p">=</span> <span class="n">data</span> <span class="k">else</span> <span class="p">{</span>
                <span class="bp">fatalError</span><span class="p">()</span>
            <span class="p">}</span>

            <span class="n">delegate</span><span class="p">?.</span><span class="n">downloader</span><span class="p">(</span><span class="kc">self</span><span class="p">,</span> <span class="n">didFinishDownloadingData</span><span class="p">:</span> <span class="n">data</span><span class="p">)</span>
        <span class="p">}.</span><span class="n">resume</span><span class="p">()</span>
    <span class="p">}</span>
<span class="p">}</span>
</div></code></pre><p>This API is pretty simple you call <code>Downloader().download(url:)</code> and you get either your data, or an error via the delegate protocol.</p><h2>Async/Await</h2><p>What we would like to achieve is the following: <code>DownloaderWrapper().download(url:)</code> which would be an async throwing function that returns either <code>Data</code> or throws an <code>error</code>. So lets sketch that out:</p><pre><code><div class="highlight"><span></span><span class="kd">func</span> <span class="nf">download</span><span class="p">(</span><span class="n">url</span><span class="p">:</span> <span class="n">URL</span><span class="p">)</span> <span class="k">async</span> <span class="kr">throws</span> <span class="p">-&gt;</span> <span class="n">Data</span> <span class="p">{</span>
    <span class="k">return</span> <span class="p">...</span>
<span class="p">}</span>
</div></code></pre><p>From the delegate functions we need to comminucate back to the thing that we want to return. Roughly like with Futures and Promises. In the new Swift concurrency system that thing is a <code>Continuation</code>.</p><pre><code><div class="highlight"><span></span><span class="kd">func</span> <span class="nf">download</span><span class="p">(</span><span class="n">url</span><span class="p">:</span> <span class="n">URL</span><span class="p">)</span> <span class="k">async</span> <span class="kr">throws</span> <span class="p">-&gt;</span> <span class="n">Data</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">try</span> <span class="k">await</span> <span class="n">withCheckedThrowingContinuation</span> <span class="p">{</span>
        <span class="n">download</span> <span class="p">=</span> <span class="nv">$0</span> <span class="c1">// save the continuation to be fullfilled by the delegate functions</span>
        <span class="n">downloader</span><span class="p">.</span><span class="n">download</span><span class="p">(</span><span class="n">url</span><span class="p">:</span> <span class="n">url</span><span class="p">)</span> <span class="c1">// initialize the download via the original API</span>
    <span class="p">}</span>
<span class="p">}</span>
</div></code></pre><p>So the complete Wrapper looks like this:</p><pre><code><div class="highlight"><span></span><span class="kr">final</span> <span class="kd">class</span> <span class="nc">DownloaderWrapper</span><span class="p">:</span> <span class="n">DownloaderDelegate</span> <span class="p">{</span>
    <span class="kd">enum</span> <span class="nc">HTTPError</span><span class="p">:</span> <span class="n">Error</span> <span class="p">{</span>
        <span class="k">case</span> <span class="n">code</span><span class="p">(</span><span class="nb">Int</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="kd">typealias</span> <span class="n">DownloadContinuation</span> <span class="p">=</span> <span class="n">CheckedContinuation</span><span class="p">&lt;</span><span class="n">Data</span><span class="p">,</span> <span class="n">Error</span><span class="p">&gt;</span>
    <span class="kd">private</span> <span class="kd">var</span> <span class="nv">download</span><span class="p">:</span> <span class="n">DownloadContinuation</span><span class="p">?</span>
    <span class="kd">private</span> <span class="kd">var</span> <span class="nv">downloader</span><span class="p">:</span> <span class="n">Downloader</span>

    <span class="kd">init</span><span class="p">()</span> <span class="p">{</span>
        <span class="n">downloader</span> <span class="p">=</span> <span class="n">Downloader</span><span class="p">()</span>
        <span class="n">downloader</span><span class="p">.</span><span class="n">delegate</span> <span class="p">=</span> <span class="kc">self</span>
    <span class="p">}</span>

    <span class="kd">func</span> <span class="nf">downloader</span><span class="p">(</span><span class="kc">_</span> <span class="n">downloader</span><span class="p">:</span> <span class="n">Downloader</span><span class="p">,</span> <span class="n">didFinishDownloadingData</span> <span class="n">data</span><span class="p">:</span> <span class="n">Data</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">download</span><span class="p">?.</span><span class="n">resume</span><span class="p">(</span><span class="n">with</span><span class="p">:</span> <span class="p">.</span><span class="n">success</span><span class="p">(</span><span class="n">data</span><span class="p">))</span>
    <span class="p">}</span>

    <span class="kd">func</span> <span class="nf">downloader</span><span class="p">(</span><span class="kc">_</span> <span class="n">downloader</span><span class="p">:</span> <span class="n">Downloader</span><span class="p">,</span> <span class="n">didFailWithError</span> <span class="n">error</span><span class="p">:</span> <span class="n">Error</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">download</span><span class="p">?.</span><span class="n">resume</span><span class="p">(</span><span class="n">with</span><span class="p">:</span> <span class="p">.</span><span class="n">failure</span><span class="p">(</span><span class="n">error</span><span class="p">))</span>
    <span class="p">}</span>

    <span class="kd">func</span> <span class="nf">downloader</span><span class="p">(</span><span class="kc">_</span> <span class="n">downloader</span><span class="p">:</span> <span class="n">Downloader</span><span class="p">,</span> <span class="n">didFailWithHttpStatusCode</span> <span class="n">code</span><span class="p">:</span> <span class="nb">Int</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">download</span><span class="p">?.</span><span class="n">resume</span><span class="p">(</span><span class="n">with</span><span class="p">:</span> <span class="p">.</span><span class="n">failure</span><span class="p">(</span><span class="n">HTTPError</span><span class="p">.</span><span class="n">code</span><span class="p">(</span><span class="n">code</span><span class="p">)))</span>
    <span class="p">}</span>

    <span class="kd">func</span> <span class="nf">download</span><span class="p">(</span><span class="n">url</span><span class="p">:</span> <span class="n">URL</span><span class="p">)</span> <span class="k">async</span> <span class="kr">throws</span> <span class="p">-&gt;</span> <span class="n">Data</span> <span class="p">{</span>
        <span class="k">return</span> <span class="k">try</span> <span class="k">await</span> <span class="n">withCheckedThrowingContinuation</span> <span class="p">{</span>
            <span class="n">download</span> <span class="p">=</span> <span class="nv">$0</span>
            <span class="n">downloader</span><span class="p">.</span><span class="n">download</span><span class="p">(</span><span class="n">url</span><span class="p">:</span> <span class="n">url</span><span class="p">)</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</div></code></pre><h2>Using the new API</h2><p>So inside a view you can now use the new API in an asynchronous context via a Task</p><pre><code><div class="highlight"><span></span><span class="n">Button</span><span class="p">(</span><span class="s">&quot;Download&quot;</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">Task</span> <span class="p">{</span>
        <span class="k">do</span> <span class="p">{</span>
            <span class="kd">let</span> <span class="nv">data</span> <span class="p">=</span> <span class="k">try</span> <span class="k">await</span> <span class="n">DownloaderWrapper</span><span class="p">().</span><span class="n">download</span><span class="p">(</span><span class="n">url</span><span class="p">:</span> <span class="n">URL</span><span class="p">(</span><span class="n">string</span><span class="p">:</span> <span class="s">&quot;https://oliver-epper.de&quot;</span><span class="p">)</span><span class="o">!</span><span class="p">)</span>
            <span class="n">text</span> <span class="p">=</span> <span class="nb">String</span><span class="p">(</span><span class="n">data</span><span class="p">:</span> <span class="n">data</span><span class="p">,</span> <span class="n">encoding</span><span class="p">:</span> <span class="p">.</span><span class="n">utf8</span><span class="p">)</span>
        <span class="p">}</span> <span class="k">catch</span> <span class="p">{</span>
            <span class="k">if</span> <span class="k">case</span> <span class="kd">let</span> <span class="nv">DownloaderWrapper</span><span class="p">.</span><span class="n">HTTPError</span><span class="p">.</span><span class="n">code</span><span class="p">(</span><span class="n">code</span><span class="p">)</span> <span class="p">=</span> <span class="n">error</span> <span class="p">{</span>
                <span class="n">errorMessage</span> <span class="p">=</span> <span class="s">&quot;HTTP Error: </span><span class="si">\(</span><span class="n">code</span><span class="si">)</span><span class="s">&quot;</span>
            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                <span class="n">errorMessage</span> <span class="p">=</span> <span class="n">error</span><span class="p">.</span><span class="n">localizedDescription</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</div></code></pre><p>Very cool! Thanks <a href="https://twitter.com/ludwigmatthias">Matz</a> and Andy Inbanez <a href="https://www.andyibanez.com/posts/converting-closure-based-code-into-async-await-in-swift/">async/await in Swift</a></p>]]></content:encoded></item><item><guid isPermaLink="true">https://oliver-epper.de/posts/implementing-a-linux-syscall</guid><title>Implementing a Linux syscall</title><description>Implement a syscall in the Linux kernel and call it from userspace</description><link>https://oliver-epper.de/posts/implementing-a-linux-syscall</link><pubDate>Wed, 3 Nov 2021 09:41:00 +0100</pubDate><content:encoded><![CDATA[<h2>Why</h2><p>Honestly, no good reason at all. I am neither a C programmer, nor a kernel hacker. But that said I am curious and this sounds like fun and I get to build a kernel again. Last time must have been version 2.something ;)</p><p><em>Spoiler</em>: Moores Law is not true. It took like 20 minutes to build a kernel 20 years ago, and it still takes 20 minutes ;)</p><h2>Disclaimer</h2><p>This is not my own work, I just searched a little bit on the internet. There is good documentation on <a href="https://www.kernel.org/doc/html/latest/process/adding-syscalls.html?highlight=syscall_define">kernel.org</a> and I got the idea from <a href="https://brennan.io/2016/11/14/kernel-dev-ep3/">Stephen Brennan</a>. I've just searched where to put the things for a linux version 5 arm build.</p><h2>Let's start</h2><p>First I'd recommend to setup a virtual Debian install. I know there are a bunch of nice distributions out there but I used Debian for a long time so that's what I prefer. Furthermore I need something with good aarch64 support since I'm going to play with this on a Mac.</p><p>I tried both Parallels and UTM and for this purpose both should work. You can install UTM via brew: <code>brew install utm</code>. Download a Debian installer and make the ISO available to the virtual machine. Please use more than 10GB for the virtual harddrive, you'll need it.</p><h2>Tools</h2><p>It is advisable to install the Parallels Tools for better performance if you go with Paralles. You can do that as root with</p><pre><code><div class="highlight"><span></span>mount<span class="w"> </span>/dev/cdrom<span class="w"> </span>/media/cdrom0
</div></code></pre><p>and then start the cli installer.</p><p>While you're at it enter</p><pre><code><div class="highlight"><span></span>/sbin/adduser<span class="w"> </span>&lt;your_username&gt;<span class="w"> </span>sudo
</div></code></pre><p>for later. Then run <code>sync &amp;&amp; init 6</code>.</p><h2>The requirements</h2><p>After updating install the following packages:</p><pre><code><div class="highlight"><span></span>sudo<span class="w"> </span>apt-get<span class="w"> </span>install<span class="w"> </span>build-essential<span class="w"> </span>linux-source<span class="w"> </span>bc<span class="w"> </span>kmod<span class="w"> </span>cpio<span class="w"> </span>flex<span class="w"> </span>libncurses5-dev<span class="w"> </span>libelf-dev<span class="w"> </span>libssl-dev<span class="w"> </span>dwarves<span class="w"> </span>rsync
</div></code></pre><h2>Build the kernel</h2><p>Now you can unpack the kernel sources in your home directory:</p><pre><code><div class="highlight"><span></span>tar<span class="w"> </span>xavf<span class="w"> </span>/usr/src/linux-source-5.10.tar.xz
</div></code></pre><p>Since we don't want to change the kernel-config we can just copy the running config.</p><pre><code><div class="highlight"><span></span><span class="nb">cd</span><span class="w"> </span>linux-source-5.10
cp<span class="w"> </span>/boot/config-5.10.0-9-arm64<span class="w"> </span>.config
</div></code></pre><p>Edit the <code>.config</code> file and enter this</p><p><code>CONFIG_SYSTEM_TRUSTED_KEYS = ""</code></p><p>And then run</p><pre><code><div class="highlight"><span></span>make<span class="w"> </span>oldconfig
</div></code></pre><p>To build the kernel packages run</p><pre><code><div class="highlight"><span></span>nice<span class="w"> </span>make<span class="w"> </span>-j<span class="sb">`</span>nproc<span class="sb">`</span><span class="w"> </span>bindeb-pkg
</div></code></pre><h2>Implement the syscall</h2><p>In <code>include/uapi/asm-generic/unistd.h</code></p><pre><code><div class="highlight"><span></span><span class="cp">#define __NR_demo 441</span>
<span class="n">__SYSCALL</span><span class="p">(</span><span class="n">__NR_demo</span><span class="p">,</span><span class="w"> </span><span class="n">sys_demo</span><span class="p">)</span>

<span class="cp">#undef __NR_syscalls</span>
<span class="cp">#define __NR_syscalls 442</span>
</div></code></pre><p>In <code>kernel/sys.c</code></p><pre><code><div class="highlight"><span></span><span class="cm">/*</span>
<span class="cm"> * https://brennan.io/2016/11/14/kernel-dev-ep3/</span>
<span class="cm"> */</span><span class="w"> </span>
<span class="n">SYSCALL_DEFINE1</span><span class="p">(</span><span class="n">demo</span><span class="p">,</span><span class="w"> </span><span class="kt">char</span><span class="w"> </span><span class="o">*</span><span class="p">,</span><span class="w"> </span><span class="n">msg</span><span class="p">)</span>
<span class="p">{</span>
<span class="w">       </span><span class="kt">char</span><span class="w"> </span><span class="n">buf</span><span class="p">[</span><span class="mi">256</span><span class="p">];</span>
<span class="w">       </span><span class="kt">long</span><span class="w"> </span><span class="n">copied</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">strncpy_from_user</span><span class="p">(</span><span class="n">buf</span><span class="p">,</span><span class="w"> </span><span class="n">msg</span><span class="p">,</span><span class="w"> </span><span class="k">sizeof</span><span class="p">(</span><span class="n">buf</span><span class="p">));</span>
<span class="w">       </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">copied</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="mi">0</span><span class="w"> </span><span class="o">||</span><span class="w"> </span><span class="n">copied</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="k">sizeof</span><span class="p">(</span><span class="n">buf</span><span class="p">))</span>
<span class="w">               </span><span class="k">return</span><span class="w"> </span><span class="o">-</span><span class="n">EFAULT</span><span class="p">;</span>
<span class="w">       </span><span class="n">printk</span><span class="p">(</span><span class="n">KERN_INFO</span><span class="w"> </span><span class="s">&quot;demo called with &#39;%s&#39;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="w"> </span><span class="n">buf</span><span class="p">);</span>
<span class="w">       </span><span class="k">return</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</div></code></pre><h2>and the userspace programm</h2><pre><code><div class="highlight"><span></span><span class="cm">/*</span>
<span class="cm"> * https://brennan.io/2016/11/14/kernel-dev-ep3/</span>
<span class="cm"> */</span><span class="w"> </span>
<span class="cp">#define _GNU_SOURCE</span>
<span class="cp">#include</span><span class="w"> </span><span class="cpf">&lt;unistd.h&gt;</span>
<span class="cp">#include</span><span class="w"> </span><span class="cpf">&lt;sys/syscall.h&gt;</span>
<span class="cp">#include</span><span class="w"> </span><span class="cpf">&lt;stdio.h&gt;</span>

<span class="cp">#define SYS_demo 441</span>

<span class="kt">int</span><span class="w"> </span><span class="nf">main</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">argc</span><span class="p">,</span><span class="w"> </span><span class="kt">char</span><span class="w"> </span><span class="o">**</span><span class="n">argv</span><span class="p">)</span>
<span class="p">{</span>
<span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">argc</span><span class="w"> </span><span class="o">&lt;=</span><span class="w"> </span><span class="mi">1</span><span class="p">)</span><span class="w"> </span><span class="p">{</span>
<span class="w">                </span><span class="n">printf</span><span class="p">(</span><span class="s">&quot;Must provide a log string</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
<span class="w">                </span><span class="k">return</span><span class="w"> </span><span class="mi">-1</span><span class="p">;</span>
<span class="w">        </span><span class="p">}</span>

<span class="w">        </span><span class="kt">char</span><span class="w"> </span><span class="o">*</span><span class="n">arg</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span>
<span class="w">        </span><span class="n">printf</span><span class="p">(</span><span class="s">&quot;Making call with &#39;%s&#39;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="w"> </span><span class="n">arg</span><span class="p">);</span>
<span class="w">        </span><span class="kt">long</span><span class="w"> </span><span class="n">res</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">syscall</span><span class="p">(</span><span class="n">SYS_demo</span><span class="p">,</span><span class="w"> </span><span class="n">arg</span><span class="p">);</span>
<span class="w">        </span><span class="n">printf</span><span class="p">(</span><span class="s">&quot;System call returned %ld.</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="w"> </span><span class="n">res</span><span class="p">);</span>
<span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="n">res</span><span class="p">;</span>
<span class="p">}</span>
</div></code></pre><h2>Install the kernel</h2><p>If you're using Parallels this would be a good time to take a snapshot, just in case ;)</p><pre><code><div class="highlight"><span></span>sudo<span class="w"> </span>dpkg<span class="w"> </span>--install<span class="w"> </span>linux-image-5.10.70-dbg_5.10.70-1_arm64.deb
sync
sudo<span class="w"> </span>init<span class="w"> </span><span class="m">6</span>
</div></code></pre><h2>Test the thing</h2><pre><code><div class="highlight"><span></span>gcc<span class="w"> </span>-o<span class="w"> </span>demo<span class="w"> </span>demo.c
./demo<span class="w"> </span><span class="s2">&quot;but why?&quot;</span>
sudo<span class="w"> </span>dmesg
./demo<span class="w"> </span><span class="s2">&quot;For the fun of it ;)&quot;</span>
</div></code></pre><pre><code><div class="highlight"><span></span><span class="p">[</span>   <span class="mf">55.833906</span><span class="p">]</span> <span class="n">demo</span> <span class="n">called</span> <span class="n">with</span> <span class="err">&#39;</span><span class="n">but</span> <span class="n">why</span><span class="p">?</span><span class="err">&#39;</span>
<span class="p">[</span>   <span class="mf">71.208406</span><span class="p">]</span> <span class="n">demo</span> <span class="n">called</span> <span class="n">with</span> <span class="err">&#39;</span><span class="n">For</span> <span class="n">the</span> <span class="n">fun</span> <span class="n">of</span> <span class="n">it</span> <span class="p">;)</span><span class="err">&#39;</span>
</div></code></pre>]]></content:encoded></item><item><guid isPermaLink="true">https://oliver-epper.de/posts/using-private-api</guid><title>Using private API</title><description>Find and use API that is private</description><link>https://oliver-epper.de/posts/using-private-api</link><pubDate>Thu, 7 Oct 2021 09:41:00 +0200</pubDate><content:encoded><![CDATA[<h2>The idea</h2><p>I needed a little tool that could show me which app has registered a certain URL on my Mac. Since the ouput of <code>lsregister -dump</code> is not quite eyecandy I decided to hack together a minimal tool that could do two things:</p><ul><li>show me a list of all registered URLs and their handlers</li><li>be able to unregister a handler</li></ul><p>Unfortunately the public API of LaunchServices doesn't help with any of these.</p><h2>The rescue</h2><p>Well, <code>lsregister</code> can unregister apps so it's time to drop it into <a href="https://www.hopperapp.com">Hopper</a> and start digging around. Often times this is way easier than you think. Drop lsregister into Hopper and search for unregister. You'll find a symbol <code>_LSUnregisterURL</code> immediately. If you don't have Hopper available you can use <code>nm lsregister | grep register</code>.</p><h2>The trick</h2><p><a href="https://www.helgehess.eu">Helge Heß</a> pointed me to a nice way of making a private function available in Swift. Basically you can load a symbol with <code>dlsym</code> and then cast it to a type that has C calling convention.</p><pre><code><div class="highlight"><span></span><span class="kd">private</span> <span class="kd">let</span> <span class="nv">handle</span> <span class="p">=</span> <span class="n">dlopen</span><span class="p">(</span><span class="kc">nil</span><span class="p">,</span> <span class="n">RTLD_NOW</span><span class="p">)</span>
<span class="kd">private</span> <span class="kd">let</span> <span class="nv">fnUnregister</span> <span class="p">=</span> <span class="n">dlsym</span><span class="p">(</span><span class="n">handle</span><span class="p">,</span> <span class="s">&quot;_LSUnregisterURL&quot;</span><span class="p">)</span>
<span class="kd">typealias</span> <span class="n">fnUnregisterType</span> <span class="p">=</span> <span class="p">@</span><span class="n">convention</span><span class="p">(</span><span class="n">c</span><span class="p">)</span> <span class="p">(</span><span class="n">CFURL</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="n">OSStatus</span>

<span class="c1">// now you can cast</span>
<span class="kd">let</span> <span class="nv">LSUnregisterURL</span> <span class="p">=</span> <span class="bp">unsafeBitCast</span><span class="p">(</span><span class="n">fnUnregister</span><span class="p">,</span> <span class="n">to</span><span class="p">:</span> <span class="n">fnUnregisterType</span><span class="p">.</span><span class="kc">self</span><span class="p">)</span>

<span class="c1">// and call the function</span>
<span class="kd">let</span> <span class="nv">result</span> <span class="p">=</span> <span class="n">LSUnregisterURL</span><span class="p">(</span><span class="n">url</span> <span class="k">as</span> <span class="n">CFURL</span><span class="p">)</span>
</div></code></pre><h2>The constraints</h2><p>Actually you cannot run this function out of a sandbox. The obvious choice for such a tool would be to just disable the sandbox but hey: Why not wrap it in an XPCService?</p><h2>The tool</h2><p>If you want to check out the tool or find it useful yourself you can find it here: <a href="https://oliver-epper.de/apps/schemes/">Schemes</a>. Source available here: <a href="https://github.com/oliverepper/Schemes">Scheme Source</a>.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://oliver-epper.de/posts/bikerr</guid><title>BikeRR</title><description>Bike Ride Recorder - An automatic trip recorder</description><link>https://oliver-epper.de/posts/bikerr</link><pubDate>Tue, 17 Aug 2021 09:41:00 +0200</pubDate><content:encoded><![CDATA[<h1>BikeRR - Automatic Trip Recorder</h1><figure>
    <picture>
        <source srcset="/images/BikeRR-dark.png" media="(prefers-color-scheme: dark)">
        <img src="https://oliver-epper.de/images/BikeRR.png" alt="BikeRR">
    </picture>
</figure><p><a href="https://apps.apple.com/us/app/bikerr/id1563573465">AppStore</a></p><h3>What BikeRR does</h3><p>BikeRR sets up a geofence or region monitor (a 100m circle) around your current location. When you leave that circle the app wakes up and immediatley starts recording location data. It queries the iPhone for your detected motion activity, too. If that motion is cycling (or what you configured it to be) BikeRR will continue to record a trip, if not BikeRR will stop and set up a new region monitor. You don't have to do anything.</p><h3>What BikeRR doesn't do</h3><p>BikeRR does not collect any data about you. Your location data never leaves the device unless you decide to export a trip.</p><h3>Quality of Motion Activity Recognition</h3><p>If you record the automotive activity and have your phone connected to carplay or the like it is super stable. You can sit in a traffic jam all day and the iphone will still "know" with a high confidence that you're driving. Running is a pretty stable state, too. You can adjust the grace period under Settings when you triple tap on the label "Autorecorded Activities".</p><h3>Manual Mode</h3><p>If you want to see a trip saved to the database just triple-tap on the label Location Service. This will start BikeRR in manual mode. CAUTON! This will record forever or until you triple-tap Location Service, again. Wait until BikeRR has collected about 50 locations (you need five more then what you have configured as grace period) before you stop it and then you should have a trip in the trip list.</p><h3>Trip List</h3><p>If you don't see a picture of your trip on a map, please triple tap any information of the trip summary. That will augment the trip with pictures for light and darkmode.</p><h3>Contact Information</h3><p>If you have any questions please contact <a href="mailto:oliep@bikerr.app">me</a></p>]]></content:encoded></item><item><guid isPermaLink="true">https://oliver-epper.de/posts/swift-and-cpp-interoperability-with-grpc-part1</guid><title>Swift and C++ interoperability with gRPC part 1</title><description>Let's (mis-)use gRPC to create Swift and C++ interoperability</description><link>https://oliver-epper.de/posts/swift-and-cpp-interoperability-with-grpc-part1</link><pubDate>Thu, 1 Jul 2021 09:41:00 +0200</pubDate><content:encoded><![CDATA[<h2>Prolog</h2><p>This is going to be fun. I will show you how you can embed a gRPC server written in C++ in a Swift programm that you can run on a Mac or an iPhone. I'll use another gRPC server written in Swift so that not only the Swift part can call into C++ via gRPC but the C++ part can call into Swift via gRPC as well – all in the same process, of course :-D</p><h2>But why?</h2><p>Well first it's <strong>fun</strong>, second you can learn a few things along the way and third: Given the right situation and constraints this can be a great idea!</p><h2>Warning</h2><p>There're definitely a few other – more straight forward ways – of doing Swift/C++ interoperability; not all great though and with different trade offs. If you read through the end you know enough to decide wether or not this is for you.</p><p><em>I do want to mention that Swift is – by far – the coolest programming language that I've came across and that it runs on Darwin, Linux and Windows and that you should really revistit your life choices if you manouvered yourself in the corner googleing for an article like this ;)</em></p><h2>Start easy - create a demo library</h2><p>Let's first create a little library in C++ that uses some random dependencies and cross-compile that for iPhone, iPhone simulators and the Mac running on Intel or Apple-Silicon. To enable multi-architectures we'll use fat-libs and to enable multi-platform support we'll stuff these fat-libs into a xcframework. All will be done via CMake, the <a href="https://github.com/leetal/ios-cmake">ios-cmake</a> toolchain and a small shell script.</p><h3>chukle library</h3><p>Start by creating a directory and a few files:</p><pre><code><div class="highlight"><span></span>mkdir<span class="w"> </span>chuckle<span class="w"> </span><span class="o">&amp;&amp;</span>
touch<span class="w"> </span>chuckle/<span class="o">{</span>chuckle.cpp,chuckle.h,Cli.cpp,CMakeLists.txt<span class="o">}</span>
</div></code></pre><p>And add the following content:</p><h4>chuckle.h</h4><pre><code><div class="highlight"><span></span><span class="cp">#ifndef CHUCKLE_CHUCKLE_H</span>
<span class="cp">#define CHUCKLE_CHUCKLE_H</span>

<span class="cp">#include</span><span class="w"> </span><span class="cpf">&lt;string&gt;</span>

<span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="w"> </span><span class="nf">joke</span><span class="p">();</span>

<span class="cp">#endif </span><span class="c1">//CHUCKLE_CHUCKLE_H</span>
</div></code></pre><h4>chuckle.cpp</h4><pre><code><div class="highlight"><span></span><span class="cp">#include</span><span class="w"> </span><span class="cpf">&quot;chuckle.h&quot;</span>
<span class="cp">#include</span><span class="w"> </span><span class="cpf">&lt;cpr/cpr.h&gt;</span>
<span class="cp">#include</span><span class="w"> </span><span class="cpf">&lt;nlohmann/json.hpp&gt;</span>

<span class="k">using</span><span class="w"> </span><span class="k">namespace</span><span class="w"> </span><span class="nn">cpr</span><span class="p">;</span>
<span class="k">using</span><span class="w"> </span><span class="n">json</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">nlohmann</span><span class="o">::</span><span class="n">json</span><span class="p">;</span>

<span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="w"> </span><span class="nf">joke</span><span class="p">()</span><span class="w"> </span><span class="p">{</span>
<span class="w">    </span><span class="n">Response</span><span class="w"> </span><span class="n">r</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Get</span><span class="p">(</span><span class="n">Url</span><span class="p">(</span><span class="s">&quot;https://api.chucknorris.io/jokes/random&quot;</span><span class="p">));</span>
<span class="w">    </span><span class="n">json</span><span class="w"> </span><span class="n">j</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">json</span><span class="o">::</span><span class="n">parse</span><span class="p">(</span><span class="n">r</span><span class="p">.</span><span class="n">text</span><span class="p">);</span>

<span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="n">j</span><span class="p">[</span><span class="s">&quot;value&quot;</span><span class="p">];</span>
<span class="p">}</span>
</div></code></pre><h4>Cli.cpp</h4><pre><code><div class="highlight"><span></span><span class="cp">#include</span><span class="w"> </span><span class="cpf">&quot;chuckle.h&quot;</span>
<span class="cp">#include</span><span class="w"> </span><span class="cpf">&lt;iostream&gt;</span>

<span class="k">using</span><span class="w"> </span><span class="k">namespace</span><span class="w"> </span><span class="nn">std</span><span class="p">;</span>

<span class="kt">int</span><span class="w"> </span><span class="nf">main</span><span class="p">()</span><span class="w"> </span><span class="p">{</span>
<span class="w">    </span><span class="n">cout</span><span class="w"> </span><span class="o">&lt;&lt;</span><span class="w"> </span><span class="n">joke</span><span class="p">()</span><span class="w"> </span><span class="o">&lt;&lt;</span><span class="w"> </span><span class="n">endl</span><span class="p">;</span>
<span class="w">    </span>
<span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</div></code></pre><p>and finally</p><h4>CMakeLists.txt</h4><pre><code><div class="highlight"><span></span><span class="nb">cmake_minimum_required</span><span class="p">(</span><span class="s">VERSION</span><span class="w"> </span><span class="s">3.19</span><span class="p">)</span>
<span class="nb">project</span><span class="p">(</span><span class="s">chuckle</span><span class="p">)</span>

<span class="nb">set</span><span class="p">(</span><span class="s">CMAKE_CXX_STANDARD</span><span class="w"> </span><span class="s">17</span><span class="p">)</span>

<span class="nb">set</span><span class="p">(</span><span class="s">CPR_BUILD_TESTS</span><span class="w"> </span><span class="s">OFF</span><span class="p">)</span>
<span class="nb">set</span><span class="p">(</span><span class="s">CPR_BUILD_TESTS_SSL</span><span class="w"> </span><span class="s">OFF</span><span class="p">)</span>

<span class="nb">include</span><span class="p">(</span><span class="s">FetchContent</span><span class="p">)</span>
<span class="nb">FetchContent_Declare</span><span class="p">(</span>
<span class="w">        </span><span class="s">cpr</span>
<span class="w">        </span><span class="s">GIT_REPOSITORY</span><span class="w"> </span><span class="s">https://github.com/whoshuu/cpr.git</span>
<span class="w">        </span><span class="s">GIT_TAG</span><span class="w"> </span><span class="s">1.6.2</span><span class="p">)</span>
<span class="nb">FetchContent_MakeAvailable</span><span class="p">(</span><span class="s">cpr</span><span class="p">)</span>

<span class="nb">FetchContent_Declare</span><span class="p">(</span><span class="s">json</span>
<span class="w">        </span><span class="s">GIT_REPOSITORY</span><span class="w"> </span><span class="s">https://github.com/nlohmann/json.git</span>
<span class="w">        </span><span class="s">GIT_TAG</span><span class="w"> </span><span class="s">v3.7.3</span><span class="p">)</span>
<span class="nb">FetchContent_GetProperties</span><span class="p">(</span><span class="s">json</span><span class="p">)</span>
<span class="nb">if</span><span class="p">(</span><span class="s">NOT</span><span class="w"> </span><span class="s">json_POPULATED</span><span class="p">)</span>
<span class="w">    </span><span class="nb">FetchContent_Populate</span><span class="p">(</span><span class="s">json</span><span class="p">)</span>
<span class="w">    </span><span class="nb">add_subdirectory</span><span class="p">(</span><span class="o">${</span><span class="nv">json_SOURCE_DIR</span><span class="o">}</span><span class="w"> </span><span class="o">${</span><span class="nv">json_BINARY_DIR</span><span class="o">}</span><span class="w"> </span><span class="s">EXCLUDE_FROM_ALL</span><span class="p">)</span>
<span class="nb">endif</span><span class="p">()</span>

<span class="nb">add_library</span><span class="p">(</span><span class="s">chuckle</span><span class="w"> </span><span class="s">chuckle.cpp</span><span class="w"> </span><span class="s">chuckle.h</span><span class="p">)</span>
<span class="nb">add_executable</span><span class="p">(</span><span class="s">joke</span><span class="w"> </span><span class="s">Cli.cpp</span><span class="p">)</span>

<span class="nb">target_link_libraries</span><span class="p">(</span><span class="s">chuckle</span><span class="w"> </span><span class="s">PRIVATE</span><span class="w"> </span><span class="s">cpr::cpr</span><span class="w"> </span><span class="s">nlohmann_json::nlohmann_json</span><span class="p">)</span>
<span class="nb">target_link_libraries</span><span class="p">(</span><span class="s">joke</span><span class="w"> </span><span class="s">chuckle</span><span class="p">)</span>
</div></code></pre><p>I am not a C++ programmer but I think the C++ code is quite readable. There's a free function <code>joke()</code> that returns a <code>std::string</code> representing a Joke – how usefull is that!</p><p>I used two dependencies for this great programm:</p><ul><li><a href="https://github.com/whoshuu/cpr">C++ Requests: Curl for People</a></li><li><a href="https://github.com/nlohmann/json">JSON for Modern C++</a></li></ul><p>If you never used CMake before – I didn't – let me point out a few things. <code>add_library</code> and <code>add_executable</code> add a target to the CMake project. <code>target_link_libraries</code> configures the linker to link build artefacts into products. In the above example you will end with the library <code>libchuckle</code> that we will use and a command line programm <code>joke</code> that you can run to test the library.</p><p>Both <code>FetchContent</code>-blocks are taken from the documentation from the two libraries that we use. Note that I configured the build of cpr by setting the two variables <code>CPR_BUILD_TESTS</code> and <code>CPR_BUILD_TESTS_SSL</code> to <code>OFF</code>.</p><p>We should be able to print a joke to the terminal, now. From inside the <code>chuckle</code> folder do the following:</p><pre><code><div class="highlight"><span></span>mkdir<span class="w"> </span>out<span class="w"> </span><span class="o">&amp;&amp;</span>
<span class="nb">cd</span><span class="w"> </span>out<span class="w"> </span><span class="o">&amp;&amp;</span>
cmake<span class="w"> </span>..
</div></code></pre><p>This will download the dependencies and configure the build system. Once that's done you can build everything with:</p><pre><code><div class="highlight"><span></span>make
</div></code></pre><p>and run the cli:</p><pre><code><div class="highlight"><span></span>./joke
</div></code></pre><blockquote><p>Chuck Norris can mix water and oil.</p></blockquote><p>Let's inspect what we have got so far:</p><ul><li>the <code>joke</code> programm and</li><li><code>libchuckle.dylib</code></li></ul><p>Check the binary with <code>otool -L joke</code> you'll see something like this:</p><pre><code><div class="highlight"><span></span><span class="n">joke</span><span class="p">:</span>
	<span class="p">@</span><span class="n">rpath</span><span class="o">/</span><span class="n">libchuckle</span><span class="p">.</span><span class="n">dylib</span> <span class="p">(</span><span class="n">compatibility</span> <span class="n">version</span> <span class="mf">0.0</span><span class="p">.</span><span class="mi">0</span><span class="p">,</span> <span class="n">current</span> <span class="n">version</span> <span class="mf">0.0</span><span class="p">.</span><span class="mi">0</span><span class="p">)</span>
	<span class="p">@</span><span class="n">rpath</span><span class="o">/</span><span class="n">libcpr</span><span class="p">.</span><span class="mf">1.</span><span class="n">dylib</span> <span class="p">(</span><span class="n">compatibility</span> <span class="n">version</span> <span class="mf">1.0</span><span class="p">.</span><span class="mi">0</span><span class="p">,</span> <span class="n">current</span> <span class="n">version</span> <span class="mf">1.6</span><span class="p">.</span><span class="mi">0</span><span class="p">)</span>
	<span class="p">@</span><span class="n">rpath</span><span class="o">/</span><span class="n">libcurl</span><span class="o">-</span><span class="n">d</span><span class="p">.</span><span class="n">dylib</span> <span class="p">(</span><span class="n">compatibility</span> <span class="n">version</span> <span class="mf">0.0</span><span class="p">.</span><span class="mi">0</span><span class="p">,</span> <span class="n">current</span> <span class="n">version</span> <span class="mf">0.0</span><span class="p">.</span><span class="mi">0</span><span class="p">)</span>
	<span class="o">/</span><span class="n">System</span><span class="o">/</span><span class="n">Library</span><span class="o">/</span><span class="n">Frameworks</span><span class="o">/</span><span class="n">CoreFoundation</span><span class="p">.</span><span class="n">framework</span><span class="o">/</span><span class="n">Versions</span><span class="o">/</span><span class="n">A</span><span class="o">/</span><span class="n">CoreFoundation</span> <span class="p">(</span><span class="n">compatibility</span> <span class="n">version</span> <span class="mf">150.0</span><span class="p">.</span><span class="mi">0</span><span class="p">,</span> <span class="n">current</span> <span class="n">version</span> <span class="mf">1775.118</span><span class="p">.</span><span class="mi">101</span><span class="p">)</span>
	<span class="o">/</span><span class="n">System</span><span class="o">/</span><span class="n">Library</span><span class="o">/</span><span class="n">Frameworks</span><span class="o">/</span><span class="n">Security</span><span class="p">.</span><span class="n">framework</span><span class="o">/</span><span class="n">Versions</span><span class="o">/</span><span class="n">A</span><span class="o">/</span><span class="n">Security</span> <span class="p">(</span><span class="n">compatibility</span> <span class="n">version</span> <span class="mf">1.0</span><span class="p">.</span><span class="mi">0</span><span class="p">,</span> <span class="n">current</span> <span class="n">version</span> <span class="mf">59754.100</span><span class="p">.</span><span class="mi">106</span><span class="p">)</span>
	<span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">lib</span><span class="o">/</span><span class="n">libz</span><span class="p">.</span><span class="mf">1.</span><span class="n">dylib</span> <span class="p">(</span><span class="n">compatibility</span> <span class="n">version</span> <span class="mf">1.0</span><span class="p">.</span><span class="mi">0</span><span class="p">,</span> <span class="n">current</span> <span class="n">version</span> <span class="mf">1.2</span><span class="p">.</span><span class="mi">11</span><span class="p">)</span>
	<span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">lib</span><span class="o">/</span><span class="n">libc</span><span class="o">++</span><span class="p">.</span><span class="mf">1.</span><span class="n">dylib</span> <span class="p">(</span><span class="n">compatibility</span> <span class="n">version</span> <span class="mf">1.0</span><span class="p">.</span><span class="mi">0</span><span class="p">,</span> <span class="n">current</span> <span class="n">version</span> <span class="mf">905.6</span><span class="p">.</span><span class="mi">0</span><span class="p">)</span>
	<span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">lib</span><span class="o">/</span><span class="n">libSystem</span><span class="p">.</span><span class="n">B</span><span class="p">.</span><span class="n">dylib</span> <span class="p">(</span><span class="n">compatibility</span> <span class="n">version</span> <span class="mf">1.0</span><span class="p">.</span><span class="mi">0</span><span class="p">,</span> <span class="n">current</span> <span class="n">version</span> <span class="mf">1292.100</span><span class="p">.</span><span class="mi">5</span><span class="p">)</span>
</div></code></pre><p>That tells you that joke needs libchuckle.dylib to operate and that it doesn't really carry the meat from libchuckle in the binary. Check the size of the binary:</p><pre><code><div class="highlight"><span></span>ls<span class="w"> </span>-lahs<span class="w"> </span>joke
</div></code></pre><p>It's 64k.</p><p>If you have <a href="https://www.hopperapp.com">Hopper</a> – which I highly recommend – I want to show you something. Open the binary in Hopper and search for the label joke(). Click on the first occurence and then enable pseudo-code in Hopper:</p><pre><code><div class="highlight"><span></span><span class="n">void</span> <span class="n">_Z4jokev</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">pointer</span> <span class="n">to</span> <span class="n">joke</span><span class="p">();</span>
    <span class="k">return</span><span class="p">;</span>
<span class="p">}</span>
</div></code></pre><p>It's just a pointer. Not the real deal. <code>libchuckle.dylib</code> has it. Check if you want to :-D</p><h4>build a static library</h4><p>Building libchuckle as a static library is easy with CMake. Just add the STATIC keyword to the chuckle target:</p><pre><code><div class="highlight"><span></span><span class="nb">add_library</span><span class="p">(</span><span class="s">chuckle</span><span class="w"> </span><span class="s">STATIC</span><span class="w"> </span><span class="s">chuckle.cpp</span><span class="w"> </span><span class="s">chuckle.h</span><span class="p">)</span>
</div></code></pre><p>This time you might want to generate the build system in another folder:</p><pre><code><div class="highlight"><span></span>mkdir<span class="w"> </span>static<span class="w"> </span><span class="o">&amp;&amp;</span>
<span class="nb">cd</span><span class="w"> </span>static<span class="w"> </span><span class="o">&amp;&amp;</span>
cmake<span class="w"> </span>..<span class="w"> </span><span class="o">&amp;&amp;</span>
make
</div></code></pre><p>Now <code>joke</code> is much larger (854 kb) and instead of <code>libchuckle.dylib</code> we have <code>libchuckle.a</code> a static library. If you open <code>joke</code> in Hopper again you'll see the following as pseudo-code for <code>joke()</code>:</p><pre><code><div class="highlight"><span></span><span class="n">int</span> <span class="n">__Z4jokev</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">r31</span> <span class="p">=</span> <span class="n">r31</span> <span class="o">-</span> <span class="mh">0x1d0</span><span class="p">;</span>
    <span class="n">var_10</span> <span class="p">=</span> <span class="n">r28</span><span class="p">;</span>
    <span class="n">stack</span><span class="p">[</span><span class="o">-</span><span class="mi">24</span><span class="p">]</span> <span class="p">=</span> <span class="n">r27</span><span class="p">;</span>
    <span class="n">saved_fp</span> <span class="p">=</span> <span class="n">r29</span><span class="p">;</span>
    <span class="n">stack</span><span class="p">[</span><span class="o">-</span><span class="mi">8</span><span class="p">]</span> <span class="p">=</span> <span class="n">r30</span><span class="p">;</span>
    <span class="n">r29</span> <span class="p">=</span> <span class="p">&amp;</span><span class="n">saved_fp</span><span class="p">;</span>
    <span class="n">var_1A8</span> <span class="p">=</span> <span class="n">r8</span><span class="p">;</span>
    <span class="n">cpr</span><span class="p">::</span><span class="n">Url</span><span class="p">::</span><span class="n">Url</span><span class="p">(&amp;</span><span class="n">stack</span><span class="p">[</span><span class="o">-</span><span class="mi">384</span><span class="p">]);</span>
    <span class="n">cpr</span><span class="p">::</span><span class="n">Response</span> <span class="n">cpr</span><span class="p">::</span><span class="n">Get</span><span class="p">&lt;</span><span class="n">cpr</span><span class="p">::</span><span class="n">Url</span><span class="p">&gt;(&amp;</span><span class="n">stack</span><span class="p">[</span><span class="o">-</span><span class="mi">384</span><span class="p">]);</span>
    <span class="n">cpr</span><span class="p">::</span><span class="n">Url</span><span class="p">::</span><span class="o">~</span><span class="n">Url</span><span class="p">();</span>
    <span class="n">nlohmann</span><span class="p">::</span><span class="n">detail</span><span class="p">::</span><span class="n">input_adapter</span><span class="p">::</span><span class="n">input_adapter</span><span class="p">&lt;</span><span class="n">std</span><span class="p">::</span><span class="n">__1</span><span class="p">::</span><span class="n">basic_string</span><span class="p">&lt;</span><span class="n">char</span><span class="p">,</span> <span class="n">std</span><span class="p">::</span><span class="n">__1</span><span class="p">::</span><span class="n">char_traits</span><span class="p">&lt;</span><span class="n">char</span><span class="p">&gt;,</span> <span class="n">std</span><span class="p">::</span><span class="n">__1</span><span class="p">::</span><span class="n">allocator</span><span class="p">&lt;</span><span class="n">char</span><span class="p">&gt;</span> <span class="o">&gt;</span><span class="p">,</span> <span class="mi">0</span><span class="p">&gt;(&amp;</span><span class="n">stack</span><span class="p">[</span><span class="o">-</span><span class="mi">432</span><span class="p">]);</span>
    <span class="n">std</span><span class="p">::</span><span class="n">__1</span><span class="p">::</span><span class="n">function</span><span class="p">&lt;</span><span class="n">bool</span> <span class="p">(</span><span class="n">r29</span> <span class="o">-</span> <span class="mh">0x38</span><span class="p">);</span>
    <span class="n">nlohmann</span><span class="p">::</span><span class="n">basic_json</span><span class="p">&lt;</span><span class="n">std</span><span class="p">::</span><span class="n">__1</span><span class="p">::</span><span class="bp">map</span><span class="p">,</span> <span class="n">std</span><span class="p">::</span><span class="n">__1</span><span class="p">::</span><span class="n">vector</span><span class="p">,</span> <span class="n">std</span><span class="p">::</span><span class="n">__1</span><span class="p">::</span><span class="n">basic_string</span><span class="p">&lt;</span><span class="n">char</span><span class="p">,</span> <span class="n">std</span><span class="p">::</span><span class="n">__1</span><span class="p">::</span><span class="n">char_traits</span><span class="p">&lt;</span><span class="n">char</span><span class="p">&gt;,</span> <span class="n">std</span><span class="p">::</span><span class="n">__1</span><span class="p">::</span><span class="n">allocator</span><span class="p">&lt;</span><span class="n">char</span><span class="p">&gt;</span> <span class="o">&gt;</span><span class="p">,</span> <span class="n">bool</span><span class="p">,</span> <span class="n">long</span> <span class="n">long</span><span class="p">,</span> <span class="n">unsigned</span> <span class="n">long</span> <span class="n">long</span><span class="p">,</span> <span class="n">double</span><span class="p">,</span> <span class="n">std</span><span class="p">::</span><span class="n">__1</span><span class="p">::</span><span class="n">allocator</span><span class="p">,</span> <span class="n">nlohmann</span><span class="p">::</span><span class="n">adl_serializer</span><span class="p">&gt;::</span><span class="n">parse</span><span class="p">(&amp;</span><span class="n">stack</span><span class="p">[</span><span class="o">-</span><span class="mi">432</span><span class="p">],</span> <span class="n">r29</span> <span class="o">-</span> <span class="mh">0x38</span><span class="p">,</span> <span class="mh">0x1</span><span class="p">);</span>
    <span class="n">std</span><span class="p">::</span><span class="n">__1</span><span class="p">::</span><span class="n">function</span><span class="p">&lt;</span><span class="n">bool</span> <span class="p">();</span>
    <span class="n">nlohmann</span><span class="p">::</span><span class="n">detail</span><span class="p">::</span><span class="n">input_adapter</span><span class="p">::</span><span class="o">~</span><span class="n">input_adapter</span><span class="p">();</span>
    <span class="n">r0</span> <span class="p">=</span> <span class="n">nlohmann</span><span class="p">::</span><span class="n">basic_json</span><span class="p">&lt;</span><span class="n">std</span><span class="p">::</span><span class="n">__1</span><span class="p">::</span><span class="bp">map</span><span class="p">,</span> <span class="n">std</span><span class="p">::</span><span class="n">__1</span><span class="p">::</span><span class="n">vector</span><span class="p">,</span> <span class="n">std</span><span class="p">::</span><span class="n">__1</span><span class="p">::</span><span class="n">basic_string</span><span class="p">&lt;</span><span class="n">char</span><span class="p">,</span> <span class="n">std</span><span class="p">::</span><span class="n">__1</span><span class="p">::</span><span class="n">char_traits</span><span class="p">&lt;</span><span class="n">char</span><span class="p">&gt;,</span> <span class="n">std</span><span class="p">::</span><span class="n">__1</span><span class="p">::</span><span class="n">allocator</span><span class="p">&lt;</span><span class="n">char</span><span class="p">&gt;</span> <span class="o">&gt;</span><span class="p">,</span> <span class="n">bool</span><span class="p">,</span> <span class="n">long</span> <span class="n">long</span><span class="p">,</span> <span class="n">unsigned</span> <span class="n">long</span> <span class="n">long</span><span class="p">,</span> <span class="n">double</span><span class="p">,</span> <span class="n">std</span><span class="p">::</span><span class="n">__1</span><span class="p">::</span><span class="n">allocator</span><span class="p">,</span> <span class="n">nlohmann</span><span class="p">::</span><span class="n">adl_serializer</span><span class="p">&gt;</span><span class="o">&amp;</span> <span class="n">nlohmann</span><span class="p">::</span><span class="n">basic_json</span><span class="p">&lt;</span><span class="n">std</span><span class="p">::</span><span class="n">__1</span><span class="p">::</span><span class="bp">map</span><span class="p">,</span> <span class="n">std</span><span class="p">::</span><span class="n">__1</span><span class="p">::</span><span class="n">vector</span><span class="p">,</span> <span class="n">std</span><span class="p">::</span><span class="n">__1</span><span class="p">::</span><span class="n">basic_string</span><span class="p">&lt;</span><span class="n">char</span><span class="p">,</span> <span class="n">std</span><span class="p">::</span><span class="n">__1</span><span class="p">::</span><span class="n">char_traits</span><span class="p">&lt;</span><span class="n">char</span><span class="p">&gt;,</span> <span class="n">std</span><span class="p">::</span><span class="n">__1</span><span class="p">::</span><span class="n">allocator</span><span class="p">&lt;</span><span class="n">char</span><span class="p">&gt;</span> <span class="o">&gt;</span><span class="p">,</span> <span class="n">bool</span><span class="p">,</span> <span class="n">long</span> <span class="n">long</span><span class="p">,</span> <span class="n">unsigned</span> <span class="n">long</span> <span class="n">long</span><span class="p">,</span> <span class="n">double</span><span class="p">,</span> <span class="n">std</span><span class="p">::</span><span class="n">__1</span><span class="p">::</span><span class="n">allocator</span><span class="p">,</span> <span class="n">nlohmann</span><span class="p">::</span><span class="n">adl_serializer</span><span class="p">&gt;::</span><span class="kd">operator</span><span class="p">[]&lt;</span><span class="n">char</span> <span class="n">const</span><span class="p">&gt;(&amp;</span><span class="n">stack</span><span class="p">[</span><span class="o">-</span><span class="mi">416</span><span class="p">]);</span>
    <span class="n">var_1C0</span> <span class="p">=</span> <span class="n">r0</span><span class="p">;</span>
    <span class="n">nlohmann</span><span class="p">::</span><span class="n">basic_json</span><span class="p">&lt;</span><span class="n">std</span><span class="p">::</span><span class="n">__1</span><span class="p">::</span><span class="bp">map</span><span class="p">,</span> <span class="n">std</span><span class="p">::</span><span class="n">__1</span><span class="p">::</span><span class="n">vector</span><span class="p">,</span> <span class="n">std</span><span class="p">::</span><span class="n">__1</span><span class="p">::</span><span class="n">basic_string</span><span class="p">&lt;</span><span class="n">char</span><span class="p">,</span> <span class="n">std</span><span class="p">::</span><span class="n">__1</span><span class="p">::</span><span class="n">char_traits</span><span class="p">&lt;</span><span class="n">char</span><span class="p">&gt;,</span> <span class="n">std</span><span class="p">::</span><span class="n">__1</span><span class="p">::</span><span class="n">allocator</span><span class="p">&lt;</span><span class="n">char</span><span class="p">&gt;</span> <span class="o">&gt;</span><span class="p">,</span> <span class="n">bool</span><span class="p">,</span> <span class="n">long</span> <span class="n">long</span><span class="p">,</span> <span class="n">unsigned</span> <span class="n">long</span> <span class="n">long</span><span class="p">,</span> <span class="n">double</span><span class="p">,</span> <span class="n">std</span><span class="p">::</span><span class="n">__1</span><span class="p">::</span><span class="n">allocator</span><span class="p">,</span> <span class="n">nlohmann</span><span class="p">::</span><span class="n">adl_serializer</span><span class="p">&gt;::</span><span class="kd">operator</span> <span class="n">std</span><span class="p">::</span><span class="n">__1</span><span class="p">::</span><span class="n">basic_string</span><span class="p">&lt;</span><span class="n">char</span><span class="p">,</span> <span class="n">std</span><span class="p">::</span><span class="n">__1</span><span class="p">::</span><span class="n">char_traits</span><span class="p">&lt;</span><span class="n">char</span><span class="p">&gt;,</span> <span class="n">std</span><span class="p">::</span><span class="n">__1</span><span class="p">::</span><span class="n">allocator</span><span class="p">&lt;</span><span class="n">char</span><span class="p">&gt;</span> <span class="o">&gt;&lt;</span><span class="n">std</span><span class="p">::</span><span class="n">__1</span><span class="p">::</span><span class="n">basic_string</span><span class="p">&lt;</span><span class="n">char</span><span class="p">,</span> <span class="n">std</span><span class="p">::</span><span class="n">__1</span><span class="p">::</span><span class="n">char_traits</span><span class="p">&lt;</span><span class="n">char</span><span class="p">&gt;,</span> <span class="n">std</span><span class="p">::</span><span class="n">__1</span><span class="p">::</span><span class="n">allocator</span><span class="p">&lt;</span><span class="n">char</span><span class="p">&gt;</span> <span class="o">&gt;</span><span class="p">,</span> <span class="mi">0</span><span class="p">&gt;();</span>
    <span class="n">var_18</span> <span class="p">=</span> <span class="o">**</span><span class="n">___stack_chk_guard</span><span class="p">;</span>
    <span class="n">nlohmann</span><span class="p">::</span><span class="n">basic_json</span><span class="p">&lt;</span><span class="n">std</span><span class="p">::</span><span class="n">__1</span><span class="p">::</span><span class="bp">map</span><span class="p">,</span> <span class="n">std</span><span class="p">::</span><span class="n">__1</span><span class="p">::</span><span class="n">vector</span><span class="p">,</span> <span class="n">std</span><span class="p">::</span><span class="n">__1</span><span class="p">::</span><span class="n">basic_string</span><span class="p">&lt;</span><span class="n">char</span><span class="p">,</span> <span class="n">std</span><span class="p">::</span><span class="n">__1</span><span class="p">::</span><span class="n">char_traits</span><span class="p">&lt;</span><span class="n">char</span><span class="p">&gt;,</span> <span class="n">std</span><span class="p">::</span><span class="n">__1</span><span class="p">::</span><span class="n">allocator</span><span class="p">&lt;</span><span class="n">char</span><span class="p">&gt;</span> <span class="o">&gt;</span><span class="p">,</span> <span class="n">bool</span><span class="p">,</span> <span class="n">long</span> <span class="n">long</span><span class="p">,</span> <span class="n">unsigned</span> <span class="n">long</span> <span class="n">long</span><span class="p">,</span> <span class="n">double</span><span class="p">,</span> <span class="n">std</span><span class="p">::</span><span class="n">__1</span><span class="p">::</span><span class="n">allocator</span><span class="p">,</span> <span class="n">nlohmann</span><span class="p">::</span><span class="n">adl_serializer</span><span class="p">&gt;::</span><span class="o">~</span><span class="n">basic_json</span><span class="p">();</span>
    <span class="n">r0</span> <span class="p">=</span> <span class="n">cpr</span><span class="p">::</span><span class="n">Response</span><span class="p">::</span><span class="o">~</span><span class="n">Response</span><span class="p">();</span>
    <span class="n">r8</span> <span class="p">=</span> <span class="o">*</span><span class="n">___stack_chk_guard</span><span class="p">;</span>
    <span class="n">r8</span> <span class="p">=</span> <span class="o">*</span><span class="n">r8</span><span class="p">;</span>
    <span class="n">r8</span> <span class="p">=</span> <span class="n">r8</span> <span class="o">-</span> <span class="n">var_18</span><span class="p">;</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">r8</span> <span class="o">!=</span> <span class="mh">0x0</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">r0</span> <span class="p">=</span> <span class="n">__stack_chk_fail</span><span class="p">();</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">r0</span><span class="p">;</span>
<span class="p">}</span>
</div></code></pre><p>You can tell by the size of <code>libchuckle.a</code> (1,9Mb) that it should contain everything we need to proceed :-D</p><h4>make it cross platform</h4><p>To make this cross platform you need to change a few things. First you need to link alle the required object files into the libchuckle.a this can be done with CMake:</p><pre><code><div class="highlight"><span></span><span class="n">add_library</span><span class="p">(</span>
        <span class="n">chuckle</span>
        <span class="n">STATIC</span>
        <span class="n">chuckle</span><span class="p">.</span><span class="n">cpp</span>
        <span class="err">$</span><span class="p">&lt;</span><span class="n">TARGET_OBJECTS</span><span class="p">:</span><span class="n">cpr</span><span class="p">&gt;</span>
        <span class="err">$</span><span class="p">&lt;</span><span class="n">TARGET_OBJECTS</span><span class="p">:</span><span class="n">libcurl</span><span class="p">&gt;</span>
        <span class="err">$</span><span class="p">&lt;</span><span class="n">TARGET_OBJECTS</span><span class="p">:</span><span class="n">zlib</span><span class="p">&gt;</span>
<span class="p">)</span>
</div></code></pre><p>This links the object files into libchuckle.</p><p>To build this for multiple architectures and platforms we need the <a href="https://github.com/leetal/ios-cmake">ios-cmake</a> toolchain. Just copy it into the <code>chuckle</code> folder and while you're at it delete <code>static</code> and <code>out</code>.</p><p>You can now setup the build system for iOS devices with the following command:</p><pre><code><div class="highlight"><span></span>cmake<span class="w"> </span>-S<span class="w"> </span>./<span class="w"> </span>-DCMAKE_BUILD_TYPE<span class="o">=</span>RelWithDebInfo<span class="w"> </span><span class="se">\</span>
<span class="w">            </span>-DPLATFORM<span class="o">=</span>OS64<span class="w"> </span><span class="se">\</span>
<span class="w">            </span>-DDEPLOYMENT_TARGET<span class="o">=</span><span class="m">14</span>.0<span class="w"> </span><span class="se">\</span>
<span class="w">            </span>-DCMAKE_TOOLCHAIN_FILE<span class="o">=</span>ios.toolchain.cmake<span class="w"> </span><span class="se">\</span>
<span class="w">            </span>-DHAVE_SOCKET_LIBSOCKET<span class="o">=</span>FALSE<span class="w"> </span><span class="se">\</span>
<span class="w">            </span>-DHAVE_LIBSOCKET<span class="o">=</span>FALSE<span class="w"> </span><span class="se">\</span>
<span class="w">            </span>-B<span class="w"> </span>out/os64
</div></code></pre><p>If that step fails, please run it again. For <a href="https://github.com/leetal/ios-cmake/issues/110">reasons</a> that I haven't understand yet this fails on the first run but works on the second run for me and others.</p><p>and run the build process with:</p><pre><code><div class="highlight"><span></span>cmake<span class="w"> </span>--build<span class="w"> </span>./out/os64<span class="w"> </span>--config<span class="w"> </span>RelWithDebInfo
</div></code></pre><p>My complete build script looks like this:</p><pre><code><div class="highlight"><span></span><span class="ch">#!/bin/sh</span>

<span class="c1"># iOS &amp; simulator running on arm64 &amp; x86_64</span>
cmake<span class="w"> </span>-S<span class="w"> </span>./<span class="w"> </span>-DCMAKE_BUILD_TYPE<span class="o">=</span>RelWithDebInfo<span class="w"> </span><span class="se">\</span>
<span class="w">            </span>-DPLATFORM<span class="o">=</span>OS64<span class="w"> </span><span class="se">\</span>
<span class="w">            </span>-DDEPLOYMENT_TARGET<span class="o">=</span><span class="m">14</span>.0<span class="w"> </span><span class="se">\</span>
<span class="w">            </span>-DCMAKE_TOOLCHAIN_FILE<span class="o">=</span>ios.toolchain.cmake<span class="w"> </span><span class="se">\</span>
<span class="w">            </span>-DHAVE_SOCKET_LIBSOCKET<span class="o">=</span>FALSE<span class="w"> </span><span class="se">\</span>
<span class="w">            </span>-DHAVE_LIBSOCKET<span class="o">=</span>FALSE<span class="w"> </span><span class="se">\</span>
<span class="w">            </span>-B<span class="w"> </span>out/os64
cmake<span class="w"> </span>-S<span class="w"> </span>./<span class="w"> </span>-DCMAKE_BUILD_TYPE<span class="o">=</span>RelWithDebInfo<span class="w"> </span><span class="se">\</span>
<span class="w">            </span>-DPLATFORM<span class="o">=</span>SIMULATORARM64<span class="w"> </span><span class="se">\</span>
<span class="w">            </span>-DDEPLOYMENT_TARGET<span class="o">=</span><span class="m">14</span>.0<span class="w"> </span><span class="se">\</span>
<span class="w">            </span>-DCMAKE_TOOLCHAIN_FILE<span class="o">=</span>ios.toolchain.cmake<span class="w"> </span><span class="se">\</span>
<span class="w">            </span>-DHAVE_SOCKET_LIBSOCKET<span class="o">=</span>FALSE<span class="w"> </span><span class="se">\</span>
<span class="w">            </span>-DHAVE_LIBSOCKET<span class="o">=</span>FALSE<span class="w"> </span><span class="se">\</span>
<span class="w">            </span>-B<span class="w"> </span>out/simulator_arm64
cmake<span class="w"> </span>-S<span class="w"> </span>./<span class="w"> </span>-DCMAKE_BUILD_TYPE<span class="o">=</span>RelWithDebInfo<span class="w"> </span><span class="se">\</span>
<span class="w">            </span>-DPLATFORM<span class="o">=</span>SIMULATOR64<span class="w"> </span><span class="se">\</span>
<span class="w">            </span>-DDEPLOYMENT_TARGET<span class="o">=</span><span class="m">14</span>.0<span class="w"> </span><span class="se">\</span>
<span class="w">            </span>-DCMAKE_TOOLCHAIN_FILE<span class="o">=</span>ios.toolchain.cmake<span class="w"> </span><span class="se">\</span>
<span class="w">            </span>-DHAVE_SOCKET_LIBSOCKET<span class="o">=</span>FALSE<span class="w"> </span><span class="se">\</span>
<span class="w">            </span>-DHAVE_LIBSOCKET<span class="o">=</span>FALSE<span class="w"> </span><span class="se">\</span>
<span class="w">            </span>-B<span class="w"> </span>out/simulator_x86_64

<span class="c1"># macOS on arm64</span>
cmake<span class="w"> </span>-S<span class="w"> </span>./<span class="w"> </span>-DCMAKE_BUILD_TYPE<span class="o">=</span>RelWithDebInfo<span class="w"> </span><span class="se">\</span>
<span class="w">            </span>-DPLATFORM<span class="o">=</span>MAC_ARM64<span class="w"> </span><span class="se">\</span>
<span class="w">            </span>-DCMAKE_TOOLCHAIN_FILE<span class="o">=</span>ios.toolchain.cmake<span class="w"> </span><span class="se">\</span>
<span class="w">            </span>-DHAVE_SOCKET_LIBSOCKET<span class="o">=</span>FALSE<span class="w"> </span><span class="se">\</span>
<span class="w">            </span>-DHAVE_LIBSOCKET<span class="o">=</span>FALSE<span class="w"> </span><span class="se">\</span>
<span class="w">            </span>-B<span class="w"> </span>out/mac_arm64

<span class="c1"># macOS on x86_64</span>
cmake<span class="w"> </span>-S<span class="w"> </span>./<span class="w"> </span>-DCMAKE_BUILD_TYPE<span class="o">=</span>RelWithDebInfo<span class="w"> </span><span class="se">\</span>
<span class="w">            </span>-DPLATFORM<span class="o">=</span>MAC<span class="w"> </span><span class="se">\</span>
<span class="w">            </span>-DCMAKE_TOOLCHAIN_FILE<span class="o">=</span>ios.toolchain.cmake<span class="w"> </span><span class="se">\</span>
<span class="w">            </span>-DHAVE_SOCKET_LIBSOCKET<span class="o">=</span>FALSE<span class="w"> </span><span class="se">\</span>
<span class="w">            </span>-DHAVE_LIBSOCKET<span class="o">=</span>FALSE<span class="w"> </span><span class="se">\</span>
<span class="w">            </span>-B<span class="w"> </span>out/mac_x86_64

cmake<span class="w"> </span>--build<span class="w"> </span>./out/os64<span class="w"> </span>--config<span class="w"> </span>RelWithDebInfo<span class="w"> </span>--parallel<span class="w"> </span><span class="m">8</span>
cmake<span class="w"> </span>--build<span class="w"> </span>./out/simulator_arm64<span class="w"> </span>--config<span class="w"> </span>RelWithDebInfo<span class="w"> </span>--parallel<span class="w"> </span><span class="m">8</span>
cmake<span class="w"> </span>--build<span class="w"> </span>./out/simulator_x86_64<span class="w"> </span>--config<span class="w"> </span>RelWithDebInfo<span class="w"> </span>--parallel<span class="w"> </span><span class="m">8</span>
cmake<span class="w"> </span>--build<span class="w"> </span>./out/mac_arm64<span class="w"> </span>--config<span class="w"> </span>RelWithDebInfo<span class="w"> </span>--parallel<span class="w"> </span><span class="m">8</span>
cmake<span class="w"> </span>--build<span class="w"> </span>./out/mac_x86_64<span class="w"> </span>--config<span class="w"> </span>RelWithDebInfo<span class="w"> </span>--parallel<span class="w"> </span><span class="m">8</span>

rm<span class="w"> </span>-rf<span class="w"> </span>libchuckle.xcframework

mkdir<span class="w"> </span>-p<span class="w"> </span><span class="s2">&quot;out/mac/chuckle/&quot;</span>
mkdir<span class="w"> </span>-p<span class="w"> </span><span class="s2">&quot;out/simulator/chuckle/&quot;</span>

lipo<span class="w"> </span>-create<span class="w"> </span>out/mac_arm64/chuckle/libchuckle.a<span class="w"> </span><span class="se">\</span>
<span class="w">             </span>out/mac_x86_64/chuckle/libchuckle.a<span class="w"> </span><span class="se">\</span>
<span class="w">     </span>-output<span class="w"> </span>out/mac/chuckle/libchuckle.a

lipo<span class="w"> </span>-create<span class="w"> </span>out/simulator_arm64/chuckle/libchuckle.a<span class="w"> </span><span class="se">\</span>
<span class="w">             </span>out/simulator_x86_64/chuckle/libchuckle.a<span class="w"> </span><span class="se">\</span>
<span class="w">     </span>-output<span class="w"> </span>out/simulator/chuckle/libchuckle.a

xcodebuild<span class="w"> </span>-create-xcframework<span class="w"> </span><span class="se">\</span>
<span class="w">  </span>-library<span class="w"> </span><span class="s2">&quot;out/os64/chuckle/libchuckle.a&quot;</span><span class="w"> </span><span class="se">\</span>
<span class="w">  </span>-library<span class="w"> </span><span class="s2">&quot;out/simulator/chuckle/libchuckle.a&quot;</span><span class="w"> </span><span class="se">\</span>
<span class="w">  </span>-library<span class="w"> </span><span class="s2">&quot;out/mac/chuckle/libchuckle.a&quot;</span><span class="w"> </span><span class="se">\</span>
<span class="w">  </span>-output<span class="w"> </span>libchuckle.xcframework

<span class="c1"># copy Header</span>
mkdir<span class="w"> </span>-p<span class="w"> </span>libchuckle.xcframework/Headers
cp<span class="w"> </span>include/chuckle/chuckle.h<span class="w"> </span>libchuckle.xcframework/Headers

<span class="c1"># copy xcframework into Swift package</span>
mkdir<span class="w"> </span>-p<span class="w"> </span>ChuckleWrapper/lib
cp<span class="w"> </span>-a<span class="w"> </span>libchuckle.xcframework<span class="w"> </span>ChuckleWrapper/lib
</div></code></pre><p><strong>CAUTION:</strong> I changed a few locations. You can find the project here: <a href="https://github.com/oliverepper/chuckle">chuckle</a></p><p>Now we got a xframework that we can depend on in a Swift package that can carry an ObjC++-Wrapper to call into out code.</p><h2>Build the Swift package</h2><p>If you checked out the repository you already saw how to setup the swift package. Create a subdirectory <code>ChuckleWrapper</code> and run this from within:</p><pre><code><div class="highlight"><span></span>swift<span class="w"> </span>package<span class="w"> </span>init
</div></code></pre><p>Basically we need this Swift file:</p><pre><code><div class="highlight"><span></span><span class="p">@</span><span class="n">_exported</span> <span class="kd">import</span> <span class="nc">ObjC</span>
</div></code></pre><p>That will depend on the <code>ObjC</code> target that has the following files:</p><h4>ObjC/include/ChuckleWrapper.h</h4><pre><code><div class="highlight"><span></span><span class="cp">#ifndef ChuckleWrapper_h</span>
<span class="cp">#define ChuckleWrapper_h</span>

<span class="cp">#import &lt;Foundation/Foundation.h&gt;</span>

<span class="k">@interface</span> <span class="nc">ChuckleWrapper</span> : <span class="bp">NSObject</span>

<span class="p">+</span> <span class="p">(</span><span class="bp">NSString</span><span class="w"> </span><span class="o">*</span><span class="p">)</span><span class="nf">joke</span><span class="p">;</span>

<span class="k">@end</span>

<span class="cp">#endif </span><span class="cm">/* ChuckleWrapper_h */</span>
</div></code></pre><p>and it's implementation</p><h4>ObjC/ChuckleWrapper.mm</h4><pre><code><div class="highlight"><span></span><span class="cp">#import &quot;ChuckleWrapper.h&quot;</span>
<span class="cp">#include</span><span class="w"> </span><span class="cpf">&quot;chuckle.h&quot;</span>

<span class="k">@implementation</span> <span class="nc">ChuckleWrapper</span>

<span class="p">+</span> <span class="p">(</span><span class="bp">NSString</span><span class="w"> </span><span class="o">*</span><span class="p">)</span><span class="nf">joke</span>
<span class="p">{</span>
<span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="p">[</span><span class="bp">NSString</span><span class="w"> </span><span class="n">stringWithCString</span><span class="o">:</span><span class="n">joke</span><span class="p">().</span><span class="n">c_str</span><span class="p">()</span><span class="w"> </span><span class="n">encoding</span><span class="o">:</span><span class="p">[</span><span class="bp">NSString</span><span class="w"> </span><span class="n">defaultCStringEncoding</span><span class="p">]];</span>
<span class="p">}</span>

<span class="k">@end</span>
</div></code></pre><p>Here we can include <code>chuckle.h</code> because we copied the header file into our xcframework and let the <code>ObjC</code> target depend on that via</p><h4>Package.swift</h4><pre><code><div class="highlight"><span></span><span class="c1">// swift-tools-version:5.3</span>
<span class="kd">import</span> <span class="nc">PackageDescription</span>

<span class="kd">let</span> <span class="nv">package</span> <span class="p">=</span> <span class="n">Package</span><span class="p">(</span>
    <span class="n">name</span><span class="p">:</span> <span class="s">&quot;ChuckleWrapper&quot;</span><span class="p">,</span>
    <span class="n">platforms</span><span class="p">:</span> <span class="p">[</span>
        <span class="p">.</span><span class="n">iOS</span><span class="p">(.</span><span class="n">v14</span><span class="p">),</span>
        <span class="p">.</span><span class="n">macOS</span><span class="p">(.</span><span class="n">v11</span><span class="p">)</span>
    <span class="p">],</span>
    <span class="n">products</span><span class="p">:</span> <span class="p">[</span>
        <span class="p">.</span><span class="n">library</span><span class="p">(</span>
            <span class="n">name</span><span class="p">:</span> <span class="s">&quot;ChuckleWrapper&quot;</span><span class="p">,</span>
            <span class="n">targets</span><span class="p">:</span> <span class="p">[</span>
                <span class="s">&quot;libchuckle&quot;</span><span class="p">,</span>
                <span class="s">&quot;ObjC&quot;</span><span class="p">,</span>
                <span class="s">&quot;ChuckleWrapper&quot;</span>
            <span class="p">]),</span>
    <span class="p">],</span>
    <span class="n">dependencies</span><span class="p">:</span> <span class="p">[</span>
    <span class="p">],</span>
    <span class="n">targets</span><span class="p">:</span> <span class="p">[</span>
        <span class="c1">// lib</span>
        <span class="p">.</span><span class="n">binaryTarget</span><span class="p">(</span>
            <span class="n">name</span><span class="p">:</span> <span class="s">&quot;libchuckle&quot;</span><span class="p">,</span>
            <span class="n">path</span><span class="p">:</span> <span class="s">&quot;lib/libchuckle.xcframework&quot;</span>
        <span class="p">),</span>

        <span class="c1">// ObjC++ Wrapper</span>
        <span class="p">.</span><span class="n">target</span><span class="p">(</span>
            <span class="n">name</span><span class="p">:</span> <span class="s">&quot;ObjC&quot;</span><span class="p">,</span>
            <span class="n">dependencies</span><span class="p">:</span> <span class="p">[</span>
                <span class="s">&quot;libchuckle&quot;</span>
            <span class="p">],</span>
            <span class="n">path</span><span class="p">:</span> <span class="s">&quot;Sources/ObjC&quot;</span><span class="p">,</span>
            <span class="n">cxxSettings</span><span class="p">:</span> <span class="p">[</span>
                <span class="p">.</span><span class="n">headerSearchPath</span><span class="p">(</span><span class="s">&quot;../../lib/libchuckle.xcframework/Headers&quot;</span><span class="p">)</span>
            <span class="p">]</span>
        <span class="p">),</span>

        <span class="p">.</span><span class="n">target</span><span class="p">(</span>
            <span class="n">name</span><span class="p">:</span> <span class="s">&quot;ChuckleWrapper&quot;</span><span class="p">,</span>
            <span class="n">dependencies</span><span class="p">:</span> <span class="p">[</span>
                <span class="s">&quot;ObjC&quot;</span>
            <span class="p">],</span>
            <span class="n">path</span><span class="p">:</span> <span class="s">&quot;Sources/Swift&quot;</span>
        <span class="p">),</span>

        <span class="p">.</span><span class="n">testTarget</span><span class="p">(</span>
            <span class="n">name</span><span class="p">:</span> <span class="s">&quot;ChuckleWrapperTests&quot;</span><span class="p">,</span>
            <span class="n">dependencies</span><span class="p">:</span> <span class="p">[</span><span class="s">&quot;ChuckleWrapper&quot;</span><span class="p">]),</span>
    <span class="p">]</span>
<span class="p">)</span>
</div></code></pre><p>The path to the header files is configured via <code>cxxSettings</code> in the <code>ObjC</code> target.</p><p>Let's test the package</p><h4>ChuckleWrapperTests.swift</h4><pre><code><div class="highlight"><span></span><span class="kd">import</span> <span class="nc">XCTest</span>
<span class="p">@</span><span class="n">testable</span> <span class="kd">import</span> <span class="nc">ChuckleWrapper</span>

<span class="kr">final</span> <span class="kd">class</span> <span class="nc">ChuckleWrapperTests</span><span class="p">:</span> <span class="n">XCTestCase</span> <span class="p">{</span>
    <span class="kd">func</span> <span class="nf">testJoke</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">guard</span> <span class="kd">let</span> <span class="nv">joke</span> <span class="p">=</span> <span class="n">ChuckleWrapper</span><span class="p">.</span><span class="n">joke</span><span class="p">()</span> <span class="k">else</span> <span class="p">{</span>
            <span class="n">XCTFail</span><span class="p">()</span>
            <span class="k">return</span>
        <span class="p">}</span>
        <span class="bp">print</span><span class="p">(</span><span class="s">&quot;&quot;&quot;</span>
<span class="s">            ---</span>
<span class="s">            </span><span class="si">\(</span><span class="n">joke</span><span class="si">)</span>
<span class="s">            ---</span>
<span class="s">            &quot;&quot;&quot;</span><span class="p">)</span>
        <span class="n">XCTAssertFalse</span><span class="p">(</span><span class="n">joke</span><span class="p">.</span><span class="bp">isEmpty</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</div></code></pre><p><strong>CAUTION:</strong> Xcode has a really hard time with such a package. If Xcode refuses to compile the package you can either try to compile &amp; run tests form the terminal:</p><pre><code><div class="highlight"><span></span>swift<span class="w"> </span>build<span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span>swift<span class="w"> </span><span class="nb">test</span>
</div></code></pre><p>Or it can help to delete <code>.swiftpm</code></p>]]></content:encoded></item><item><guid isPermaLink="true">https://oliver-epper.de/posts/create-and-use-a-c++-library-on-the-mac</guid><title>Create and use a C++ library on the Mac</title><description>How to create and use a dylib in C++ on the Mac</description><link>https://oliver-epper.de/posts/create-and-use-a-c++-library-on-the-mac</link><pubDate>Sat, 27 Mar 2021 09:41:00 +0100</pubDate><content:encoded><![CDATA[<p>This took a little while to figure out. It is a lot of code to write for a simple hello world program, but I learned a few things about macOS along the way.</p><h2>Create the library</h2><p>Let's start by creating a hello world library in C++.</p><pre><code><div class="highlight"><span></span>mkdir<span class="w"> </span>-p<span class="w"> </span>HelloLib/<span class="o">{</span>src,build<span class="o">}</span><span class="w"> </span><span class="o">&amp;&amp;</span>
touch<span class="w"> </span>HelloLib/src/<span class="o">{</span>HelloService.hpp,HelloService.cpp<span class="o">}</span><span class="w"> </span><span class="o">&amp;&amp;</span>
touch<span class="w"> </span>HelloLib/CMakeLists.txt
</div></code></pre><p>While we're in the shell let's create the target directory for our library, too:</p><pre><code><div class="highlight"><span></span>sudo<span class="w"> </span>mkdir<span class="w"> </span>/opt/hello<span class="w"> </span><span class="o">&amp;&amp;</span>
sudo<span class="w"> </span>chown<span class="w"> </span><span class="sb">`</span>whoami<span class="sb">`</span><span class="w"> </span>/opt/hello
</div></code></pre><p>Enter the following into <code>HelloService.hpp</code>:</p><pre><code><div class="highlight"><span></span><span class="cp">#ifndef HelloService_hpp</span>
<span class="cp">#define HelloService_hpp</span>

<span class="cp">#include</span><span class="w"> </span><span class="cpf">&lt;string&gt;</span>

<span class="k">class</span><span class="w"> </span><span class="nc">HelloService</span><span class="w"> </span><span class="p">{</span>
<span class="k">public</span><span class="o">:</span>
<span class="w">    </span><span class="n">HelloService</span><span class="p">(</span><span class="k">const</span><span class="w"> </span><span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="w"> </span><span class="o">&amp;</span><span class="n">text</span><span class="p">);</span>
<span class="w">    </span><span class="o">~</span><span class="n">HelloService</span><span class="p">();</span>
<span class="k">public</span><span class="o">:</span>
<span class="w">    </span><span class="kt">void</span><span class="w"> </span><span class="n">setText</span><span class="p">(</span><span class="k">const</span><span class="w"> </span><span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="w"> </span><span class="o">&amp;</span><span class="n">text</span><span class="p">);</span>
<span class="w">    </span><span class="k">const</span><span class="w"> </span><span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="w"> </span><span class="nf">getText</span><span class="p">();</span>
<span class="k">private</span><span class="o">:</span>
<span class="w">    </span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">m_count</span><span class="p">;</span>
<span class="w">    </span><span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="w"> </span><span class="n">m_text</span><span class="p">;</span>
<span class="p">};</span>

<span class="cp">#endif </span><span class="cm">/* HelloService_hpp */</span>
</div></code></pre><p>and add the implementation to <code>HelloService.cpp</code>:</p><pre><code><div class="highlight"><span></span><span class="cp">#include</span><span class="w"> </span><span class="cpf">&quot;HelloService.hpp&quot;</span>
<span class="cp">#include</span><span class="w"> </span><span class="cpf">&lt;iostream&gt;</span>
<span class="cp">#include</span><span class="w"> </span><span class="cpf">&lt;sstream&gt;</span>

<span class="k">using</span><span class="w"> </span><span class="k">namespace</span><span class="w"> </span><span class="nn">std</span><span class="p">;</span>

<span class="n">HelloService</span><span class="o">::</span><span class="n">HelloService</span><span class="p">(</span><span class="k">const</span><span class="w"> </span><span class="n">string</span><span class="w"> </span><span class="o">&amp;</span><span class="n">text</span><span class="p">)</span><span class="w"> </span><span class="o">:</span><span class="w"> </span><span class="n">m_count</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="mi">0</span><span class="w"> </span><span class="p">},</span><span class="w"> </span><span class="n">m_text</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="n">text</span><span class="w"> </span><span class="p">}</span>
<span class="p">{</span>
<span class="w">    </span><span class="n">cout</span><span class="w"> </span><span class="o">&lt;&lt;</span><span class="w"> </span><span class="s">&quot;HelloService created&quot;</span><span class="w"> </span><span class="o">&lt;&lt;</span><span class="w"> </span><span class="n">endl</span><span class="p">;</span>
<span class="p">}</span>

<span class="n">HelloService</span><span class="o">::~</span><span class="n">HelloService</span><span class="p">()</span>
<span class="p">{</span>
<span class="w">    </span><span class="n">cout</span><span class="w"> </span><span class="o">&lt;&lt;</span><span class="w"> </span><span class="s">&quot;HelloService destroyed&quot;</span><span class="w"> </span><span class="o">&lt;&lt;</span><span class="w"> </span><span class="n">endl</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">void</span><span class="w"> </span><span class="n">HelloService</span><span class="o">::</span><span class="n">setText</span><span class="p">(</span><span class="k">const</span><span class="w"> </span><span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="w"> </span><span class="o">&amp;</span><span class="n">text</span><span class="p">)</span>
<span class="p">{</span>
<span class="w">    </span><span class="n">m_count</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span>
<span class="w">    </span><span class="n">m_text</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">text</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">const</span><span class="w"> </span><span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="w"> </span><span class="n">HelloService</span><span class="o">::</span><span class="n">getText</span><span class="p">()</span>
<span class="p">{</span>
<span class="w">    </span><span class="n">m_count</span><span class="o">++</span><span class="p">;</span>
<span class="w">    </span><span class="n">std</span><span class="o">::</span><span class="n">ostringstream</span><span class="w"> </span><span class="n">oss</span><span class="p">;</span>
<span class="w">    </span><span class="n">oss</span><span class="w"> </span><span class="o">&lt;&lt;</span><span class="w"> </span><span class="n">m_text</span><span class="w"> </span><span class="o">&lt;&lt;</span><span class="w"> </span><span class="s">&quot; &quot;</span><span class="w"> </span><span class="o">&lt;&lt;</span><span class="w"> </span><span class="n">m_count</span><span class="p">;</span>
<span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="n">oss</span><span class="p">.</span><span class="n">str</span><span class="p">();</span>
<span class="p">}</span>
</div></code></pre><p>Now let's configure CMake in <code>CMakeLists.txt</code>:</p><pre><code><div class="highlight"><span></span><span class="nb">cmake_minimum_required</span><span class="p">(</span><span class="s">VERSION</span><span class="w"> </span><span class="s">3.2</span><span class="p">)</span>

<span class="nb">set</span><span class="p">(</span><span class="s">CMAKE_CXX_STANDARD</span><span class="w"> </span><span class="s">17</span><span class="p">)</span>
<span class="nb">set</span><span class="p">(</span><span class="s">CMAKE_CXX_STANDARD_REQUIRED</span><span class="w"> </span><span class="s">ON</span><span class="p">)</span>
<span class="nb">set</span><span class="p">(</span><span class="s">CMAKE_CXX_EXTENSIONS</span><span class="w"> </span><span class="s">OFF</span><span class="p">)</span>

<span class="nb">project</span><span class="p">(</span><span class="s">Hello</span><span class="w"> </span><span class="s">VERSION</span><span class="w"> </span><span class="s">0.0.1</span><span class="w"> </span><span class="s">DESCRIPTION</span><span class="w"> </span><span class="s2">&quot;HelloService&quot;</span><span class="p">)</span>

<span class="nb">add_library</span><span class="p">(</span><span class="s">hello</span><span class="w"> </span><span class="s">SHARED</span><span class="w"> </span><span class="s">src/HelloService.cpp</span><span class="p">)</span>

<span class="nb">set_target_properties</span><span class="p">(</span><span class="s">hello</span><span class="w"> </span><span class="s">PROPERTIES</span><span class="w"> </span><span class="s">VERSION</span><span class="w"> </span><span class="o">${</span><span class="nv">PROJECT_VERSION</span><span class="o">}</span><span class="p">)</span>
<span class="nb">set_target_properties</span><span class="p">(</span><span class="s">hello</span><span class="w"> </span><span class="s">PROPERTIES</span><span class="w"> </span><span class="s">PUBLIC_HEADER</span><span class="w"> </span><span class="s">src/HelloService.hpp</span><span class="p">)</span>

<span class="nb">install</span><span class="p">(</span><span class="s">TARGETS</span><span class="w"> </span><span class="s">hello</span>
<span class="w">    </span><span class="s">LIBRARY</span><span class="w"> </span><span class="s">DESTINATION</span><span class="w"> </span><span class="o">${</span><span class="nv">CMAKE_INSTALL_LIBDIR</span><span class="o">}</span>
<span class="w">    </span><span class="s">PUBLIC_HEADER</span><span class="w"> </span><span class="s">DESTINATION</span><span class="w"> </span><span class="o">${</span><span class="nv">CMAKE_INSTALL_INCLUDEDIR</span><span class="o">}</span><span class="p">)</span>
</div></code></pre><h2>Build and install the library</h2><p>Now we can build and install the library with the following commands:</p><pre><code><div class="highlight"><span></span>cmake<span class="w"> </span>-B<span class="w"> </span>HelloLib/build<span class="w"> </span>-DCMAKE_INSTALL_PREFIX<span class="o">=</span>/opt/hello<span class="w"> </span>HelloLib<span class="w"> </span><span class="o">&amp;&amp;</span>
<span class="nb">cd</span><span class="w"> </span>HelloLib/build<span class="w"> </span><span class="o">&amp;&amp;</span>
make<span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span>make<span class="w"> </span>install<span class="w"> </span><span class="o">&amp;&amp;</span>
<span class="nb">cd</span><span class="w"> </span>../..
</div></code></pre><p>You should now see the following output for <code>tree /opt/hello</code>:</p><pre><code><div class="highlight"><span></span><span class="o">/</span><span class="n">opt</span><span class="o">/</span><span class="n">hello</span>
  <span class="n">include</span>
    <span class="n">HelloService</span><span class="p">.</span><span class="n">hpp</span>
  <span class="n">lib</span>
    <span class="n">libhello</span><span class="p">.</span><span class="mf">0.0</span><span class="p">.</span><span class="mf">1.</span><span class="n">dylib</span>
    <span class="n">libhello</span><span class="p">.</span><span class="n">dylib</span> <span class="p">-&gt;</span> <span class="n">libhello</span><span class="p">.</span><span class="mf">0.0</span><span class="p">.</span><span class="mf">1.</span><span class="n">dylib</span>
</div></code></pre><p>Nice. That looks good. Looks like what we wanted, so far. We have the header in <code>/opt/hello/include</code> and the dyamic library in <code>/opt/hello/lib</code>. Let's examine the library with <code>file /opt/hello/lib/libhello.dylib</code>:</p><pre><code><div class="highlight"><span></span><span class="o">/</span><span class="n">opt</span><span class="o">/</span><span class="n">hello</span><span class="o">/</span><span class="n">lib</span><span class="o">/</span><span class="n">libhello</span><span class="p">.</span><span class="n">dylib</span><span class="p">:</span> <span class="n">Mach</span><span class="o">-</span><span class="n">O</span> <span class="mi">64</span><span class="o">-</span><span class="n">bit</span> <span class="n">dynamically</span> <span class="n">linked</span> <span class="n">shared</span> <span class="n">library</span> <span class="n">arm64</span>
</div></code></pre><p>Perfect.</p><p>Let's run one more comand <code>otool -L /opt/hello/lib/libhello.dylib</code>:</p><pre><code><div class="highlight"><span></span><span class="o">/</span><span class="n">opt</span><span class="o">/</span><span class="n">hello</span><span class="o">/</span><span class="n">lib</span><span class="o">/</span><span class="n">libhello</span><span class="p">.</span><span class="n">dylib</span><span class="p">:</span>
	<span class="p">@</span><span class="n">rpath</span><span class="o">/</span><span class="n">libhello</span><span class="p">.</span><span class="mf">0.0</span><span class="p">.</span><span class="mf">1.</span><span class="n">dylib</span> <span class="p">(</span><span class="n">compatibility</span> <span class="n">version</span> <span class="mf">0.0</span><span class="p">.</span><span class="mi">0</span><span class="p">,</span> <span class="n">current</span> <span class="n">version</span> <span class="mf">0.0</span><span class="p">.</span><span class="mi">1</span><span class="p">)</span>
	<span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">lib</span><span class="o">/</span><span class="n">libc</span><span class="o">++</span><span class="p">.</span><span class="mf">1.</span><span class="n">dylib</span> <span class="p">(</span><span class="n">compatibility</span> <span class="n">version</span> <span class="mf">1.0</span><span class="p">.</span><span class="mi">0</span><span class="p">,</span> <span class="n">current</span> <span class="n">version</span> <span class="mf">904.4</span><span class="p">.</span><span class="mi">0</span><span class="p">)</span>
	<span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">lib</span><span class="o">/</span><span class="n">libSystem</span><span class="p">.</span><span class="n">B</span><span class="p">.</span><span class="n">dylib</span> <span class="p">(</span><span class="n">compatibility</span> <span class="n">version</span> <span class="mf">1.0</span><span class="p">.</span><span class="mi">0</span><span class="p">,</span> <span class="n">current</span> <span class="n">version</span> <span class="mf">1292.60</span><span class="p">.</span><span class="mi">1</span><span class="p">)</span>
</div></code></pre><p>See that the path to <code>libhello.0.0.1.dylib</code> begins with <code>@rpath</code>? This is a cool feature of <code>dyld</code> which we will see later.</p><h2>Create a CLI program that uses the library</h2><p>Create a directory:</p><pre><code><div class="highlight"><span></span>mkdir<span class="w"> </span>-p<span class="w"> </span>HelloCLI<span class="w"> </span><span class="o">&amp;&amp;</span>
touch<span class="w"> </span>HelloCLI/main.cpp
</div></code></pre><p>and enter the following to <code>main.cpp</code>:</p><pre><code><div class="highlight"><span></span><span class="cp">#include</span><span class="w"> </span><span class="cpf">&lt;iostream&gt;</span>
<span class="cp">#include</span><span class="w"> </span><span class="cpf">&quot;HelloService.hpp&quot;</span>

<span class="k">using</span><span class="w"> </span><span class="k">namespace</span><span class="w"> </span><span class="nn">std</span><span class="p">;</span>

<span class="kt">int</span><span class="w"> </span><span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
<span class="w">    </span><span class="n">HelloService</span><span class="w"> </span><span class="o">*</span><span class="n">service</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">HelloService</span><span class="p">(</span><span class="s">&quot;Hi 😎&quot;</span><span class="p">);</span>
<span class="w">    </span><span class="n">cout</span><span class="w"> </span><span class="o">&lt;&lt;</span><span class="w"> </span><span class="n">service</span><span class="o">-&gt;</span><span class="n">getText</span><span class="p">()</span><span class="w"> </span><span class="o">&lt;&lt;</span><span class="w"> </span><span class="n">endl</span><span class="p">;</span>
<span class="w">    </span><span class="k">delete</span><span class="w"> </span><span class="n">service</span><span class="p">;</span>

<span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</div></code></pre><p>Now compile the program with clang:</p><pre><code><div class="highlight"><span></span>clang++<span class="w"> </span>-I<span class="w"> </span>/opt/hello/include<span class="w"> </span>-L<span class="w"> </span>/opt/hello/lib<span class="w"> </span>-lhello<span class="w"> </span>-rpath<span class="w"> </span>/opt/hello/lib<span class="w"> </span>-o<span class="w"> </span>hello<span class="w"> </span>HelloCli/main.cpp
</div></code></pre><p>A few words of explanation:</p><ul><li><code>-I /opt/hello/include</code> tells the compiler where to look for the required header <code>HelloService.hpp</code>.</li></ul><ul><li><code>-L /opt/hello/lib</code> tells the linker where it should look for libraries</li></ul><ul><li><code>-lhello</code> tells the linker that it should link against <code>libhello.dylib</code></li></ul><ul><li><code>-rpath /opt/hello/lib</code> is the missing puzzle piece. This tells the linker to insert <code>/opt/hello/lib</code> into the Mach-O executable as a runtime path. This allows our library to be found. You can inspect the binary with the following command <code>otool -l hello</code>:</li></ul><pre><code><div class="highlight"><span></span><span class="p">[...]</span>
<span class="n">Load</span> <span class="n">command</span> <span class="mi">16</span>
        <span class="n">cmd</span> <span class="n">LC_RPATH</span>
    <span class="n">cmdsize</span> <span class="mi">32</span>
        <span class="n">path</span> <span class="o">/</span><span class="n">opt</span><span class="o">/</span><span class="n">hello</span><span class="o">/</span><span class="n">lib</span> <span class="p">(</span><span class="n">offset</span> <span class="mi">12</span><span class="p">)</span>
<span class="p">[...]</span>
</div></code></pre><p>If you run the programm now you should see the following:</p><pre><code><div class="highlight"><span></span><span class="n">HelloService</span> <span class="n">created</span>
<span class="n">Hi</span> <span class="err">😎</span> <span class="mi">1</span>
<span class="n">HelloService</span> <span class="n">destroyed</span>
</div></code></pre><h2>Create a Swift program that uses the library</h2><ul><li>Create a new Xcode project, choose macOS app, SwiftUI for interface and SwiftUI App for lifecycle.</li><li>Press ⌘-n and begin to type out <code>Objective-C</code>. Name the file <code>HelloServiceWrapper</code></li><li>Accept the automatic creation of the bridging header. If you cancelled that you can just create a Header file and name it <code>&lt;project-name&gt;-bridging-header.h</code></li><li>Create a Header file and name it <code>HelloServiceWrapper</code></li><li>Rename <code>HelloServiceWrapper.m</code> to <code>HelloServiceWrapper.mm</code></li></ul><p>Now from the bridging-header include the wrapper-header:</p><pre><code><div class="highlight"><span></span><span class="cp">#include</span><span class="w"> </span><span class="cpf">&quot;HelloServiceWrapper.h&quot;</span>
</div></code></pre><p>and add the following to <code>HelloServiceWrapper.h</code>:</p><pre><code><div class="highlight"><span></span><span class="cp">#ifndef HelloServiceWrapper_h</span>
<span class="cp">#define HelloServiceWrapper_h</span>

<span class="cp">#import &lt;Foundation/Foundation.h&gt;</span>

<span class="k">@interface</span> <span class="nc">HelloServiceWrapper</span> : <span class="bp">NSObject</span>
<span class="p">-</span> <span class="p">(</span><span class="kt">instancetype</span><span class="p">)</span><span class="nf">initWithText:</span><span class="p">(</span><span class="bp">NSString</span><span class="o">*</span><span class="p">)</span><span class="nv">text</span><span class="p">;</span>
<span class="p">-</span> <span class="p">(</span><span class="bp">NSString</span><span class="o">*</span><span class="p">)</span><span class="nf">getText</span><span class="p">;</span>
<span class="k">@end</span>

<span class="cp">#endif </span><span class="cm">/* HelloServiceWrapper_h */</span>
</div></code></pre><p>Here's the implementation of the wrapper class:</p><pre><code><div class="highlight"><span></span><span class="cp">#import &lt;Foundation/Foundation.h&gt;</span>
<span class="cp">#import &quot;HelloServiceWrapper.h&quot;</span>
<span class="cp">#include</span><span class="w"> </span><span class="cpf">&quot;HelloService.hpp&quot;</span>
<span class="k">@interface</span> <span class="nc">HelloServiceWrapper</span><span class="p">()</span>
<span class="k">@property</span><span class="w"> </span><span class="n">HelloService</span><span class="w"> </span><span class="o">*</span><span class="n">service</span><span class="p">;</span>
<span class="k">@end</span>

<span class="k">@implementation</span> <span class="nc">HelloServiceWrapper</span>

<span class="p">-</span> <span class="p">(</span><span class="kt">instancetype</span><span class="p">)</span><span class="nf">initWithText:</span><span class="p">(</span><span class="bp">NSString</span><span class="o">*</span><span class="p">)</span><span class="nv">text</span>
<span class="p">{</span>
<span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="nb">self</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">[</span><span class="nb">super</span><span class="w"> </span><span class="n">init</span><span class="p">])</span><span class="w"> </span><span class="p">{</span>
<span class="w">        </span><span class="nb">self</span><span class="p">.</span><span class="n">service</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">new</span><span class="w"> </span><span class="n">HelloService</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="p">([</span><span class="n">text</span><span class="w"> </span><span class="n">cStringUsingEncoding</span><span class="o">:</span><span class="n">NSUTF8StringEncoding</span><span class="p">]));</span>
<span class="w">    </span><span class="p">}</span>
<span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="nb">self</span><span class="p">;</span>
<span class="p">}</span>

<span class="p">-</span> <span class="p">(</span><span class="bp">NSString</span><span class="o">*</span><span class="p">)</span><span class="nf">getText</span>
<span class="p">{</span>
<span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="p">[</span><span class="bp">NSString</span><span class="w"> </span><span class="n">stringWithUTF8String</span><span class="o">:</span><span class="nb">self</span><span class="p">.</span><span class="n">service</span><span class="o">-&gt;</span><span class="n">getText</span><span class="p">().</span><span class="n">c_str</span><span class="p">()];</span>
<span class="p">}</span>

<span class="k">@end</span>
</div></code></pre><p>Remeber the long(-ish) command line for clang that we used to compile the CLI tool. We need to tell Xcode the same stuff:</p><ul><li>In build settings add <code>/opt/hello/include</code> under <em>Header Search Paths</em>, and</li><li><code>/opt/hello/library</code> under <em>Library Search Paths</em>.</li><li>under <em>Other Linker Flags</em> add<ul><li><code>-lhello</code>, and</li><li><code>-rpath /opt/hello/lib</code></li></ul></li></ul><p>Now you should be able to compile the project via ⌘-b.</p><p>For a simple test enter the following into <code>ContentView.swift</code>:</p><pre><code><div class="highlight"><span></span><span class="kd">struct</span> <span class="nc">ContentView</span><span class="p">:</span> <span class="n">View</span> <span class="p">{</span>
    <span class="kd">private</span> <span class="kd">var</span> <span class="nv">service</span><span class="p">:</span> <span class="n">HelloServiceWrapper</span><span class="p">!</span> <span class="p">=</span> <span class="p">.</span><span class="kd">init</span><span class="p">(</span><span class="n">text</span><span class="p">:</span> <span class="s">&quot;Hallo Welt&quot;</span><span class="p">)</span>

  	<span class="kd">var</span> <span class="nv">body</span><span class="p">:</span> <span class="n">some</span> <span class="n">View</span> <span class="p">{</span>
        <span class="n">Text</span><span class="p">(</span><span class="n">service</span><span class="p">.</span><span class="n">getText</span><span class="p">())</span>
            <span class="p">.</span><span class="n">padding</span><span class="p">()</span>
    <span class="p">}</span>
<span class="p">}</span>
</div></code></pre><p>Hit ⌘-r and voila! 😎 Or not?</p><p>Since we have not provided a valid code-signature, yet you need to disable library validation. You can do this under <em>Hardened Runtime -&gt; Disable Library Validation</em>.</p><p>Now you should be able to start the program.</p><h2>Let's replace the library</h2><p>Navigate to the place inside <code>Derived Data</code> where Xcode has build the binary. The easiest way is to right clock on the App in the Xcode gutter and choose <em>Show in Finder</em>. Double click and you should see something like the following:</p><figure>
    <picture>
        <source srcset="/images/HelloTool-dark.png" media="(prefers-color-scheme: dark)">
        <img src="https://oliver-epper.de/images/HelloTool.png" alt="Bildschirmfoto 2021-03-28 um 17.42.38">
    </picture>
</figure><p>Now edit the library code in <code>HelloService.cpp</code> and add something that you can recognise:</p><pre><code><div class="highlight"><span></span><span class="gh">diff --git a/src/HelloService.cpp b/src/HelloService.cpp</span>
<span class="gh">index 7eeb6ae..74e188a 100644</span>
<span class="gd">--- a/src/HelloService.cpp</span>
<span class="gi">+++ b/src/HelloService.cpp</span>
<span class="gu">@@ -24,6 +24,6 @@ const std::string HelloService::getText()</span>
<span class="w"> </span>{
<span class="w"> </span>    m_count++;
<span class="w"> </span>    std::ostringstream oss;
<span class="gd">-    oss &lt;&lt; m_text &lt;&lt; &quot; &quot; &lt;&lt; m_count;</span>
<span class="gi">+    oss &lt;&lt; m_text &lt;&lt; &quot; called: &quot; &lt;&lt; m_count &lt;&lt; &quot; times.&quot;;</span>
<span class="w"> </span>    return oss.str();
<span class="w"> </span>}
</div></code></pre><p>and recompile and install the library:</p><pre><code><div class="highlight"><span></span><span class="nb">cd</span><span class="w"> </span>HelloLib/build<span class="w"> </span><span class="o">&amp;&amp;</span>
make<span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span>make<span class="w"> </span>install<span class="w"> </span><span class="o">&amp;&amp;</span>
<span class="nb">cd</span><span class="w"> </span>../..
</div></code></pre><p>Without recompiling the app start it again and after you resized it your should see this, now:</p><figure>
    <picture>
        <source srcset="/images/HelloTool2-dark.png" media="(prefers-color-scheme: dark)">
        <img src="https://oliver-epper.de/images/HelloTool2.png" alt="HelloTool2">
    </picture>
</figure><p>Give it another test. Close the window with ⌘-w and open it again from Finder. Now it should read:</p><blockquote><p>Hallo Welt called: 2 times.</p></blockquote><h2>Next?</h2><p>What do you want to read next? Two things would be cool to figure out:</p><ol><li>How to allow for library validation, and</li><li>How to build an AppKit app only in C++ (I wouldn't consider doing that, but could be fun anyways).</li></ol><h2>Update</h2><p>Regarding the missing allowance for library validation. This is how you can codesign directly from CMake. Edit the CMakeLists.txt file:</p><pre><code><div class="highlight"><span></span><span class="gh">diff --git a/CMakeLists.txt b/CMakeLists.txt</span>
<span class="gh">index 0d2a499..9e37fc4 100644</span>
<span class="gd">--- a/CMakeLists.txt</span>
<span class="gi">+++ b/CMakeLists.txt</span>
<span class="gu">@@ -11,6 +11,8 @@ add_library(hello SHARED src/HelloService.cpp)</span>
<span class="w"> </span>set_target_properties(hello PROPERTIES VERSION ${PROJECT_VERSION})
<span class="w"> </span>set_target_properties(hello PROPERTIES PUBLIC_HEADER src/HelloService.hpp)
<span class="w"> </span>
<span class="gi">+add_custom_command(TARGET hello POST_BUILD COMMAND codesign -s &quot;your_developer_id_application_certificate&quot; $&lt;TARGET_FILE:hello&gt;)</span>
<span class="gi">+</span>
<span class="w"> </span>install(TARGETS hello
<span class="w"> </span>    LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
<span class="w"> </span>    PUBLIC_HEADER DESTINATION ${CMAKE_INSTALL_INCLUDEDIR})
</div></code></pre><p>Now you can enable <em>library validation</em> in Xcode.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://oliver-epper.de/posts/wrap-nstextview-in-swiftui</guid><title>Wrap NSTextView in SwiftUI</title><description>How to wrap a NSTextView in SwiftUI</description><link>https://oliver-epper.de/posts/wrap-nstextview-in-swiftui</link><pubDate>Mon, 7 Dec 2020 09:41:00 +0100</pubDate><content:encoded><![CDATA[<p>During WWDC 2020 SwiftUI lerned a few new things. For example Map and TextEditor. Both are neat additions but still not capable of replacing their corresponding AppKit or UIKit counterparts. The SwiftUI Map can handle annotations but not overlays, yet. And the TextEditor cannot present NSAttributedStrings. So let's wrap a NSTextView in SwiftUI and handle the updating of the model data.</p><h2>Create a ViewController that presents the NSTextView</h2><p>This is pretty easy and no different than you'd expect:</p><pre><code><div class="highlight"><span></span><span class="kd">class</span> <span class="nc">EditorController</span><span class="p">:</span> <span class="n">NSViewController</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nv">textView</span> <span class="p">=</span> <span class="n">NSTextView</span><span class="p">()</span>
    
    <span class="kr">override</span> <span class="kd">func</span> <span class="nf">loadView</span><span class="p">()</span> <span class="p">{</span>
        <span class="kd">let</span> <span class="nv">scrollView</span> <span class="p">=</span> <span class="n">NSScrollView</span><span class="p">()</span>
        <span class="n">scrollView</span><span class="p">.</span><span class="n">hasVerticalScroller</span> <span class="p">=</span> <span class="kc">true</span>
        
        <span class="n">textView</span><span class="p">.</span><span class="n">autoresizingMask</span> <span class="p">=</span> <span class="p">[.</span><span class="n">width</span><span class="p">]</span>
        <span class="n">textView</span><span class="p">.</span><span class="n">allowsUndo</span> <span class="p">=</span> <span class="kc">true</span>
        <span class="n">textView</span><span class="p">.</span><span class="n">font</span> <span class="p">=</span> <span class="p">.</span><span class="n">systemFont</span><span class="p">(</span><span class="n">ofSize</span><span class="p">:</span> <span class="mi">16</span><span class="p">)</span>
        <span class="n">scrollView</span><span class="p">.</span><span class="n">documentView</span> <span class="p">=</span> <span class="n">textView</span>
        
        <span class="kc">self</span><span class="p">.</span><span class="n">view</span> <span class="p">=</span> <span class="n">scrollView</span>
    <span class="p">}</span>
    
    <span class="kr">override</span> <span class="kd">func</span> <span class="nf">viewDidAppear</span><span class="p">()</span> <span class="p">{</span>
        <span class="kc">self</span><span class="p">.</span><span class="n">view</span><span class="p">.</span><span class="n">window</span><span class="p">?.</span><span class="n">makeFirstResponder</span><span class="p">(</span><span class="kc">self</span><span class="p">.</span><span class="n">view</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</div></code></pre><p>In <code>viewDidAppear()</code> I make the controllers view the first responder. I like to be able to start typing immmediatly when the view get's presented and not have to click with the mouse, first. 😎</p><h2>Create a Representable</h2><p>To wrap a <code>NSViewController</code> inside a SwiftUI View struct you can use the protocol <code>NSViewControllerRepresentable</code>:</p><pre><code><div class="highlight"><span></span><span class="kd">struct</span> <span class="nc">EditorControllerView</span><span class="p">:</span> <span class="n">NSViewControllerRepresentable</span> <span class="p">{</span>
    <span class="p">@</span><span class="n">Binding</span> <span class="kd">var</span> <span class="nv">text</span><span class="p">:</span> <span class="nb">String</span>
    
    <span class="kd">func</span> <span class="nf">makeCoordinator</span><span class="p">()</span> <span class="p">-&gt;</span> <span class="n">Coordinator</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">Coordinator</span><span class="p">(</span><span class="kc">self</span><span class="p">)</span>
    <span class="p">}</span>
    
    <span class="kd">class</span> <span class="nc">Coordinator</span><span class="p">:</span> <span class="bp">NSObject</span><span class="p">,</span> <span class="bp">NSTextStorageDelegate</span> <span class="p">{</span>
        <span class="kd">private</span> <span class="kd">var</span> <span class="nv">parent</span><span class="p">:</span> <span class="n">EditorControllerView</span>
        <span class="kd">var</span> <span class="nv">shouldUpdateText</span> <span class="p">=</span> <span class="kc">true</span>
        
        <span class="kd">init</span><span class="p">(</span><span class="kc">_</span> <span class="n">parent</span><span class="p">:</span> <span class="n">EditorControllerView</span><span class="p">)</span> <span class="p">{</span>
            <span class="kc">self</span><span class="p">.</span><span class="n">parent</span> <span class="p">=</span> <span class="n">parent</span>
        <span class="p">}</span>
        
        <span class="kd">func</span> <span class="nf">textStorage</span><span class="p">(</span><span class="kc">_</span> <span class="n">textStorage</span><span class="p">:</span> <span class="bp">NSTextStorage</span><span class="p">,</span> <span class="n">didProcessEditing</span> <span class="n">editedMask</span><span class="p">:</span> <span class="n">NSTextStorageEditActions</span><span class="p">,</span> <span class="n">range</span> <span class="n">editedRange</span><span class="p">:</span> <span class="n">NSRange</span><span class="p">,</span> <span class="n">changeInLength</span> <span class="n">delta</span><span class="p">:</span> <span class="nb">Int</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">guard</span> <span class="n">shouldUpdateText</span> <span class="k">else</span> <span class="p">{</span>
                <span class="k">return</span>
            <span class="p">}</span>
            <span class="kd">let</span> <span class="nv">edited</span> <span class="p">=</span> <span class="n">textStorage</span><span class="p">.</span><span class="n">attributedSubstring</span><span class="p">(</span><span class="n">from</span><span class="p">:</span> <span class="n">editedRange</span><span class="p">).</span><span class="n">string</span>
            <span class="kd">let</span> <span class="nv">insertIndex</span> <span class="p">=</span> <span class="n">parent</span><span class="p">.</span><span class="n">text</span><span class="p">.</span><span class="n">utf16</span><span class="p">.</span><span class="n">index</span><span class="p">(</span><span class="n">parent</span><span class="p">.</span><span class="n">text</span><span class="p">.</span><span class="n">utf16</span><span class="p">.</span><span class="n">startIndex</span><span class="p">,</span> <span class="n">offsetBy</span><span class="p">:</span> <span class="n">editedRange</span><span class="p">.</span><span class="n">lowerBound</span><span class="p">)</span>
            
            <span class="kd">func</span> <span class="nf">numberOfCharactersToDelete</span><span class="p">()</span> <span class="p">-&gt;</span> <span class="nb">Int</span> <span class="p">{</span>
                <span class="n">editedRange</span><span class="p">.</span><span class="n">length</span> <span class="o">-</span> <span class="n">delta</span>
            <span class="p">}</span>
            
            <span class="kd">let</span> <span class="nv">endIndex</span> <span class="p">=</span> <span class="n">parent</span><span class="p">.</span><span class="n">text</span><span class="p">.</span><span class="n">utf16</span><span class="p">.</span><span class="n">index</span><span class="p">(</span><span class="n">insertIndex</span><span class="p">,</span> <span class="n">offsetBy</span><span class="p">:</span> <span class="n">numberOfCharactersToDelete</span><span class="p">())</span>
            <span class="kc">self</span><span class="p">.</span><span class="n">parent</span><span class="p">.</span><span class="n">text</span><span class="p">.</span><span class="n">replaceSubrange</span><span class="p">(</span><span class="n">insertIndex</span><span class="p">..&lt;</span><span class="n">endIndex</span><span class="p">,</span> <span class="n">with</span><span class="p">:</span> <span class="n">edited</span><span class="p">)</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="kd">func</span> <span class="nf">makeNSViewController</span><span class="p">(</span><span class="n">context</span><span class="p">:</span> <span class="n">Context</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="n">EditorController</span> <span class="p">{</span>
        <span class="kd">let</span> <span class="nv">vc</span> <span class="p">=</span> <span class="n">EditorController</span><span class="p">()</span>
        <span class="n">vc</span><span class="p">.</span><span class="n">textView</span><span class="p">.</span><span class="n">textStorage</span><span class="p">?.</span><span class="n">delegate</span> <span class="p">=</span> <span class="n">context</span><span class="p">.</span><span class="n">coordinator</span>
        <span class="k">return</span> <span class="n">vc</span>
    <span class="p">}</span>
    
    <span class="kd">func</span> <span class="nf">updateNSViewController</span><span class="p">(</span><span class="kc">_</span> <span class="n">nsViewController</span><span class="p">:</span> <span class="n">EditorController</span><span class="p">,</span> <span class="n">context</span><span class="p">:</span> <span class="n">Context</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="n">text</span> <span class="o">!=</span> <span class="n">nsViewController</span><span class="p">.</span><span class="n">textView</span><span class="p">.</span><span class="n">string</span> <span class="p">{</span>
            <span class="n">context</span><span class="p">.</span><span class="n">coordinator</span><span class="p">.</span><span class="n">shouldUpdateText</span> <span class="p">=</span> <span class="kc">false</span>
            <span class="n">nsViewController</span><span class="p">.</span><span class="n">textView</span><span class="p">.</span><span class="n">string</span> <span class="p">=</span> <span class="n">text</span>
            <span class="n">context</span><span class="p">.</span><span class="n">coordinator</span><span class="p">.</span><span class="n">shouldUpdateText</span> <span class="p">=</span> <span class="kc">true</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</div></code></pre><p>The basic idea is to use a <code>NSTextStorageDelegate</code> to apply the edit that was done to the <code>textView.textStorage</code> to the <code>@Binding</code>-property.</p><p>But there's a bit to consider:</p><ul><li>Once the <code>@Binding</code> property got updated it will call the <code>updateNSViewController</code> function. This only needs to really do anything if the change originated from the SwiftUI-side of things. If the change came from the ViewController there is nothing more to do.</li></ul><ul><li>The internal representation of the string in the <code>NSTextStorage</code> is utf-16. So if you enter a 😎 in the <code>textView</code> the <code>textStorage</code>-delegate function will tell you that you edited from 0 to 2 and inserted 2 characters. If you replace the 😎 with a 👨‍👩‍👧‍👧 you will edit from 0 to 11 with a delta of 9. Easy 😬</li></ul><ul><li>So the function gets the string representing the editedRange from the <code>textStorage</code> and calculates the position to insert from the utf16-representation. If you replace the 👨‍👩‍👧‍👧 with a 😎 again you edited from 0 to 2 with a delta of -9. This means: for your one character long string to remain one character long you need to delete 9 characters from 2 to 11. ❤️</li></ul><p>Since every update has to change the <code>@Binding</code> property we do both in one go with the handy <code>replaceSubrange</code> function.</p><h2>Testdrive</h2><p>Yeah! Now we have a nice SwiftUI component:</p><pre><code><div class="highlight"><span></span><span class="kd">struct</span> <span class="nc">ContentView</span><span class="p">:</span> <span class="n">View</span> <span class="p">{</span>
    <span class="p">@</span><span class="n">State</span> <span class="kd">private</span> <span class="kd">var</span> <span class="nv">text</span> <span class="p">=</span> <span class="s">&quot;&quot;</span>
    
    <span class="kd">var</span> <span class="nv">body</span><span class="p">:</span> <span class="n">some</span> <span class="n">View</span> <span class="p">{</span>
        <span class="n">VStack</span><span class="p">(</span><span class="n">alignment</span><span class="p">:</span> <span class="p">.</span><span class="n">trailing</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">HStack</span> <span class="p">{</span>
                <span class="n">Text</span><span class="p">(</span><span class="s">&quot;count_key&quot;</span><span class="p">)</span>
                <span class="n">Text</span><span class="p">(</span><span class="nb">String</span><span class="p">(</span><span class="n">text</span><span class="p">.</span><span class="bp">count</span><span class="p">))</span>
            <span class="p">}.</span><span class="n">padding</span><span class="p">()</span>
            <span class="n">EditorControllerView</span><span class="p">(</span><span class="n">text</span><span class="p">:</span> <span class="err">$</span><span class="n">text</span><span class="p">)</span> <span class="c1">// our component</span>
            <span class="n">TextEditor</span><span class="p">(</span><span class="n">text</span><span class="p">:</span> <span class="err">$</span><span class="n">text</span><span class="p">)</span> <span class="c1">// SwiftUI</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</div></code></pre><p>Try editing in a long text &gt; 4Mb with and without the SwiftUI <code>TextEditor</code>.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://oliver-epper.de/posts/how-to-wrap-a-c-library-in-swift</guid><title>How to wrap a C library in a swift package</title><description>How to wrap a C library in a swift package</description><link>https://oliver-epper.de/posts/how-to-wrap-a-c-library-in-swift</link><pubDate>Tue, 24 Nov 2020 09:41:00 +0100</pubDate><content:encoded><![CDATA[<p>There are a few great C/C++ libraries out there that you might want to use in your Swift application. Most of the time you'll find a wrapper already, but not all of the time. Or maybe you want something that is carefully tailored to your project needs.</p><p>Chris Eidhof from <a href="https://www.objc.io">objc.io</a> has a wrapper around the cmark library: <a href="https://github.com/chriseidhof/commonmark-swift">CommonMark-Swift</a>. Let's take that as an example and see how this can be achieved.</p><h2>Create the library package</h2><pre><code><div class="highlight"><span></span>mkdir<span class="w"> </span>~/CommonMark
<span class="nb">cd</span><span class="w"> </span>~/CommonMark
swift<span class="w"> </span>package<span class="w"> </span>init<span class="w"> </span>--type<span class="w"> </span>library
</div></code></pre><p>Before we can actually use the cmark library it needs to be installed. I use brew:</p><pre><code><div class="highlight"><span></span>brew<span class="w"> </span>install<span class="w"> </span>cmark
</div></code></pre><p>Now let's edit the Package.swift</p><pre><code><div class="highlight"><span></span><span class="c1">// swift-tools-version:5.3</span>
<span class="kd">import</span> <span class="nc">PackageDescription</span>

<span class="kd">let</span> <span class="nv">package</span> <span class="p">=</span> <span class="n">Package</span><span class="p">(</span>
    <span class="n">name</span><span class="p">:</span> <span class="s">&quot;CommonMark&quot;</span><span class="p">,</span>
    <span class="n">platforms</span><span class="p">:</span> <span class="p">[</span>
        <span class="p">.</span><span class="n">macOS</span><span class="p">(</span><span class="s">&quot;11&quot;</span><span class="p">)</span>
    <span class="p">],</span>
    <span class="n">products</span><span class="p">:</span> <span class="p">[</span>
        <span class="p">.</span><span class="n">library</span><span class="p">(</span><span class="n">name</span><span class="p">:</span> <span class="s">&quot;CommonMark&quot;</span><span class="p">,</span> <span class="n">targets</span><span class="p">:</span> <span class="p">[</span><span class="s">&quot;CommonMark&quot;</span><span class="p">]),</span>
        <span class="p">.</span><span class="n">library</span><span class="p">(</span><span class="n">name</span><span class="p">:</span> <span class="s">&quot;Ccmark&quot;</span><span class="p">,</span> <span class="n">targets</span><span class="p">:</span> <span class="p">[</span><span class="s">&quot;Ccmark&quot;</span><span class="p">])</span>
    <span class="p">],</span>
    <span class="n">dependencies</span><span class="p">:</span> <span class="p">[</span>
    <span class="p">],</span>
    <span class="n">targets</span><span class="p">:</span> <span class="p">[</span>
        <span class="p">.</span><span class="n">target</span><span class="p">(</span><span class="n">name</span><span class="p">:</span> <span class="s">&quot;CommonMark&quot;</span><span class="p">,</span> <span class="n">dependencies</span><span class="p">:</span> <span class="p">[</span>
            <span class="s">&quot;Ccmark&quot;</span>
        <span class="p">]),</span>
        <span class="p">.</span><span class="n">systemLibrary</span><span class="p">(</span>
            <span class="n">name</span><span class="p">:</span> <span class="s">&quot;Ccmark&quot;</span><span class="p">,</span>
            <span class="n">pkgConfig</span><span class="p">:</span> <span class="s">&quot;libcmark&quot;</span><span class="p">,</span>
            <span class="n">providers</span><span class="p">:</span> <span class="p">[</span>
                <span class="p">.</span><span class="n">brew</span><span class="p">([</span><span class="s">&quot;commonmark&quot;</span><span class="p">])</span>
            <span class="p">]),</span>
        <span class="p">.</span><span class="n">testTarget</span><span class="p">(</span>
            <span class="n">name</span><span class="p">:</span> <span class="s">&quot;CommonMarkTests&quot;</span><span class="p">,</span>
            <span class="n">dependencies</span><span class="p">:</span> <span class="p">[</span><span class="s">&quot;CommonMark&quot;</span><span class="p">]),</span>
    <span class="p">]</span>
<span class="p">)</span>
</div></code></pre><p>So we're building two products:</p><ul><li>CommonMark</li><li>Ccmark</li></ul><p>In the target section you can see that Ccmark is the name that we'll use for libcmark. The leading uppercase C seems to be a standard.</p><p>For this to work we need to create a directory <code>Ccmark</code> below our <code>Sources</code> directory and create the file: <code>module.modulemap</code> with the following content:</p><pre><code><div class="highlight"><span></span><span class="n">module</span> <span class="n">Ccmark</span> <span class="p">[</span><span class="n">system</span><span class="p">]</span> <span class="p">{</span>
    <span class="n">header</span> <span class="s">&quot;/usr/local/include/cmark.h&quot;</span>
    <span class="n">link</span> <span class="s">&quot;libcmark&quot;</span>
    <span class="n">export</span> <span class="o">*</span>
<span class="p">}</span>
</div></code></pre><p>This tells the system where to find the header for libcmark and the library itself. The <code>[system]</code> attribute tells the compiler that <code>cmark.h</code> is a system header and more warnings will be ignored.</p><p>Voila! That's it. We can now use the cmark library in our Swift code.</p><h2>Create a Swift API</h2><p>Chris created another target: <code>CommonMark</code> that gives the user a nicer API to work with. Let's build a minimal version of that.</p><p>Edit <code>Sources/CommonMark/CommonMark.swift</code> like this:</p><pre><code><div class="highlight"><span></span><span class="kd">import</span> <span class="nc">Foundation</span>
<span class="kd">import</span> <span class="nc">Ccmark</span> <span class="c1">// this wraps libcmark</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Node</span> <span class="p">{</span>
    <span class="kd">let</span> <span class="nv">node</span><span class="p">:</span> <span class="n">OpaquePointer</span>

    <span class="kd">public</span> <span class="kd">init</span><span class="p">(</span><span class="kc">_</span> <span class="n">node</span><span class="p">:</span> <span class="n">OpaquePointer</span><span class="p">)</span> <span class="p">{</span>
        <span class="kc">self</span><span class="p">.</span><span class="n">node</span> <span class="p">=</span> <span class="n">node</span>
    <span class="p">}</span>
    
    <span class="kd">public</span> <span class="kd">init</span><span class="p">?(</span><span class="n">markdown</span><span class="p">:</span> <span class="nb">String</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">guard</span> <span class="kd">let</span> <span class="nv">node</span> <span class="p">=</span> <span class="n">cmark_parse_document</span><span class="p">(</span><span class="n">markdown</span><span class="p">,</span> <span class="n">markdown</span><span class="p">.</span><span class="n">utf8</span><span class="p">.</span><span class="bp">count</span><span class="p">,</span> <span class="n">CMARK_OPT_DEFAULT</span><span class="p">)</span> <span class="k">else</span> <span class="p">{</span>
            <span class="k">return</span> <span class="kc">nil</span>
        <span class="p">}</span>
        <span class="kc">self</span><span class="p">.</span><span class="n">node</span> <span class="p">=</span> <span class="n">node</span>
    <span class="p">}</span>

    <span class="kd">deinit</span> <span class="p">{</span>
        <span class="k">guard</span> <span class="n">type</span> <span class="p">==</span> <span class="n">CMARK_NODE_DOCUMENT</span> <span class="k">else</span> <span class="p">{</span> <span class="k">return</span> <span class="p">}</span>
        <span class="n">cmark_node_free</span><span class="p">(</span><span class="n">node</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="kd">public</span> <span class="kd">var</span> <span class="nv">type</span><span class="p">:</span> <span class="n">cmark_node_type</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">cmark_node_get_type</span><span class="p">(</span><span class="n">node</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="kd">public</span> <span class="kd">var</span> <span class="nv">typeString</span><span class="p">:</span> <span class="nb">String</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nb">String</span><span class="p">(</span><span class="n">cString</span><span class="p">:</span> <span class="n">cmark_node_get_type_string</span><span class="p">(</span><span class="n">node</span><span class="p">))</span>
    <span class="p">}</span>

    <span class="kd">public</span> <span class="kd">var</span> <span class="nv">children</span><span class="p">:</span> <span class="p">[</span><span class="n">Node</span><span class="p">]</span> <span class="p">{</span>
        <span class="kd">var</span> <span class="nv">result</span><span class="p">:</span> <span class="p">[</span><span class="n">Node</span><span class="p">]</span> <span class="p">=</span> <span class="p">[]</span>
        
      	<span class="c1">// cmark_node_first_child can return nil</span>
        <span class="kd">var</span> <span class="nv">child</span> <span class="p">=</span> <span class="n">cmark_node_first_child</span><span class="p">(</span><span class="n">node</span><span class="p">)</span>
        <span class="k">while</span> <span class="kd">let</span> <span class="nv">unwrapped</span> <span class="p">=</span> <span class="n">child</span> <span class="p">{</span>
            <span class="n">result</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">Node</span><span class="p">(</span><span class="n">unwrapped</span><span class="p">))</span>
            <span class="n">child</span> <span class="p">=</span> <span class="n">cmark_node_next</span><span class="p">(</span><span class="n">child</span><span class="p">)</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="n">result</span>
    <span class="p">}</span>
<span class="p">}</span>
</div></code></pre><p>This is pretty straight forward. The class Node encapsulates a pointer to the cmark node type. It gets initialized in the failable initializer through the call to the function <code>cmark_parse_document</code>. For this to work you need to import Ccmark.</p><blockquote><p>If you want to read the documentation for libcmark you can open the man-page with <code>man 3 cmark</code>. The <code>3</code> opens the library documentation as opposed to the implicit <code>1</code> which would open the cmark commands man page.</p></blockquote><p>This will not compile yet, because of the <code>testExample</code> test. Let's create a useful test:</p><pre><code><div class="highlight"><span></span><span class="kd">import</span> <span class="nc">XCTest</span>
<span class="p">@</span><span class="n">testable</span> <span class="kd">import</span> <span class="nc">CommonMark</span>

<span class="kr">final</span> <span class="kd">class</span> <span class="nc">CommonMarkTests</span><span class="p">:</span> <span class="n">XCTestCase</span> <span class="p">{</span>
    <span class="kd">func</span> <span class="nf">testCaption</span><span class="p">()</span> <span class="p">{</span>
        <span class="kd">let</span> <span class="nv">markdown</span> <span class="p">=</span> <span class="s">&quot;# Caption&quot;</span>
        <span class="kd">let</span> <span class="nv">node</span> <span class="p">=</span> <span class="n">Node</span><span class="p">(</span><span class="n">markdown</span><span class="p">:</span> <span class="n">markdown</span><span class="p">)</span><span class="o">!</span>
        <span class="kd">let</span> <span class="nv">heading</span> <span class="p">=</span> <span class="n">node</span><span class="p">.</span><span class="n">children</span><span class="p">.</span><span class="bp">first</span>
        <span class="n">XCTAssertEqual</span><span class="p">(</span><span class="n">heading</span><span class="p">?.</span><span class="n">typeString</span><span class="p">,</span> <span class="s">&quot;heading&quot;</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</div></code></pre><h2>Include the library with your app</h2><p>If you want to include the <code>dylib </code> with your app bundle you can create a <code>Frameworks</code> subdirectory below <code>Contents</code> and copy the library there. You can tell your app where it can find the library with the following command:</p><pre><code><div class="highlight"><span></span>install_name_tool<span class="w"> </span>-change<span class="w"> </span>/usr/local/opt/cmark/lib/libcmark.0.29.0.dylib<span class="w"> </span><span class="s2">&quot;@executable_path/../Frameworks/libcmark.dylib&quot;</span><span class="w"> </span>./&lt;YourApp&gt;.app/Contents/MacOS/Scratched
</div></code></pre><p>You can find out the the standard path of the library with the following command:</p><pre><code><div class="highlight"><span></span>otool<span class="w"> </span>-L<span class="w"> </span>/usr/local/lib/libcmark.dylib
</div></code></pre>]]></content:encoded></item><item><guid isPermaLink="true">https://oliver-epper.de/posts/create-a-document-based-editor-from-scratch-as-a-swift-package</guid><title>Create a document based editor from scratch as a swift package</title><description>How to create document based editor without Xcode templates, Storyboards and XIBs</description><link>https://oliver-epper.de/posts/create-a-document-based-editor-from-scratch-as-a-swift-package</link><pubDate>Thu, 19 Nov 2020 09:41:00 +0100</pubDate><content:encoded><![CDATA[<p>I thought I had most of the information for this ready from either <a href="https://rderik.com/blog/understanding-a-few-concepts-of-macos-applications-by-building-an-agent-based-menu-bar-app/">Derik Ramirez's</a> great blog or the great article <a href="https://medium.com/@theboi/creating-macos-apps-without-a-storyboard-or-xib-file-516115ee9d26">Creating macOS apps without a storyboard or .xib file with Swift 5</a> from Ryan Theodore The. But I ran into some real hard to figure out pices that where all answered by the great guys from <a href="https://www.objc.io">objc.io</a> — I am a happy subscriber 😀</p><h2>Create a Hello World App</h2><pre><code><div class="highlight"><span></span>mkdir<span class="w"> </span>~/Desktop/Scratched
<span class="nb">cd</span><span class="w"> </span>~/Desktop/Scratched
swift<span class="w"> </span>package<span class="w"> </span>init<span class="w"> </span>--type<span class="w"> </span>executable
xed<span class="w"> </span>.
</div></code></pre><h3>Create an AppDelegate</h3><pre><code><div class="highlight"><span></span><span class="kd">import</span> <span class="nc">Cocoa</span>
<span class="kd">import</span> <span class="nc">os</span><span class="p">.</span><span class="nc">log</span>

<span class="kd">class</span> <span class="nc">AppDelegate</span><span class="p">:</span> <span class="bp">NSObject</span><span class="p">,</span> <span class="n">NSApplicationDelegate</span> <span class="p">{</span>

    <span class="kd">func</span> <span class="nf">applicationDidFinishLaunching</span><span class="p">(</span><span class="kc">_</span> <span class="n">notification</span><span class="p">:</span> <span class="n">Notification</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">os_log</span><span class="p">(.</span><span class="n">debug</span><span class="p">,</span> <span class="s">&quot;%@ started&quot;</span><span class="p">,</span> <span class="n">ProcessInfo</span><span class="p">.</span><span class="n">processInfo</span><span class="p">.</span><span class="n">processName</span> <span class="k">as</span> <span class="n">CVarArg</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</div></code></pre><p>Remeber to set the target platform in Package.swift for this to work.</p><pre><code><div class="highlight"><span></span><span class="kd">let</span> <span class="nv">package</span> <span class="p">=</span> <span class="n">Package</span><span class="p">(</span>
    <span class="n">name</span><span class="p">:</span> <span class="s">&quot;Scratched&quot;</span><span class="p">,</span>
    <span class="n">platforms</span><span class="p">:</span> <span class="p">[</span>
        <span class="p">.</span><span class="n">macOS</span><span class="p">(</span><span class="s">&quot;11&quot;</span><span class="p">)</span>
    <span class="p">],...</span>
</div></code></pre><h3>Update the main.swift file</h3><pre><code><div class="highlight"><span></span><span class="kd">import</span> <span class="nc">Cocoa</span>

<span class="kd">let</span> <span class="nv">app</span> <span class="p">=</span> <span class="n">NSApplication</span><span class="p">.</span><span class="n">shared</span>
<span class="kd">let</span> <span class="nv">delegate</span> <span class="p">=</span> <span class="n">AppDelegate</span><span class="p">()</span>
<span class="n">app</span><span class="p">.</span><span class="n">delegate</span> <span class="p">=</span> <span class="n">delegate</span>
<span class="n">app</span><span class="p">.</span><span class="n">run</span><span class="p">()</span>
</div></code></pre><p>Now you can press cmd-r and you should see the log message.</p><h2>Make it document based</h2><h3>Create a model class</h3><p>Let's reuse the same class I used <a href="https://oliver-epper.de/posts/create-a-document-based-editor-with-xib-files-and-swifty-cocoa-bindings/">here</a></p><pre><code><div class="highlight"><span></span><span class="kd">import</span> <span class="nc">Foundation</span>

<span class="kd">class</span> <span class="nc">Content</span><span class="p">:</span> <span class="bp">NSObject</span> <span class="p">{</span>
    <span class="kr">@objc</span> <span class="kr">dynamic</span> <span class="kd">var</span> <span class="nv">contentString</span><span class="p">:</span> <span class="nb">String</span>

    <span class="kd">init</span><span class="p">(</span><span class="n">contentString</span><span class="p">:</span> <span class="nb">String</span><span class="p">)</span> <span class="p">{</span>
        <span class="kc">self</span><span class="p">.</span><span class="n">contentString</span> <span class="p">=</span> <span class="n">contentString</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">extension</span> <span class="nc">Content</span> <span class="p">{</span>
    <span class="kd">func</span> <span class="nf">read</span><span class="p">(</span><span class="n">from</span> <span class="n">data</span><span class="p">:</span> <span class="n">Data</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">contentString</span> <span class="p">=</span> <span class="nb">String</span><span class="p">(</span><span class="n">bytes</span><span class="p">:</span> <span class="n">data</span><span class="p">,</span> <span class="n">encoding</span><span class="p">:</span> <span class="p">.</span><span class="n">utf8</span><span class="p">)</span> <span class="p">??</span> <span class="s">&quot;&quot;</span>
    <span class="p">}</span>

    <span class="kd">func</span> <span class="nf">data</span><span class="p">()</span> <span class="p">-&gt;</span> <span class="n">Data</span> <span class="p">{</span>
        <span class="n">contentString</span><span class="p">.</span><span class="n">data</span><span class="p">(</span><span class="n">using</span><span class="p">:</span> <span class="p">.</span><span class="n">utf8</span><span class="p">)</span> <span class="p">??</span> <span class="n">Data</span><span class="p">()</span>
    <span class="p">}</span>
<span class="p">}</span>
</div></code></pre><p>Before we create the Document type let's create a ViewController.</p><h3>Create a ViewController</h3><pre><code><div class="highlight"><span></span><span class="kd">import</span> <span class="nc">Cocoa</span>
<span class="kd">import</span> <span class="nc">os</span><span class="p">.</span><span class="nc">log</span>

<span class="kr">final</span> <span class="kd">class</span> <span class="nc">ViewController</span><span class="p">:</span> <span class="n">NSViewController</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nv">textView</span> <span class="p">=</span> <span class="n">NSTextView</span><span class="p">()</span>

    <span class="kr">override</span> <span class="kd">func</span> <span class="nf">loadView</span><span class="p">()</span> <span class="p">{</span>
        <span class="kd">let</span> <span class="nv">scrollView</span> <span class="p">=</span> <span class="n">NSScrollView</span><span class="p">()</span>
        <span class="n">scrollView</span><span class="p">.</span><span class="n">hasVerticalScroller</span> <span class="p">=</span> <span class="kc">true</span>

        <span class="n">textView</span><span class="p">.</span><span class="n">isRichText</span> <span class="p">=</span> <span class="kc">false</span>
        <span class="n">textView</span><span class="p">.</span><span class="n">allowsUndo</span> <span class="p">=</span> <span class="kc">true</span>
        <span class="n">textView</span><span class="p">.</span><span class="n">autoresizingMask</span> <span class="p">=</span> <span class="p">[.</span><span class="n">width</span><span class="p">]</span>
        <span class="n">scrollView</span><span class="p">.</span><span class="n">documentView</span> <span class="p">=</span> <span class="n">textView</span>

        <span class="kc">self</span><span class="p">.</span><span class="n">view</span> <span class="p">=</span> <span class="n">scrollView</span>
    <span class="p">}</span>

    <span class="kr">override</span> <span class="kd">func</span> <span class="nf">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
        <span class="kc">super</span><span class="p">.</span><span class="n">viewDidLoad</span><span class="p">()</span>

        <span class="k">if</span> <span class="kd">let</span> <span class="nv">content</span> <span class="p">=</span> <span class="n">representedObject</span> <span class="k">as</span><span class="p">?</span> <span class="n">Content</span> <span class="p">{</span>
            <span class="n">textView</span><span class="p">.</span><span class="n">bind</span><span class="p">(.</span><span class="n">value</span><span class="p">,</span> <span class="n">to</span><span class="p">:</span> <span class="n">content</span><span class="p">,</span> <span class="n">keyPath</span><span class="p">:</span> <span class="err">\</span><span class="p">.</span><span class="n">contentString</span><span class="p">,</span> <span class="n">options</span><span class="p">:</span> <span class="p">[</span><span class="n">NSBindingOption</span><span class="p">.</span><span class="n">continuouslyUpdatesValue</span><span class="p">:</span> <span class="kc">true</span><span class="p">])</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">extension</span> <span class="bp">NSObject</span> <span class="p">{</span>
    <span class="kd">func</span> <span class="nf">bind</span><span class="p">&lt;</span><span class="n">Root</span><span class="p">,</span> <span class="n">Value</span><span class="p">&gt;(</span><span class="kc">_</span> <span class="n">binding</span><span class="p">:</span> <span class="n">NSBindingName</span><span class="p">,</span> <span class="n">to</span> <span class="n">observable</span><span class="p">:</span> <span class="n">Root</span><span class="p">,</span> <span class="n">keyPath</span><span class="p">:</span> <span class="n">KeyPath</span><span class="p">&lt;</span><span class="n">Root</span><span class="p">,</span> <span class="n">Value</span><span class="p">&gt;,</span> <span class="n">options</span><span class="p">:</span> <span class="p">[</span><span class="n">NSBindingOption</span><span class="p">:</span> <span class="nb">Any</span><span class="p">]?</span> <span class="p">=</span> <span class="kc">nil</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">guard</span> <span class="kd">let</span> <span class="nv">kvcKeyPath</span> <span class="p">=</span> <span class="n">keyPath</span><span class="p">.</span><span class="n">_kvcKeyPathString</span> <span class="k">else</span> <span class="p">{</span>
            <span class="n">os_log</span><span class="p">(</span><span class="s">&quot;KeyPath does not contain @objc exposed values&quot;</span><span class="p">)</span>
            <span class="k">return</span>
        <span class="p">}</span>
        <span class="n">bind</span><span class="p">(</span><span class="n">binding</span><span class="p">,</span> <span class="n">to</span><span class="p">:</span> <span class="n">observable</span><span class="p">,</span> <span class="n">withKeyPath</span><span class="p">:</span> <span class="n">kvcKeyPath</span><span class="p">,</span> <span class="n">options</span><span class="p">:</span> <span class="n">options</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</div></code></pre><h3>Create the document class</h3><pre><code><div class="highlight"><span></span><span class="kd">import</span> <span class="nc">Cocoa</span>

<span class="kd">class</span> <span class="nc">Document</span><span class="p">:</span> <span class="n">NSDocument</span> <span class="p">{</span>
    <span class="kr">@objc</span> <span class="kr">dynamic</span> <span class="kd">var</span> <span class="nv">content</span> <span class="p">=</span> <span class="n">Content</span><span class="p">(</span><span class="n">contentString</span><span class="p">:</span> <span class="s">&quot;&quot;</span><span class="p">)</span>

    <span class="kd">private</span> <span class="kr">lazy</span> <span class="kd">var</span> <span class="nv">viewController</span> <span class="p">=</span> <span class="n">ViewController</span><span class="p">()</span>

    <span class="kr">override</span> <span class="kd">func</span> <span class="nf">makeWindowControllers</span><span class="p">()</span> <span class="p">{</span>
        <span class="n">viewController</span><span class="p">.</span><span class="n">representedObject</span> <span class="p">=</span> <span class="n">content</span>
        <span class="kd">let</span> <span class="nv">window</span> <span class="p">=</span> <span class="n">NSWindow</span><span class="p">(</span><span class="n">contentViewController</span><span class="p">:</span> <span class="n">viewController</span><span class="p">)</span>
        <span class="n">window</span><span class="p">.</span><span class="n">setContentSize</span><span class="p">(</span><span class="n">NSSize</span><span class="p">(</span><span class="n">width</span><span class="p">:</span> <span class="mi">640</span><span class="p">,</span> <span class="n">height</span><span class="p">:</span> <span class="mi">480</span><span class="p">))</span>
        <span class="kd">let</span> <span class="nv">wc</span> <span class="p">=</span> <span class="n">NSWindowController</span><span class="p">(</span><span class="n">window</span><span class="p">:</span> <span class="n">window</span><span class="p">)</span>
        <span class="n">addWindowController</span><span class="p">(</span><span class="n">wc</span><span class="p">)</span>
        <span class="n">wc</span><span class="p">.</span><span class="n">contentViewController</span> <span class="p">=</span> <span class="n">viewController</span>
        <span class="n">window</span><span class="p">.</span><span class="n">setFrameAutosaveName</span><span class="p">(</span><span class="s">&quot;window_frame&quot;</span><span class="p">)</span>
        <span class="n">window</span><span class="p">.</span><span class="n">makeKeyAndOrderFront</span><span class="p">(</span><span class="kc">nil</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</div></code></pre><h3>Create the document controller class</h3><p>This is important to tell the system about our Document class. I learned this from <a href="https://www.objc.io">objc.io</a>.</p><pre><code><div class="highlight"><span></span><span class="kd">import</span> <span class="nc">Cocoa</span>

<span class="kd">class</span> <span class="nc">DocumentController</span><span class="p">:</span> <span class="n">NSDocumentController</span> <span class="p">{</span>
    <span class="kr">override</span> <span class="kd">var</span> <span class="nv">documentClassNames</span><span class="p">:</span> <span class="p">[</span><span class="nb">String</span><span class="p">]</span> <span class="p">{</span>
        <span class="p">[</span><span class="s">&quot;Document&quot;</span><span class="p">]</span>
    <span class="p">}</span>

    <span class="kr">override</span> <span class="kd">var</span> <span class="nv">defaultType</span><span class="p">:</span> <span class="nb">String</span><span class="p">?</span> <span class="p">{</span>
        <span class="s">&quot;Document&quot;</span>
    <span class="p">}</span>

    <span class="kr">override</span> <span class="kd">func</span> <span class="nf">documentClass</span><span class="p">(</span><span class="n">forType</span> <span class="n">typeName</span><span class="p">:</span> <span class="nb">String</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="nb">AnyClass</span><span class="p">?</span> <span class="p">{</span>
        <span class="n">Document</span><span class="p">.</span><span class="kc">self</span>
    <span class="p">}</span>
<span class="p">}</span>
</div></code></pre><p><strong>Now comes the fun part!</strong></p><p>To actually hook this up we need to add the following to the AppDelegate:</p><pre><code><div class="highlight"><span></span><span class="kd">func</span> <span class="nf">applicationWillFinishLaunching</span><span class="p">(</span><span class="kc">_</span> <span class="n">notification</span><span class="p">:</span> <span class="n">Notification</span><span class="p">)</span> <span class="p">{</span>
  <span class="kc">_</span> <span class="p">=</span> <span class="n">DocumentController</span><span class="p">()</span>
<span class="p">}</span>
</div></code></pre><p>Please take note that this is not <code>...DidFinish</code>, but <code>...WillFinish</code>! As Florian from <a href="https://www.objc.io">objc.io</a> pointed out: <strong>The first instance of a NSDocumentController in your app becomes the document controller of your app!</strong></p><p>And one more thing:</p><p>Normally you would have an entry like this in your Info.plist</p><pre><code><div class="highlight"><span></span><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
<span class="cp">&lt;!DOCTYPE plist PUBLIC &quot;-//Apple//DTD PLIST 1.0//EN&quot; &quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;&gt;</span>
<span class="nt">&lt;plist</span><span class="w"> </span><span class="na">version=</span><span class="s">&quot;1.0&quot;</span><span class="nt">&gt;</span>
<span class="nt">&lt;dict&gt;</span>
<span class="w">    </span><span class="nt">&lt;key&gt;</span>NSPrincipalClass<span class="nt">&lt;/key&gt;</span>
<span class="w">    </span><span class="nt">&lt;string&gt;</span>NSApplication<span class="nt">&lt;/string&gt;</span>
<span class="nt">&lt;/dict&gt;</span>
<span class="nt">&lt;/plist&gt;</span>
</div></code></pre><p>This tells the system that your app is a regular app. In code we add this to the main.swift:</p><pre><code><div class="highlight"><span></span><span class="n">app</span><span class="p">.</span><span class="n">setActivationPolicy</span><span class="p">(.</span><span class="n">regular</span><span class="p">)</span>
</div></code></pre><p>add it before the call to <code>run()</code>.</p><p>You should be able to start the app and type into the NSTextView, now.</p><h3>Let's create the menu</h3><p>I initially found this in Ryan's article:</p><pre><code><div class="highlight"><span></span><span class="kd">import</span> <span class="nc">Cocoa</span>

<span class="kd">class</span> <span class="nc">Menu</span><span class="p">:</span> <span class="n">NSMenu</span> <span class="p">{</span>
    <span class="kd">private</span> <span class="kr">lazy</span> <span class="kd">var</span> <span class="nv">appName</span> <span class="p">=</span> <span class="n">ProcessInfo</span><span class="p">.</span><span class="n">processInfo</span><span class="p">.</span><span class="n">processName</span>

    <span class="kr">override</span> <span class="kd">init</span><span class="p">(</span><span class="n">title</span><span class="p">:</span> <span class="nb">String</span><span class="p">)</span> <span class="p">{</span>
        <span class="kc">super</span><span class="p">.</span><span class="kd">init</span><span class="p">(</span><span class="n">title</span><span class="p">:</span> <span class="n">title</span><span class="p">)</span>

        <span class="c1">// App Menu</span>
        <span class="kd">let</span> <span class="nv">appMenu</span> <span class="p">=</span> <span class="n">NSMenuItem</span><span class="p">()</span>
        <span class="n">appMenu</span><span class="p">.</span><span class="n">submenu</span> <span class="p">=</span> <span class="n">NSMenu</span><span class="p">()</span>
        <span class="n">appMenu</span><span class="p">.</span><span class="n">submenu</span><span class="p">?.</span><span class="n">items</span> <span class="p">=</span> <span class="p">[</span>
            <span class="n">NSMenuItem</span><span class="p">(</span><span class="n">title</span><span class="p">:</span> <span class="s">&quot;About </span><span class="si">\(</span><span class="n">appName</span><span class="si">)</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">action</span><span class="p">:</span> <span class="k">#selector</span><span class="p">(</span><span class="n">NSApplication</span><span class="p">.</span><span class="n">orderFrontStandardAboutPanel</span><span class="p">(</span><span class="kc">_</span><span class="p">:)),</span> <span class="n">keyEquivalent</span><span class="p">:</span> <span class="s">&quot;&quot;</span><span class="p">),</span>
            <span class="n">NSMenuItem</span><span class="p">.</span><span class="n">separator</span><span class="p">(),</span>
            <span class="n">NSMenuItem</span><span class="p">(</span><span class="n">title</span><span class="p">:</span> <span class="s">&quot;Quit&quot;</span><span class="p">,</span> <span class="n">action</span><span class="p">:</span> <span class="k">#selector</span><span class="p">(</span><span class="n">NSApplication</span><span class="p">.</span><span class="n">terminate</span><span class="p">(</span><span class="kc">_</span><span class="p">:)),</span> <span class="n">keyEquivalent</span><span class="p">:</span> <span class="s">&quot;q&quot;</span><span class="p">)</span>
        <span class="p">]</span>
        
        <span class="c1">// File Menu</span>
        <span class="kd">let</span> <span class="nv">fileMenu</span> <span class="p">=</span> <span class="n">NSMenuItem</span><span class="p">()</span>
        <span class="n">fileMenu</span><span class="p">.</span><span class="n">submenu</span> <span class="p">=</span> <span class="n">NSMenu</span><span class="p">(</span><span class="n">title</span><span class="p">:</span> <span class="s">&quot;File&quot;</span><span class="p">)</span>
        <span class="n">fileMenu</span><span class="p">.</span><span class="n">submenu</span><span class="p">?.</span><span class="n">items</span> <span class="p">=</span> <span class="p">[</span>
            <span class="n">NSMenuItem</span><span class="p">(</span><span class="n">title</span><span class="p">:</span> <span class="s">&quot;New&quot;</span><span class="p">,</span> <span class="n">action</span><span class="p">:</span> <span class="k">#selector</span><span class="p">(</span><span class="n">NSDocumentController</span><span class="p">.</span><span class="n">newDocument</span><span class="p">(</span><span class="kc">_</span><span class="p">:)),</span> <span class="n">keyEquivalent</span><span class="p">:</span> <span class="s">&quot;n&quot;</span><span class="p">),</span>
            <span class="n">NSMenuItem</span><span class="p">(</span><span class="n">title</span><span class="p">:</span> <span class="s">&quot;Open&quot;</span><span class="p">,</span> <span class="n">action</span><span class="p">:</span> <span class="k">#selector</span><span class="p">(</span><span class="n">NSDocumentController</span><span class="p">.</span><span class="n">openDocument</span><span class="p">(</span><span class="kc">_</span><span class="p">:)),</span> <span class="n">keyEquivalent</span><span class="p">:</span> <span class="s">&quot;o&quot;</span><span class="p">),</span>
            <span class="n">NSMenuItem</span><span class="p">.</span><span class="n">separator</span><span class="p">(),</span>
            <span class="n">NSMenuItem</span><span class="p">(</span><span class="n">title</span><span class="p">:</span> <span class="s">&quot;Close&quot;</span><span class="p">,</span> <span class="n">action</span><span class="p">:</span> <span class="k">#selector</span><span class="p">(</span><span class="n">NSWindow</span><span class="p">.</span><span class="n">performClose</span><span class="p">(</span><span class="kc">_</span><span class="p">:)),</span> <span class="n">keyEquivalent</span><span class="p">:</span> <span class="s">&quot;w&quot;</span><span class="p">),</span>
            <span class="n">NSMenuItem</span><span class="p">(</span><span class="n">title</span><span class="p">:</span> <span class="s">&quot;Save&quot;</span><span class="p">,</span> <span class="n">action</span><span class="p">:</span> <span class="k">#selector</span><span class="p">(</span><span class="n">NSDocument</span><span class="p">.</span><span class="n">save</span><span class="p">(</span><span class="kc">_</span><span class="p">:)),</span> <span class="n">keyEquivalent</span><span class="p">:</span> <span class="s">&quot;s&quot;</span><span class="p">)</span>
        <span class="p">]</span>

        <span class="c1">// Edit Menu</span>
        <span class="kd">let</span> <span class="nv">editMenu</span> <span class="p">=</span> <span class="n">NSMenuItem</span><span class="p">()</span>
        <span class="n">editMenu</span><span class="p">.</span><span class="n">submenu</span> <span class="p">=</span> <span class="n">NSMenu</span><span class="p">(</span><span class="n">title</span><span class="p">:</span> <span class="s">&quot;Edit&quot;</span><span class="p">)</span>
        <span class="n">editMenu</span><span class="p">.</span><span class="n">submenu</span><span class="p">?.</span><span class="n">items</span> <span class="p">=</span> <span class="p">[</span>
            <span class="n">NSMenuItem</span><span class="p">(</span><span class="n">title</span><span class="p">:</span> <span class="s">&quot;Undo&quot;</span><span class="p">,</span> <span class="n">action</span><span class="p">:</span> <span class="nb">Selector</span><span class="p">((</span><span class="s">&quot;undo:&quot;</span><span class="p">)),</span> <span class="n">keyEquivalent</span><span class="p">:</span> <span class="s">&quot;z&quot;</span><span class="p">),</span>
            <span class="n">NSMenuItem</span><span class="p">(</span><span class="n">title</span><span class="p">:</span> <span class="s">&quot;Redo&quot;</span><span class="p">,</span> <span class="n">action</span><span class="p">:</span> <span class="nb">Selector</span><span class="p">((</span><span class="s">&quot;redo:&quot;</span><span class="p">)),</span> <span class="n">keyEquivalent</span><span class="p">:</span> <span class="s">&quot;Z&quot;</span><span class="p">)</span>
        <span class="p">]</span>

        <span class="n">items</span> <span class="p">=</span> <span class="p">[</span><span class="n">appMenu</span><span class="p">,</span> <span class="n">fileMenu</span><span class="p">,</span> <span class="n">editMenu</span><span class="p">]</span>
    <span class="p">}</span>
    
    <span class="kr">required</span> <span class="kd">init</span><span class="p">(</span><span class="n">coder</span><span class="p">:</span> <span class="bp">NSCoder</span><span class="p">)</span> <span class="p">{</span>
        <span class="kc">super</span><span class="p">.</span><span class="kd">init</span><span class="p">(</span><span class="n">coder</span><span class="p">:</span> <span class="n">coder</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</div></code></pre><p>to hook it up edit main.swift:</p><pre><code><div class="highlight"><span></span><span class="kd">let</span> <span class="nv">menu</span> <span class="p">=</span> <span class="n">Menu</span><span class="p">()</span>
<span class="n">app</span><span class="p">.</span><span class="n">menu</span> <span class="p">=</span> <span class="n">menu</span>
</div></code></pre><h3>Enable open and save</h3><p>add this to Document.swift:</p><pre><code><div class="highlight"><span></span><span class="kr">override</span> <span class="kd">func</span> <span class="nf">data</span><span class="p">(</span><span class="n">ofType</span> <span class="n">typeName</span><span class="p">:</span> <span class="nb">String</span><span class="p">)</span> <span class="kr">throws</span> <span class="p">-&gt;</span> <span class="n">Data</span> <span class="p">{</span>
  <span class="n">viewController</span><span class="p">.</span><span class="n">textView</span><span class="p">.</span><span class="n">breakUndoCoalescing</span><span class="p">()</span>
	<span class="k">return</span> <span class="n">content</span><span class="p">.</span><span class="n">data</span><span class="p">()</span>
<span class="p">}</span>

<span class="kr">override</span> <span class="kd">func</span> <span class="nf">read</span><span class="p">(</span><span class="n">from</span> <span class="n">data</span><span class="p">:</span> <span class="n">Data</span><span class="p">,</span> <span class="n">ofType</span> <span class="n">typeName</span><span class="p">:</span> <span class="nb">String</span><span class="p">)</span> <span class="kr">throws</span> <span class="p">{</span>
	<span class="n">content</span><span class="p">.</span><span class="n">read</span><span class="p">(</span><span class="n">from</span><span class="p">:</span> <span class="n">data</span><span class="p">)</span>
<span class="p">}</span>
</div></code></pre><p>and these to tell the system that we handle normal text-files:</p><pre><code><div class="highlight"><span></span><span class="kr">override</span> <span class="kd">class</span> <span class="nc">var</span> <span class="n">readableTypes</span><span class="p">:</span> <span class="p">[</span><span class="nb">String</span><span class="p">]</span> <span class="p">{</span>
  <span class="p">[</span><span class="s">&quot;public.text&quot;</span><span class="p">]</span>
<span class="p">}</span>

<span class="kr">override</span> <span class="kd">class</span> <span class="nc">func</span> <span class="n">isNativeType</span><span class="p">(</span><span class="kc">_</span> <span class="n">type</span><span class="p">:</span> <span class="nb">String</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="nb">Bool</span> <span class="p">{</span>
  <span class="kc">true</span>
<span class="p">}</span>
</div></code></pre><h3>Magic sauce!</h3><p>At this point you cannot select standard text files to open 😳 The Document class clearly says that is is able to read "public.text". But we need to make the complete class visible to the Objc runtime.</p><pre><code><div class="highlight"><span></span><span class="kr">@objc</span><span class="p">(</span><span class="n">Document</span><span class="p">)</span>
<span class="kd">class</span> <span class="nc">Documnt</span><span class="p">:</span> <span class="n">NSDocument</span> <span class="p">{...}</span>
</div></code></pre><p>Thanks to the guys at <a href="https://www.objc.io">objc.io</a> we now have a working text editor.</p><h3>Makefile</h3><p><a href="https://rderik.com">Derik Ramirez</a> provided me with a simple Makefile:</p><pre><code><div class="highlight"><span></span><span class="nv">SUPPORTFILES</span><span class="o">=</span>./SupportFiles
<span class="nv">PLATFORM</span><span class="o">=</span>x86_64-apple-macosx
<span class="nv">BUILD_DIRECTORY</span><span class="w"> </span><span class="o">=</span><span class="w"> </span>./.build/<span class="si">${</span><span class="nv">PLATFORM</span><span class="si">}</span>/debug
<span class="nv">APP_DIRECTORY</span><span class="o">=</span>./Scratched.app
<span class="nv">CFBUNDLEEXECUTABLE</span><span class="o">=</span>Scratched

<span class="nf">install</span><span class="o">:</span><span class="w"> </span><span class="n">build</span> <span class="n">copySupportFiles</span>

<span class="nf">build</span><span class="o">:</span>
<span class="w">	</span>swift<span class="w"> </span>build

<span class="nf">copySupportFiles</span><span class="o">:</span>
<span class="w">	</span>mkdir<span class="w"> </span>-p<span class="w"> </span><span class="si">${</span><span class="nv">APP_DIRECTORY</span><span class="si">}</span>/Contents/MacOS/<span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span><span class="se">\</span>
<span class="w">	</span>cp<span class="w"> </span><span class="si">${</span><span class="nv">SUPPORTFILES</span><span class="si">}</span>/Info.plist<span class="w"> </span><span class="si">${</span><span class="nv">APP_DIRECTORY</span><span class="si">}</span>/Contents<span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span><span class="se">\</span>
<span class="w">	</span>cp<span class="w"> </span><span class="si">${</span><span class="nv">BUILD_DIRECTORY</span><span class="si">}</span>/<span class="si">${</span><span class="nv">CFBUNDLEEXECUTABLE</span><span class="si">}</span><span class="w"> </span><span class="si">${</span><span class="nv">APP_DIRECTORY</span><span class="si">}</span>/Contents/MacOS/

<span class="nf">run</span><span class="o">:</span><span class="w"> </span><span class="p">|</span> <span class="n">install</span>
<span class="w">	</span>open<span class="w"> </span><span class="si">${</span><span class="nv">APP_DIRECTORY</span><span class="si">}</span>

<span class="nf">clean</span><span class="o">:</span>
<span class="w">	</span>rm<span class="w"> </span>-rf<span class="w"> </span>.build
<span class="w">	</span>rm<span class="w"> </span>-rf<span class="w"> </span><span class="si">${</span><span class="nv">APP_DIRECTORY</span><span class="si">}</span>

<span class="nf">.PHONY</span><span class="o">:</span><span class="w"> </span><span class="n">run</span> <span class="n">build</span> <span class="n">copySupportFiles</span> <span class="n">clean</span>
</div></code></pre><p>For this to work you need to create</p><pre><code><div class="highlight"><span></span>mkdir<span class="w"> </span>SupportFiles
touch<span class="w"> </span>SupportFiles/Info.plist
</div></code></pre><p>And add the following content:</p><pre><code><div class="highlight"><span></span><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
<span class="cp">&lt;!DOCTYPE plist PUBLIC &quot;-//Apple//DTD PLIST 1.0//EN&quot; &quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;&gt;</span>
<span class="nt">&lt;plist</span><span class="w"> </span><span class="na">version=</span><span class="s">&quot;1.0&quot;</span><span class="nt">&gt;</span>
<span class="nt">&lt;dict</span><span class="w"> </span><span class="nt">/&gt;</span>
<span class="nt">&lt;/plist&gt;</span>
</div></code></pre><p>Now you can run the app via</p><pre><code><div class="highlight"><span></span>make<span class="w"> </span>run
</div></code></pre>]]></content:encoded></item><item><guid isPermaLink="true">https://oliver-epper.de/posts/create-a-document-based-editor-with-xib-files-and-swifty-cocoa-bindings</guid><title>Create a document based editor with xib files and swifty cocoa bindings</title><description>How to create document based editor with xib files and Cocoa Bindings</description><link>https://oliver-epper.de/posts/create-a-document-based-editor-with-xib-files-and-swifty-cocoa-bindings</link><pubDate>Mon, 16 Nov 2020 09:41:00 +0100</pubDate><content:encoded><![CDATA[<p>While learning how to write really good Mac Apps I figured that I simply cannot rely on SwiftUI alone, just yet. SwiftUI is really cool but AppKit has so much to offer and SwiftUI still lacks a few bits and pieces on the Mac. If you're interested in building a document based app in SwiftUI, Gui Rambo has a nice article <a href="https://wwdcbysundell.com/2020/creating-document-based-apps-in-swiftui/">Creating document-based apps using SwiftUI</a>.</p><h2>Create the App</h2><p>While I do like to use Interface Builder sometimes I didn't want to use Storyboards, here. So let's start by creating a "Document App" and choose XIB for the interface type. If you run the app you should see something like this:</p><figure>
    <picture>
        <source srcset="/images/AppWindow-dark.png" media="(prefers-color-scheme: dark)">
        <img src="https://oliver-epper.de/images/AppWindow.png" alt="AppWindow">
    </picture>
</figure><p>We want do do things a little bit different so go ahead an delete Document.xib. Let's create two Controllers. One NSWindowController and one NSViewController that we will use to present the NSTextView.</p><h3>Create the WindowController</h3><p>So press CMD-N choose <strong>Cocoa Class</strong> and name it <code>DocumentWindowController</code>. Make it a subclass of <code>NSWindowController</code> and check <strong>Also create XIB file</strong>.</p><figure>
    <picture>
        <source srcset="/images/Create_DocumentWindowController-dark.png" media="(prefers-color-scheme: dark)">
        <img src="https://oliver-epper.de/images/Create_DocumentWindowController.png" alt="Create DocumentWindowController">
    </picture>
</figure><p>Rename the DocumentWindowController.xib to Document.xib.</p><h3>Create the ViewController</h3><p>Press CMD-N choose <strong>Cocoa Class</strong> and name it <code>EditorViewController</code>. Make it a subclass of <code>NSViewController</code> and check <strong>Also create XIB file</strong>.</p><figure>
    <picture>
        <source srcset="/images/Create_EditorViewController-dark.png" media="(prefers-color-scheme: dark)">
        <img src="https://oliver-epper.de/images/Create_EditorViewController.png" alt="Create EditorViewController">
    </picture>
</figure><h3>Create the model</h3><p>Create a new file Content.swift with the following content:</p><pre><code><div class="highlight"><span></span><span class="kd">import</span> <span class="nc">Foundation</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Content</span><span class="p">:</span> <span class="bp">NSObject</span> <span class="p">{</span>
    <span class="kr">@objc</span> <span class="kr">dynamic</span> <span class="kd">var</span> <span class="nv">contentString</span><span class="p">:</span> <span class="nb">String</span>

    <span class="kd">public</span> <span class="kd">init</span><span class="p">(</span><span class="n">contentString</span><span class="p">:</span> <span class="nb">String</span><span class="p">)</span> <span class="p">{</span>
        <span class="kc">self</span><span class="p">.</span><span class="n">contentString</span> <span class="p">=</span> <span class="n">contentString</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">extension</span> <span class="nc">Content</span> <span class="p">{</span>
    <span class="kd">func</span> <span class="nf">read</span><span class="p">(</span><span class="n">from</span> <span class="n">data</span><span class="p">:</span> <span class="n">Data</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">contentString</span> <span class="p">=</span> <span class="nb">String</span><span class="p">(</span><span class="n">bytes</span><span class="p">:</span> <span class="n">data</span><span class="p">,</span> <span class="n">encoding</span><span class="p">:</span> <span class="p">.</span><span class="n">utf8</span><span class="p">)</span> <span class="p">??</span> <span class="s">&quot;&quot;</span>
    <span class="p">}</span>

    <span class="kd">func</span> <span class="nf">data</span><span class="p">()</span> <span class="p">-&gt;</span> <span class="n">Data</span><span class="p">?</span> <span class="p">{</span>
        <span class="n">contentString</span><span class="p">.</span><span class="n">data</span><span class="p">(</span><span class="n">using</span><span class="p">:</span> <span class="p">.</span><span class="n">utf8</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</div></code></pre><p>Since we want to use Cocoa Bindings the <code>contentString</code> variable needs to be accessible from the Objective-C runtime. <code>@objc</code> makes the var available to Objective-C and <code>dynamic</code> chooses dynamic dispatch instead of static dispatch.</p><h3>Edit the Document class</h3><p>Every Document needs its own NSWindowController. Remember how we deleted the original Document.xib that came with the template? Since we renamed the xib that came with our DocumentWindowController to Document.xib we can still start the app. But our DocumentWindowController will not be loaded.</p><p>To prove: Set a breakpoint to <code>windowDidLoad</code> in DocumentWindowController.</p><p>So although the "File's Owner" propety of our renamed Document.xib still points to our controller, that does not mean that the controller gets loaded. That's not how this works. Even if you would rename the xib back to its original name and change the var <code>windowNibName</code> in <code>Document</code> to return the right name the breakpoint would still not be hit.</p><p>Let's change that: First delete the override of the var <code>windowNibName</code> from the <code>Document</code>. Now let's override the function <code>makeWindowControllers</code>:</p><pre><code><div class="highlight"><span></span><span class="kr">override</span> <span class="kd">func</span> <span class="nf">makeWindowControllers</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">let</span> <span class="nv">windowController</span> <span class="p">=</span> <span class="n">DocumentWindowController</span><span class="p">(</span><span class="n">windowNibName</span><span class="p">:</span> <span class="s">&quot;Document&quot;</span><span class="p">)</span>
    <span class="n">addWindowController</span><span class="p">(</span><span class="n">windowController</span><span class="p">)</span>
<span class="p">}</span>
</div></code></pre><p>If you build and run again you will now hit the breakpoint.</p><h4>Hook up the EditorViewController</h4><p>Add another line to the funtion <code>makeWindowControllers</code>:</p><pre><code><div class="highlight"><span></span><span class="n">windowController</span><span class="p">.</span><span class="n">contentViewController</span> <span class="p">=</span> <span class="n">EditorViewController</span><span class="p">()</span>
</div></code></pre><p>You don't need to specify the nibName here, if it equals the NSViewControllers name. Want proove again? Drop a "Hello World" label in the EditorViewController.xib and restart the app. 😀</p><p>Before we continue to create the UI let's finish the work on the Document class.</p><p>Add a memeber that will hold the model:</p><pre><code><div class="highlight"><span></span><span class="kr">@objc</span> <span class="kd">var</span> <span class="nv">content</span> <span class="p">=</span> <span class="n">Content</span><span class="p">(</span><span class="n">contentString</span><span class="p">:</span> <span class="s">&quot;&quot;</span><span class="p">)</span>
</div></code></pre><p>Set the model as the ViewControllers representedObject. So change <code>makeWindowControllers</code> to this:</p><pre><code><div class="highlight"><span></span><span class="kr">override</span> <span class="kd">func</span> <span class="nf">makeWindowControllers</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">let</span> <span class="nv">windowController</span> <span class="p">=</span> <span class="n">DocumentWindowController</span><span class="p">(</span><span class="n">windowNibName</span><span class="p">:</span> <span class="s">&quot;Document&quot;</span><span class="p">)</span>
    <span class="n">addWindowController</span><span class="p">(</span><span class="n">windowController</span><span class="p">)</span>
    <span class="kd">let</span> <span class="nv">editorViewController</span> <span class="p">=</span> <span class="n">EditorViewController</span><span class="p">()</span>
    <span class="n">editorViewController</span><span class="p">.</span><span class="n">representedObject</span> <span class="p">=</span> <span class="n">content</span>
    <span class="n">windowController</span><span class="p">.</span><span class="n">contentViewController</span> <span class="p">=</span> <span class="n">editorViewController</span>
<span class="p">}</span>
</div></code></pre><p>Last replace the body of the <code>data() -&gt; Data</code> function with</p><pre><code><div class="highlight"><span></span><span class="k">return</span> <span class="n">content</span><span class="p">.</span><span class="n">data</span><span class="p">()</span> <span class="p">??</span> <span class="n">Data</span><span class="p">()</span>
</div></code></pre><p>and the body of the <code>read()</code> function with:</p><pre><code><div class="highlight"><span></span><span class="n">content</span><span class="p">.</span><span class="n">read</span><span class="p">(</span><span class="n">from</span><span class="p">:</span> <span class="n">data</span><span class="p">)</span>
</div></code></pre><p>That's it for the <code>Document</code> class.</p><h2>Wire up the EditorViewController</h2><p>Delete the label (if you added it) from the nib and replace it with a NSTextView that you constrain to all for edges. In the Bindings Inspector select value and bind it to: "File's Owner" use <code>self.representedObject.contentString</code> as the "Model Key Path" and check "Continuously Update value". If you want you can add a <code>didSet</code> to the contentString var in <code>Content</code> to see it updates like this:</p><pre><code><div class="highlight"><span></span><span class="kr">@objc</span> <span class="kr">dynamic</span> <span class="kd">var</span> <span class="nv">contentString</span><span class="p">:</span> <span class="nb">String</span> <span class="p">{</span>
    <span class="kr">didSet</span> <span class="p">{</span>
        <span class="bp">print</span><span class="p">(</span><span class="n">contentString</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</div></code></pre><p>If you build and run now you'll see what you enter in the TextView beeing printed to the console.</p><p>Let's try saving. Cool! What about opening a document? Restart the app and try opening the file. Works too. How neat :-D</p><h2>More Swifty Bindings</h2><p>Go ahead and delete the binding from the connections inspector. Thanks to Lucas Derraugh's fantastic youtube series about <a href="https://www.youtube.com/channel/UCDg-YmnNehm3KB0BpytkUJg">Apple Programming</a> I learned about a much nicer and swiftier way.</p><p>Create an outlet to the <code>NSTextView</code> in the <code>EditorViewController</code> and add the following line to <code>viewDidLoad()</code>:</p><pre><code><div class="highlight"><span></span><span class="n">textView</span><span class="p">.</span><span class="n">bind</span><span class="p">(.</span><span class="n">value</span><span class="p">,</span> <span class="n">to</span><span class="p">:</span> <span class="n">representedObject</span><span class="p">!,</span> <span class="n">withKeyPath</span><span class="p">:</span> <span class="s">&quot;contentString&quot;</span><span class="p">,</span> <span class="n">options</span><span class="p">:</span> <span class="p">[</span><span class="n">NSBindingOption</span><span class="p">.</span><span class="n">continuouslyUpdatesValue</span><span class="p">:</span> <span class="kc">true</span><span class="p">])</span>
</div></code></pre><p>We're immediately back in business. Value is still bound to <code>contentString</code> and through the options dictionary we still tell the <code>NSTextView</code> to send updates continuously. But Lucas had another cool idea:</p><p>Create the following extentions on <code>NSObject</code>:</p><pre><code><div class="highlight"><span></span><span class="kd">extension</span> <span class="bp">NSObject</span> <span class="p">{</span>
    <span class="kd">func</span> <span class="nf">bind</span><span class="p">&lt;</span><span class="n">Root</span><span class="p">,</span> <span class="n">Value</span><span class="p">&gt;(</span><span class="kc">_</span> <span class="n">binding</span><span class="p">:</span> <span class="n">NSBindingName</span><span class="p">,</span> <span class="n">to</span> <span class="n">observable</span><span class="p">:</span> <span class="n">Root</span><span class="p">,</span> <span class="n">keyPath</span><span class="p">:</span> <span class="n">KeyPath</span><span class="p">&lt;</span><span class="n">Root</span><span class="p">,</span> <span class="n">Value</span><span class="p">&gt;,</span> <span class="n">options</span><span class="p">:</span> <span class="p">[</span><span class="n">NSBindingOption</span><span class="p">:</span> <span class="nb">Any</span><span class="p">]?</span> <span class="p">=</span> <span class="kc">nil</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">guard</span> <span class="kd">let</span> <span class="nv">kvcKeyPath</span> <span class="p">=</span> <span class="n">keyPath</span><span class="p">.</span><span class="n">_kvcKeyPathString</span> <span class="k">else</span> <span class="p">{</span>
            <span class="bp">print</span><span class="p">(</span><span class="s">&quot;KeyPath does not contain @objc exposed values&quot;</span><span class="p">)</span>
            <span class="k">return</span>
        <span class="p">}</span>
        <span class="n">bind</span><span class="p">(</span><span class="n">binding</span><span class="p">,</span> <span class="n">to</span><span class="p">:</span> <span class="n">observable</span><span class="p">,</span> <span class="n">withKeyPath</span><span class="p">:</span> <span class="n">kvcKeyPath</span><span class="p">,</span> <span class="n">options</span><span class="p">:</span> <span class="n">options</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</div></code></pre><p>With that in place we can get rid of the <em>stringly</em> typed keyPath on the call side and use a Swift KeyPath:</p><pre><code><div class="highlight"><span></span> <span class="k">if</span> <span class="kd">let</span> <span class="nv">content</span> <span class="p">=</span> <span class="n">representedObject</span> <span class="k">as</span><span class="p">?</span> <span class="n">Content</span> <span class="p">{</span>
            <span class="n">textView</span><span class="p">.</span><span class="n">bind</span><span class="p">(.</span><span class="n">value</span><span class="p">,</span> <span class="n">to</span><span class="p">:</span> <span class="n">content</span><span class="p">,</span> <span class="n">keyPath</span><span class="p">:</span> <span class="err">\</span><span class="p">.</span><span class="n">contentString</span><span class="p">,</span> <span class="n">options</span><span class="p">:</span> <span class="p">[</span><span class="n">NSBindingOption</span><span class="p">.</span><span class="n">continuouslyUpdatesValue</span><span class="p">:</span> <span class="kc">true</span><span class="p">])</span>
        <span class="p">}</span>
</div></code></pre><p>That's much better 💪</p><p>Are you interested in doing the above completely in code? Or use Combine to bind to the model? Let's chat.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://oliver-epper.de/posts/save-metrickit-payload-into-a-postgres-jsonb-column-with-vapor</guid><title>MetricKit and Vapor</title><description>Save MetricKit payload into a postgres jsonb column with vapor</description><link>https://oliver-epper.de/posts/save-metrickit-payload-into-a-postgres-jsonb-column-with-vapor</link><pubDate>Thu, 9 Jul 2020 09:41:00 +0200</pubDate><content:encoded><![CDATA[<p>I recently learned about MetricKit from Apple and I thought this would be a good fit to learn something about my iOS code in the wild.</p><p>Using MetricKit could not be easier. After you conformed to <code>MXMetricManagerSubscriber</code> you can add yourself to the <code>MXMetricManager</code></p><pre><code><div class="highlight"><span></span><span class="bp">MXMetricManager</span><span class="p">.</span><span class="n">shared</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="kc">self</span><span class="p">)</span>
</div></code></pre><p>The most obvious place would be the AppDelegate's <code>didFinishLaunchingWithOptions</code> function. You can use <code>applicationWillTerminate</code> to remove yourself from the MXMetricManager</p><pre><code><div class="highlight"><span></span><span class="bp">MXMetricManager</span><span class="p">.</span><span class="n">shared</span><span class="p">.</span><span class="n">remove</span><span class="p">(</span><span class="kc">self</span><span class="p">)</span>
</div></code></pre><p>The only thing that's left is implementing the delegate method:</p><pre><code><div class="highlight"><span></span><span class="kd">extension</span> <span class="nc">AppDelegate</span><span class="p">:</span> <span class="bp">MXMetricManagerSubscriber</span> <span class="p">{</span>
    <span class="kd">func</span> <span class="nf">didReceive</span><span class="p">(</span><span class="kc">_</span> <span class="n">payloads</span><span class="p">:</span> <span class="p">[</span><span class="bp">MXMetricPayload</span><span class="p">])</span> <span class="p">{</span>
        <span class="k">for</span> <span class="n">payload</span> <span class="k">in</span> <span class="n">payloads</span> <span class="p">{</span>
            <span class="kd">let</span> <span class="nv">url</span> <span class="p">=</span> <span class="n">URL</span><span class="p">(</span><span class="n">string</span><span class="p">:</span> <span class="s">&quot;https://your.vapor.server/collect&quot;</span><span class="p">)</span><span class="o">!</span>

            <span class="kd">var</span> <span class="nv">request</span> <span class="p">=</span> <span class="n">URLRequest</span><span class="p">(</span><span class="n">url</span><span class="p">:</span> <span class="n">url</span><span class="p">)</span>
            <span class="n">request</span><span class="p">.</span><span class="n">httpMethod</span> <span class="p">=</span> <span class="s">&quot;POST&quot;</span>
            <span class="n">request</span><span class="p">.</span><span class="n">httpBody</span> <span class="p">=</span> <span class="n">payload</span><span class="p">.</span><span class="n">jsonRepresentation</span><span class="p">()</span>

            <span class="kd">let</span> <span class="nv">task</span> <span class="p">=</span> <span class="n">URLSession</span><span class="p">.</span><span class="n">shared</span><span class="p">.</span><span class="n">dataTask</span><span class="p">(</span><span class="n">with</span><span class="p">:</span> <span class="n">request</span><span class="p">)</span>
            <span class="n">task</span><span class="p">.</span><span class="n">resume</span><span class="p">()</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</div></code></pre><p>All this and more is nicely documented on <a href="https://nshipster.com/metrickit/">NSHipster – MetricKit</a>.</p><h2>Vapor</h2><p>So in Vapor we need a <code>/collect</code>-route that takes the payload. The easiest solution would be to build a struct that takes some (or all) of the information from the payload, but I wanted to do the same thing Matt did (in Ruby or JS) and just save the payload in a jsonb-column.</p><p>With the help of the really great people in the Vapor-Discord (namely: TypeBeta) I was able to achieve what I wanted with the following model-class</p><pre><code><div class="highlight"><span></span><span class="kd">import</span> <span class="nc">Vapor</span>
<span class="kd">import</span> <span class="nc">Fluent</span>
<span class="kd">import</span> <span class="nc">PostgresNIO</span>

<span class="kd">struct</span> <span class="nc">JsonWrapper</span><span class="p">:</span> <span class="n">Codable</span><span class="p">,</span> <span class="n">PostgresDataConvertible</span> <span class="p">{</span>
    <span class="kd">let</span> <span class="nv">payload</span><span class="p">:</span> <span class="nb">String</span>

    <span class="kd">static</span> <span class="kd">var</span> <span class="nv">postgresDataType</span><span class="p">:</span> <span class="n">PostgresDataType</span> <span class="p">{</span>
        <span class="p">.</span><span class="n">jsonb</span>
    <span class="p">}</span>

    <span class="kd">init</span><span class="p">(</span><span class="kc">_</span> <span class="n">payload</span><span class="p">:</span> <span class="nb">String</span><span class="p">)</span> <span class="p">{</span>
        <span class="kc">self</span><span class="p">.</span><span class="n">payload</span> <span class="p">=</span> <span class="n">payload</span>
    <span class="p">}</span>

    <span class="kd">init</span><span class="p">(</span><span class="n">from</span> <span class="n">decoder</span><span class="p">:</span> <span class="n">Decoder</span><span class="p">)</span> <span class="kr">throws</span> <span class="p">{</span>
        <span class="kc">self</span><span class="p">.</span><span class="n">payload</span> <span class="p">=</span> <span class="k">try</span> <span class="nb">String</span><span class="p">.</span><span class="kd">init</span><span class="p">(</span><span class="n">from</span><span class="p">:</span> <span class="n">decoder</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="kd">func</span> <span class="nf">encode</span><span class="p">(</span><span class="n">to</span> <span class="n">encoder</span><span class="p">:</span> <span class="n">Encoder</span><span class="p">)</span> <span class="kr">throws</span> <span class="p">{</span>
        <span class="k">try</span> <span class="n">payload</span><span class="p">.</span><span class="n">encode</span><span class="p">(</span><span class="n">to</span><span class="p">:</span> <span class="n">encoder</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="kd">init</span><span class="p">?(</span><span class="n">postgresData</span><span class="p">:</span> <span class="n">PostgresData</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">guard</span> <span class="kd">let</span> <span class="nv">data</span> <span class="p">=</span> <span class="n">postgresData</span><span class="p">.</span><span class="n">jsonb</span> <span class="k">else</span> <span class="p">{</span> <span class="k">return</span> <span class="kc">nil</span> <span class="p">}</span>
        <span class="k">guard</span> <span class="kd">let</span> <span class="nv">payload</span> <span class="p">=</span> <span class="nb">String</span><span class="p">(</span><span class="n">data</span><span class="p">:</span> <span class="n">data</span><span class="p">,</span> <span class="n">encoding</span><span class="p">:</span> <span class="p">.</span><span class="n">utf8</span><span class="p">)</span> <span class="k">else</span> <span class="p">{</span> <span class="k">return</span> <span class="kc">nil</span> <span class="p">}</span>
        <span class="kc">self</span><span class="p">.</span><span class="kd">init</span><span class="p">(</span><span class="n">payload</span><span class="p">)</span>
    <span class="p">}</span>
    
    <span class="kd">var</span> <span class="nv">postgresData</span><span class="p">:</span> <span class="n">PostgresData</span><span class="p">?</span> <span class="p">{</span>
        <span class="k">guard</span> <span class="kd">let</span> <span class="nv">jsonString</span> <span class="p">=</span> <span class="kc">self</span><span class="p">.</span><span class="n">payload</span><span class="p">.</span><span class="n">data</span><span class="p">(</span><span class="n">using</span><span class="p">:</span> <span class="p">.</span><span class="n">utf8</span><span class="p">)</span> <span class="k">else</span> <span class="p">{</span> <span class="k">return</span> <span class="kc">nil</span> <span class="p">}</span>
        <span class="k">return</span> <span class="p">.</span><span class="kd">init</span><span class="p">(</span><span class="n">jsonb</span><span class="p">:</span> <span class="n">jsonString</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kr">final</span> <span class="kd">class</span> <span class="nc">Metric</span><span class="p">:</span> <span class="n">Model</span><span class="p">,</span> <span class="n">Content</span> <span class="p">{</span>
    <span class="kd">static</span> <span class="kd">let</span> <span class="nv">schema</span> <span class="p">=</span> <span class="s">&quot;metrics&quot;</span>

    <span class="p">@</span><span class="n">ID</span><span class="p">(</span><span class="n">key</span><span class="p">:</span> <span class="p">.</span><span class="n">id</span><span class="p">)</span>
    <span class="kd">var</span> <span class="nv">id</span><span class="p">:</span> <span class="n">UUID</span><span class="p">?</span>
    
    <span class="p">@</span><span class="n">Field</span><span class="p">(</span><span class="n">key</span><span class="p">:</span> <span class="s">&quot;payload&quot;</span><span class="p">)</span>
    <span class="kd">var</span> <span class="nv">payload</span><span class="p">:</span> <span class="n">JsonWrapper</span>

    <span class="kd">init</span><span class="p">()</span> <span class="p">{</span> <span class="p">}</span>

    <span class="kd">init</span><span class="p">(</span><span class="n">id</span><span class="p">:</span> <span class="n">UUID</span><span class="p">?</span> <span class="p">=</span> <span class="kc">nil</span><span class="p">,</span> <span class="n">payload</span><span class="p">:</span> <span class="n">JsonWrapper</span><span class="p">)</span> <span class="p">{</span>
        <span class="kc">self</span><span class="p">.</span><span class="n">id</span> <span class="p">=</span> <span class="n">id</span>
        <span class="kc">self</span><span class="p">.</span><span class="n">payload</span> <span class="p">=</span> <span class="n">payload</span>
    <span class="p">}</span>
<span class="p">}</span>
</div></code></pre><p>In the <code>Metric</code>-class the member payload is of type <code>JsonWrapper</code>. This type tells postgres how to get the wrapped payload into postgres (<code>var postgresData</code>) and how to initialise the payload from the data that is saved in postgres (<code>init?(postgresData: PostgresData)</code>). The PostgresData-initializer (<code>.init(jsonb: jsonString)</code>) tells the type that it should treat <code>jsonString</code> as json.</p><p>Now the controller becomes a piece of cake 😎</p><pre><code><div class="highlight"><span></span><span class="kd">struct</span> <span class="nc">MetricController</span><span class="p">:</span> <span class="n">RouteCollection</span> <span class="p">{</span>
    <span class="kd">func</span> <span class="nf">boot</span><span class="p">(</span><span class="n">routes</span><span class="p">:</span> <span class="n">RoutesBuilder</span><span class="p">)</span> <span class="kr">throws</span> <span class="p">{</span>
        <span class="kd">let</span> <span class="nv">collect</span> <span class="p">=</span> <span class="n">routes</span><span class="p">.</span><span class="n">grouped</span><span class="p">(</span><span class="s">&quot;collect&quot;</span><span class="p">)</span>
        <span class="n">collect</span><span class="p">.</span><span class="n">post</span><span class="p">(</span><span class="n">use</span><span class="p">:</span> <span class="n">create</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="kd">func</span> <span class="nf">create</span><span class="p">(</span><span class="n">req</span><span class="p">:</span> <span class="n">Request</span><span class="p">)</span> <span class="kr">throws</span> <span class="p">-&gt;</span> <span class="n">EventLoopFuture</span><span class="p">&lt;</span><span class="n">HTTPStatus</span><span class="p">&gt;</span> <span class="p">{</span>
        <span class="kd">let</span> <span class="nv">metric</span> <span class="p">=</span> <span class="n">Metric</span><span class="p">()</span>
        <span class="kd">let</span> <span class="nv">payload_string</span> <span class="p">=</span> <span class="k">try</span> <span class="n">req</span><span class="p">.</span><span class="n">content</span><span class="p">.</span><span class="n">decode</span><span class="p">(</span><span class="nb">String</span><span class="p">.</span><span class="kc">self</span><span class="p">)</span>
        <span class="n">metric</span><span class="p">.</span><span class="n">payload</span> <span class="p">=</span> <span class="n">JsonWrapper</span><span class="p">(</span><span class="n">payload_string</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">metric</span><span class="p">.</span><span class="n">save</span><span class="p">(</span><span class="n">on</span><span class="p">:</span> <span class="n">req</span><span class="p">.</span><span class="n">db</span><span class="p">).</span><span class="n">transform</span><span class="p">(</span><span class="n">to</span><span class="p">:</span> <span class="n">HTTPStatus</span><span class="p">.</span><span class="n">noContent</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</div></code></pre><h2>Heads up</h2><p>Simulating MetricKit payload is only enabled on a real device. So you need to run your iOS code on a real device. Once you have data in the database you can query "into" your payload like this:</p><pre><code><div class="highlight"><span></span><span class="k">select</span><span class="w"> </span><span class="n">payload</span><span class="o">-&gt;</span><span class="s1">&#39;appVersion&#39;</span><span class="w"> </span><span class="k">from</span><span class="w"> </span><span class="n">metrics</span><span class="p">;</span>
</div></code></pre><p>Or how about building a view:</p><pre><code><div class="highlight"><span></span><span class="k">CREATE</span><span class="w"> </span><span class="k">VIEW</span><span class="w"> </span><span class="n">app_versions</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="k">SELECT</span><span class="w"> </span><span class="n">id</span><span class="p">,</span><span class="n">payload</span><span class="o">-&gt;</span><span class="s1">&#39;appVersion&#39;</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">app_version</span><span class="p">,</span><span class="n">payload</span><span class="o">-&gt;</span><span class="s1">&#39;metaData&#39;</span><span class="o">-&gt;&gt;</span><span class="s1">&#39;deviceType&#39;</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">device_type</span><span class="w"> </span><span class="k">FROM</span><span class="w"> </span><span class="n">metrics</span><span class="p">;</span>
</div></code></pre><p>Now you can do something like this:</p><pre><code><div class="highlight"><span></span><span class="k">select</span><span class="w"> </span><span class="k">distinct</span><span class="p">(</span><span class="n">app_version</span><span class="p">)</span><span class="w"> </span><span class="k">from</span><span class="w"> </span><span class="n">app_versions</span><span class="p">;</span>
</div></code></pre><h2>Question</h2><p>This is completely unrelated, but: Is it a good idea to have UUID as primary keys? Does this have any performance implications?</p>]]></content:encoded></item><item><guid isPermaLink="true">https://oliver-epper.de/posts/automatically-stamp-an-object-with-a-unique-pin</guid><title>Automatically stamp an object with a unique pin</title><description>Stamp an object with an unique pin before saving into the database</description><link>https://oliver-epper.de/posts/automatically-stamp-an-object-with-a-unique-pin</link><pubDate>Wed, 17 Jun 2020 09:41:00 +0200</pubDate><content:encoded><![CDATA[<p>I recently started using Vapor and I love it! Using Swift on the server is sweet and Vapor has a really nice API. I wanted to do a "simple" thing that turned out to be harder than I initially thought it would be but Swift and Vapor made it actually fun to strive for a nice solution.</p><h2>What I wanted to do</h2><p>Imagine that you want to store something away but first put a little sticker on it. You have a box full of things to store, a sheet of stickers and the cabinet where you want to put the things. So:</p><pre><code><div class="highlight"><span></span><span class="n">take_a_thing</span>
<span class="n">take_a_sticker</span>
<span class="n">put_sticker_on_thing</span>
<span class="n">put_thing_in_cabinet</span>
</div></code></pre><p>Easy, isn't it?</p><p>The <code>take_a_sticker</code> part can be tricky. What if you have someone that helps you and you both grab the same sticker? Clearly you want to SELECT and DELETE the sticker (from a database) in an atomic operation.</p><h2>How to implement the ModelMiddleware?</h2><p>With Vapor you can register a <code>ModelMiddleware</code> that you can use to provide lifecycle functions for your model. Let's say you want to hook into the create process:</p><pre><code><div class="highlight"><span></span><span class="kd">struct</span> <span class="nc">ThingMiddleware</span><span class="p">:</span> <span class="n">ModelMiddleware</span> <span class="p">{</span>
    <span class="kd">func</span> <span class="nf">create</span><span class="p">(</span><span class="n">model</span><span class="p">:</span> <span class="n">Thing</span><span class="p">,</span> <span class="n">on</span> <span class="n">db</span><span class="p">:</span> <span class="n">Database</span><span class="p">,</span> <span class="n">next</span><span class="p">:</span> <span class="n">AnyModelResponder</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="n">EventLoopFuture</span><span class="p">&lt;</span><span class="nb">Void</span><span class="p">&gt;</span> <span class="p">{</span>
        <span class="bp">print</span><span class="p">(</span><span class="s">&quot;This will happen before the create&quot;</span><span class="p">)</span>
        <span class="n">next</span><span class="p">.</span><span class="n">create</span><span class="p">(</span><span class="n">model</span><span class="p">,</span> <span class="n">on</span><span class="p">:</span> <span class="n">db</span><span class="p">).</span><span class="bp">map</span> <span class="p">{</span>
            <span class="bp">print</span><span class="p">(</span><span class="s">&quot;This will happen after the create&quot;</span><span class="p">)</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</div></code></pre><p>Isn't it cool how Swift infers the type for the ThingMiddleware through the create functions model parameter? It doesn't require you to write:</p><pre><code><div class="highlight"><span></span><span class="kd">struct</span> <span class="nc">ThingMiddleware</span><span class="p">:</span> <span class="n">ModelMiddleware</span> <span class="p">{</span>
    <span class="kd">typealias</span> <span class="n">model</span> <span class="p">=</span> <span class="n">Thing</span>

    <span class="kd">func</span> <span class="nf">create</span><span class="p">(</span><span class="n">model</span><span class="p">:</span> <span class="n">Model</span><span class="p">,</span> <span class="n">on</span> <span class="n">db</span><span class="p">:</span> <span class="n">Database</span><span class="p">,</span> <span class="n">next</span><span class="p">:</span> <span class="n">AnyModelResponder</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="n">EventLoopFuture</span><span class="p">&lt;</span><span class="nb">Void</span><span class="p">&gt;</span> <span class="p">{</span>
        <span class="c1">// ...</span>
    <span class="p">}</span>
<span class="p">}</span>
</div></code></pre><p>So we're handling with Futures here.</p><p>Let's try to express the pseudocode from above. What about this:</p><pre><code><div class="highlight"><span></span><span class="c1">// ATTENTION: THIS DOES NOT WORK!</span>
<span class="kd">struct</span> <span class="nc">PinErrror</span><span class="p">:</span> <span class="n">Error</span> <span class="p">{</span> <span class="p">}</span>

<span class="kd">struct</span> <span class="nc">ClientConfigMiddleware</span><span class="p">:</span> <span class="n">ModelMiddleware</span> <span class="p">{</span>
    <span class="kd">func</span> <span class="nf">create</span><span class="p">(</span><span class="n">model</span><span class="p">:</span> <span class="n">ClientConfig</span><span class="p">,</span> <span class="n">on</span> <span class="n">db</span><span class="p">:</span> <span class="n">Database</span><span class="p">,</span> <span class="n">next</span><span class="p">:</span> <span class="n">AnyModelResponder</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="n">EventLoopFuture</span><span class="p">&lt;</span><span class="nb">Void</span><span class="p">&gt;</span> <span class="p">{</span>
        <span class="k">return</span> <span class="kc">self</span><span class="p">.</span><span class="n">getPin</span><span class="p">(</span><span class="n">from</span><span class="p">:</span> <span class="n">db</span><span class="p">).</span><span class="n">flatMap</span> <span class="p">{</span> <span class="n">pin</span> <span class="k">in</span>
            <span class="n">model</span><span class="p">.</span><span class="n">pin</span> <span class="p">=</span> <span class="n">pin</span>
            <span class="k">return</span> <span class="n">next</span><span class="p">.</span><span class="n">create</span><span class="p">(</span><span class="n">model</span><span class="p">,</span> <span class="n">on</span><span class="p">:</span> <span class="n">db</span><span class="p">)</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="kd">private</span> <span class="kd">func</span> <span class="nf">getPin</span><span class="p">(</span><span class="n">from</span> <span class="n">db</span><span class="p">:</span> <span class="n">Database</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="n">EventLoopFuture</span><span class="p">&lt;</span><span class="nb">Int</span><span class="p">&gt;</span> <span class="p">{</span>
        <span class="k">guard</span> <span class="kd">let</span> <span class="nv">sql</span> <span class="p">=</span> <span class="n">db</span> <span class="k">as</span><span class="p">?</span> <span class="n">SQLDatabase</span> <span class="k">else</span> <span class="p">{</span>
            <span class="bp">fatalError</span><span class="p">()</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="n">sql</span><span class="p">.</span><span class="n">raw</span><span class="p">(</span><span class="s">&quot;SELECT * FROM pins LIMIT 1&quot;</span><span class="p">).</span><span class="bp">first</span><span class="p">().</span><span class="n">flatMapThrowing</span> <span class="p">{</span> <span class="n">row</span> <span class="k">in</span>
            <span class="k">if</span> <span class="kd">let</span> <span class="nv">pin</span> <span class="p">=</span> <span class="k">try</span><span class="p">?</span> <span class="n">row</span><span class="p">?.</span><span class="n">decode</span><span class="p">(</span><span class="n">column</span><span class="p">:</span> <span class="s">&quot;pin&quot;</span><span class="p">,</span> <span class="k">as</span><span class="p">:</span> <span class="nb">Int</span><span class="p">.</span><span class="kc">self</span><span class="p">)</span> <span class="p">{</span>
                <span class="kc">_</span> <span class="p">=</span> <span class="n">sql</span><span class="p">.</span><span class="n">raw</span><span class="p">(</span><span class="s">&quot;DELETE FROM pins WHERE pin=&#39;</span><span class="si">\(</span><span class="nb">String</span><span class="si">(</span><span class="n">pin</span><span class="si">))</span><span class="s">&#39;&quot;</span><span class="p">).</span><span class="n">run</span><span class="p">()</span>
                <span class="k">return</span> <span class="n">pin</span>
            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                <span class="k">throw</span> <span class="n">PinErrror</span><span class="p">()</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</div></code></pre><p>The logic basically says:</p><pre><code><div class="highlight"><span></span><span class="n">create</span><span class="p">:</span>
	<span class="k">return</span> <span class="n">getNextSticker</span><span class="p">.</span><span class="n">if_ok</span>
		<span class="n">put_sticker_on_model</span>
		<span class="n">save_model</span>

<span class="n">getNextSticker</span><span class="p">:</span>
	<span class="k">return</span> <span class="kr">get</span> <span class="n">sticker_from_db</span><span class="p">.</span><span class="n">if_ok</span>
		<span class="n">delete_sticker_from_db</span><span class="p">.</span><span class="n">if_ok</span>
			<span class="k">return</span> <span class="n">sticker</span>
</div></code></pre><p>That should do it, right?</p><p>Well not quite. With a blocking database driver I guess that would work but what happens in Vapor is that if you create a bunch of model objects they all get the same sticker!</p><p>We need something a bit more clever. After doing a bit of research and asking around the people in the Vapor Discord Tanner the inventor of Vapor pointed me to a post on Stackoverflow that had a great idea for situation that was quite similar:</p><h2>Why not call dibs on the row, first?</h2><p>What if the code wouldn't just select (and then delete) the first entry, but mark it with something if it is not marked, yet. For example the current thread-id, a timestamp, or a uuid? Then the code can select that very entry while everyone else can continue with their own marked entries.</p><p>So here's how you can make it work in code:</p><pre><code><div class="highlight"><span></span><span class="kd">struct</span> <span class="nc">PinError</span><span class="p">:</span> <span class="n">Error</span> <span class="p">{</span> <span class="p">}</span>

<span class="kd">struct</span> <span class="nc">ClientConfigMiddleware</span><span class="p">:</span> <span class="n">ModelMiddleware</span> <span class="p">{</span>
    <span class="kd">func</span> <span class="nf">create</span><span class="p">(</span><span class="n">model</span><span class="p">:</span> <span class="n">ClientConfig</span><span class="p">,</span> <span class="n">on</span> <span class="n">db</span><span class="p">:</span> <span class="n">Database</span><span class="p">,</span> <span class="n">next</span><span class="p">:</span> <span class="n">AnyModelResponder</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="n">EventLoopFuture</span><span class="p">&lt;</span><span class="nb">Void</span><span class="p">&gt;</span> <span class="p">{</span>
        <span class="k">return</span> <span class="kc">self</span><span class="p">.</span><span class="n">getNextPin</span><span class="p">(</span><span class="n">from</span><span class="p">:</span> <span class="n">db</span><span class="p">).</span><span class="n">flatMap</span> <span class="p">{</span> <span class="n">pin</span> <span class="k">in</span>
            <span class="n">model</span><span class="p">.</span><span class="n">pin</span> <span class="p">=</span> <span class="n">pin</span>
            <span class="k">return</span> <span class="n">next</span><span class="p">.</span><span class="n">create</span><span class="p">(</span><span class="n">model</span><span class="p">,</span> <span class="n">on</span><span class="p">:</span> <span class="n">db</span><span class="p">)</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="kd">private</span> <span class="kd">func</span> <span class="nf">getNextPin</span><span class="p">(</span><span class="n">from</span> <span class="n">db</span><span class="p">:</span> <span class="n">Database</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="n">EventLoopFuture</span><span class="p">&lt;</span><span class="nb">Int</span><span class="p">&gt;</span> <span class="p">{</span>
        <span class="k">guard</span> <span class="kd">let</span> <span class="nv">sql</span> <span class="p">=</span> <span class="n">db</span> <span class="k">as</span><span class="p">?</span> <span class="n">SQLDatabase</span> <span class="k">else</span> <span class="p">{</span>
            <span class="bp">fatalError</span><span class="p">()</span>
        <span class="p">}</span>
        <span class="kd">let</span> <span class="nv">selector</span> <span class="p">=</span> <span class="n">UUID</span><span class="p">()</span>
        <span class="k">return</span> <span class="n">sql</span><span class="p">.</span><span class="n">raw</span><span class="p">(</span><span class="s">&quot;UPDATE pins SET selector=&#39;</span><span class="si">\(</span><span class="n">selector</span><span class="p">.</span><span class="n">uuidString</span><span class="si">)</span><span class="s">&#39; WHERE pin = (SELECT pin FROM pins WHERE selector IS NULL LIMIT 1)&quot;</span><span class="p">).</span><span class="n">run</span><span class="p">().</span><span class="n">flatMap</span> <span class="p">{</span>
            <span class="k">return</span> <span class="n">sql</span><span class="p">.</span><span class="n">raw</span><span class="p">(</span><span class="s">&quot;SELECT pin FROM pins WHERE selector=&#39;</span><span class="si">\(</span><span class="n">selector</span><span class="p">.</span><span class="n">uuidString</span><span class="si">)</span><span class="s">&#39;&quot;</span><span class="p">).</span><span class="bp">first</span><span class="p">().</span><span class="n">flatMapThrowing</span> <span class="p">{</span> <span class="n">row</span> <span class="k">in</span>
                <span class="k">if</span> <span class="kd">let</span> <span class="nv">pin</span> <span class="p">=</span> <span class="k">try</span><span class="p">?</span> <span class="n">row</span><span class="p">?.</span><span class="n">decode</span><span class="p">(</span><span class="n">column</span><span class="p">:</span> <span class="s">&quot;pin&quot;</span><span class="p">,</span> <span class="k">as</span><span class="p">:</span> <span class="nb">Int</span><span class="p">.</span><span class="kc">self</span><span class="p">)</span> <span class="p">{</span>
                    <span class="k">return</span> <span class="n">pin</span>
                <span class="p">}</span>
                <span class="k">throw</span> <span class="n">PinError</span><span class="p">()</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</div></code></pre><p>So now we have:</p><pre><code><div class="highlight"><span></span><span class="n">create</span><span class="p">:</span>
	<span class="k">return</span> <span class="n">getNextSticker</span><span class="p">.</span><span class="n">if_ok</span>
		<span class="n">put_sticker_on_model</span>
		<span class="n">save_model</span>

<span class="n">getNextSticker</span><span class="p">:</span>
	<span class="k">return</span> <span class="kr">get</span> <span class="n">mark_a_sticker_that_is_not_yet_marked_with_myId</span><span class="p">.</span><span class="n">if_ok</span>
		<span class="k">return</span> <span class="n">select_the_sticker_that_is_marked_with_myId</span><span class="p">.</span><span class="n">if_ok</span>
			<span class="k">return</span> <span class="n">sticker</span>
</div></code></pre><p>The pins table is a prepopulated table that has two columns. One for the actual pin and one called selector that is prepopulated with NULL. The <code>getNextPin</code> function writes a uuid that it saves in the selector column and can then read a pin by selecting the row with the matching selector. Pretty neat, isn't it</p><h2>Update</h2><p>When I test this under heavy load (&gt; 100 creations/s) I still keep getting the same pins sometimes. While this is not a problem for my use case I am still very interested in an even better solution. When I use <code>Date().timeIntervalSince1970</code> I get the same pins less frequently but I guess that's just because the operation might be slower than getting an UUID. Any ideas welcome!</p><h2>Update 2</h2><p>Here's the fix 😎 With Postgres you can tell the database to skip an entry if it cannot attain a lock immediatley! That solves it:</p><pre><code><div class="highlight"><span></span><span class="k">UPDATE</span><span class="w"> </span><span class="n">pins</span><span class="w"> </span><span class="k">SET</span><span class="w"> </span><span class="n">selector</span><span class="o">=</span><span class="n">uuid_string</span><span class="w"> </span><span class="k">WHERE</span><span class="w"> </span><span class="n">pin</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="k">SELECT</span><span class="w"> </span><span class="n">pin</span><span class="w"> </span><span class="k">FROM</span><span class="w"> </span><span class="n">pins</span><span class="w"> </span><span class="k">WHERE</span><span class="w"> </span><span class="n">selector</span><span class="w"> </span><span class="k">IS</span><span class="w"> </span><span class="k">NULL</span><span class="w"> </span><span class="k">LIMIT</span><span class="w"> </span><span class="mi">1</span><span class="w"> </span><span class="k">FOR</span><span class="w"> </span><span class="k">UPDATE</span><span class="w"> </span><span class="n">SKIP</span><span class="w"> </span><span class="n">LOCKED</span><span class="p">)</span><span class="w"> </span><span class="n">RETURNING</span><span class="w"> </span><span class="n">pin</span><span class="p">;</span>
</div></code></pre><p>In code:</p><pre><code><div class="highlight"><span></span><span class="kd">private</span> <span class="kd">func</span> <span class="nf">getNextPin</span><span class="p">(</span><span class="n">from</span> <span class="n">db</span><span class="p">:</span> <span class="n">Database</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="n">EventLoopFuture</span><span class="p">&lt;</span><span class="nb">Int</span><span class="p">&gt;</span> <span class="p">{</span>
        <span class="k">guard</span> <span class="kd">let</span> <span class="nv">sql</span> <span class="p">=</span> <span class="n">db</span> <span class="k">as</span><span class="p">?</span> <span class="n">SQLDatabase</span> <span class="k">else</span> <span class="p">{</span>
            <span class="bp">fatalError</span><span class="p">()</span>
        <span class="p">}</span>
        <span class="kd">let</span> <span class="nv">selector</span> <span class="p">=</span> <span class="n">UUID</span><span class="p">()</span>
        <span class="k">return</span> <span class="n">sql</span><span class="p">.</span><span class="n">raw</span><span class="p">(</span><span class="s">&quot;UPDATE pins SET selector=&#39;</span><span class="si">\(</span><span class="n">selector</span><span class="p">.</span><span class="n">uuidString</span><span class="si">)</span><span class="s">&#39; WHERE pin = (SELECT pin FROM pins WHERE selector IS NULL LIMIT 1 FOR UPDATE SKIP LOCKED) RETURNING pin&quot;</span><span class="p">).</span><span class="n">run</span><span class="p">().</span><span class="n">flatMap</span> <span class="p">{</span>
            <span class="k">return</span> <span class="n">sql</span><span class="p">.</span><span class="n">raw</span><span class="p">(</span><span class="s">&quot;SELECT pin FROM pins WHERE selector=&#39;</span><span class="si">\(</span><span class="n">selector</span><span class="p">.</span><span class="n">uuidString</span><span class="si">)</span><span class="s">&#39;&quot;</span><span class="p">).</span><span class="bp">first</span><span class="p">().</span><span class="n">flatMapThrowing</span> <span class="p">{</span> <span class="n">row</span> <span class="k">in</span>
                <span class="k">if</span> <span class="kd">let</span> <span class="nv">pin</span> <span class="p">=</span> <span class="k">try</span><span class="p">?</span> <span class="n">row</span><span class="p">?.</span><span class="n">decode</span><span class="p">(</span><span class="n">column</span><span class="p">:</span> <span class="s">&quot;pin&quot;</span><span class="p">,</span> <span class="k">as</span><span class="p">:</span> <span class="nb">Int</span><span class="p">.</span><span class="kc">self</span><span class="p">)</span> <span class="p">{</span>
                    <span class="k">return</span> <span class="n">pin</span>
                <span class="p">}</span>
                <span class="k">throw</span> <span class="n">PinError</span><span class="p">()</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
</div></code></pre><p>Oh! And as an added bonus object creation under heavy load get's around 30% quicker. ⚡️</p>]]></content:encoded></item><item><guid isPermaLink="true">https://oliver-epper.de/posts/use-keychain-to-securely-save-data</guid><title>Use Keychain to securely save data</title><description>Save an item in keychain without a third party framework</description><link>https://oliver-epper.de/posts/use-keychain-to-securely-save-data</link><pubDate>Sat, 23 May 2020 09:41:00 +0200</pubDate><content:encoded><![CDATA[<p>If you need to save sensible information like a user password in an iOS app you should use Keychain instead of UserDefaults. While the UserDefaults-API is user-friendly and straight forward the Keychain-API is not. It took me a while to find some information because nearly everyone suggested to use a third-party-framework and I ended up with downloading <a href="https://github.com/jrendel/SwiftKeychainWrapper">SwiftKeyChainWrapper</a>, too.</p><p>But still I want to be able to save data into Keychain without a third-party solution. So I used the library as documentation.</p><h2>Save a string to the Keychain</h2><pre><code><div class="highlight"><span></span><span class="kd">import</span> <span class="nc">Foundation</span>

<span class="kd">struct</span> <span class="nc">KeyChain</span> <span class="p">{</span>
    <span class="kd">static</span> <span class="kd">private</span> <span class="kd">func</span> <span class="nf">getQueryDict</span><span class="p">()</span> <span class="p">-&gt;</span> <span class="p">[</span><span class="nb">String</span><span class="p">:</span><span class="nb">Any</span><span class="p">]</span> <span class="p">{</span>
        <span class="kd">var</span> <span class="nv">keyChainQueryDict</span><span class="p">:</span> <span class="p">[</span><span class="nb">String</span><span class="p">:</span><span class="nb">Any</span><span class="p">]</span> <span class="p">=</span> <span class="p">[</span><span class="n">kSecClass</span> <span class="k">as</span> <span class="nb">String</span><span class="p">:</span><span class="n">kSecClassGenericPassword</span><span class="p">]</span>
        <span class="n">keyChainQueryDict</span><span class="p">[</span><span class="n">kSecAttrService</span> <span class="k">as</span> <span class="nb">String</span><span class="p">]</span> <span class="p">=</span> <span class="s">&quot;MyService&quot;</span>
        <span class="k">return</span> <span class="n">keyChainQueryDict</span>
    <span class="p">}</span>

    <span class="kd">static</span> <span class="kd">func</span> <span class="nf">save</span><span class="p">(</span><span class="kc">_</span> <span class="n">message</span><span class="p">:</span> <span class="nb">String</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="kd">let</span> <span class="nv">data</span> <span class="p">=</span> <span class="n">message</span><span class="p">.</span><span class="n">data</span><span class="p">(</span><span class="n">using</span><span class="p">:</span> <span class="p">.</span><span class="n">utf8</span><span class="p">)</span> <span class="p">{</span>
            <span class="kd">var</span> <span class="nv">keyChainQueryDict</span> <span class="p">=</span> <span class="n">getQueryDict</span><span class="p">()</span>

            <span class="n">keyChainQueryDict</span><span class="p">[</span><span class="n">kSecValueData</span> <span class="k">as</span> <span class="nb">String</span><span class="p">]</span> <span class="p">=</span> <span class="n">data</span>
            <span class="n">keyChainQueryDict</span><span class="p">[</span><span class="n">kSecAttrAccessible</span> <span class="k">as</span> <span class="nb">String</span><span class="p">]</span> <span class="p">=</span> <span class="n">kSecAttrAccessibleWhenUnlocked</span>

            <span class="kd">let</span> <span class="nv">status</span><span class="p">:</span> <span class="n">OSStatus</span> <span class="p">=</span> <span class="n">SecItemAdd</span><span class="p">(</span><span class="n">keyChainQueryDict</span> <span class="k">as</span> <span class="n">CFDictionary</span><span class="p">,</span> <span class="kc">nil</span><span class="p">)</span>

            <span class="k">if</span> <span class="n">status</span> <span class="p">==</span> <span class="n">errSecSuccess</span> <span class="p">{</span>
                <span class="bp">print</span><span class="p">(</span><span class="s">&quot;Message saved&quot;</span><span class="p">)</span>
            <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="n">status</span> <span class="p">==</span> <span class="n">errSecDuplicateItem</span> <span class="p">{</span>
                <span class="n">update</span><span class="p">(</span><span class="n">message</span><span class="p">)</span>
            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                <span class="bp">print</span><span class="p">(</span><span class="n">SecCopyErrorMessageString</span><span class="p">(</span><span class="n">status</span><span class="p">,</span> <span class="kc">nil</span><span class="p">)</span> <span class="p">??</span> <span class="s">&quot;Unknown error&quot;</span><span class="p">)</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</div></code></pre><p>You add an Item to the KeyChain with the function <code>SecItemAdd(_ attributes: CFDictionary, _ result: UnsafeMutablePointer&lt;CFTypeRef?&gt;?) -&gt; OSStatus</code>.</p><p>So you pass in a dictionary and receive a result code. If the result code equals <code>errSecSuccess</code> you're golden! <code>errSecDuplicateItem</code> tells you that an entry for the key you provided already exists.</p><p>So how do you pass in the key and the data? It's all in the query dictionary. The first entry <code>[kSecClass as String:kSecClassGenericPassword]</code> tells the system that you want to save a generic password. Other options would be a <code>kSecClassInternetPassword</code> or a <code>kSecClassIdentity</code> and there're even more. The other required keys for the dictionary depend on the type you choose here.</p><p>For the generic password I declared a service specifier <code>kSecAttrService</code> with the value <code>"MyService"</code>. By the way since all these keys are CFStrings you need to cast them to a Swift String.</p><p>With the key <code>kSecValueData</code> you pass in the <code>Data</code> that you want to be saved. The key <code>kSecAttrAccessible</code> is used to specify when an item can be retrieved from the secure store. In the case of <code>kSecAttrAccessibleWhenUnlocked</code> we can receive the item when the device is unlocked. Other possible values are:</p><ul><li><code>kSecAttrAccessibleAfterFirstUnlock</code> Item data can only be accessed once the device has been unlocked after a restart. This is recommended for items that need to be accesible by background applications. Items with this attribute will migrate to a new device when using encrypted backups.</li><li><code>kSecAttrAccessibleAlways</code> Item data can always be accessed regardless of the lock state of the device. This is not recommended for anything except system use. Items with this attribute will migrate to a new device when using encrypted backups.</li><li><code>kSecAttrAccessibleWhenPasscodeSetThisDeviceOnly</code> Item data can only be accessed while the device is unlocked. This is recommended for items that only need to be accessible while the application is in the foreground and requires a passcode to be set on the device. Items with this attribute will never migrate to a new device, so after a backup is restored to a new device, these items will be missing. This attribute will not be available on devices without a passcode. Disabling the device passcode will cause all previously protected items to be deleted.</li><li><code>kSecAttrAccessibleWhenUnlockedThisDeviceOnly</code> Item data can only be accessed while the device is unlocked. This is recommended for items that only need be accessible while the application is in the foreground. Items with this attribute will never migrate to a new device, so after a backup is restored to a new device, these items will be missing.</li><li><code>kSecAttrAccessibleAfterFirstUnlockThisDeviceOnly</code> Item data can only be accessed once the device has been unlocked after a restart. This is recommended for items that need to be accessible by background applications. Items with this attribute will never migrate to a new device, so after a backup is restored to a new device these items will be missing.</li><li><code>kSecAttrAccessibleAlwaysThisDeviceOnly</code> Item data can always be accessed regardless of the lock state of the device. This option is not recommended for anything except system use. Items with this attribute will never migrate to a new device, so after a backup is restored to a new device, these items will be missing.</li></ul><p>So after the dictionary is properly configured we can call <code>SecItemAdd</code> and by this save an item in the Keychain. That's all there is to it 😎</p><h2>Update an item in the Keychain</h2><p>If the key for your item already exists you'll receive <code>errSecDuplicateItem</code> as the result of callling <code>SecItemAdd</code>. You can update your item like this:</p><pre><code><div class="highlight"><span></span>    <span class="kd">static</span> <span class="kd">func</span> <span class="nf">update</span><span class="p">(</span><span class="kc">_</span> <span class="n">message</span><span class="p">:</span> <span class="nb">String</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="kd">let</span> <span class="nv">data</span> <span class="p">=</span> <span class="n">message</span><span class="p">.</span><span class="n">data</span><span class="p">(</span><span class="n">using</span><span class="p">:</span> <span class="p">.</span><span class="n">utf8</span><span class="p">)</span> <span class="p">{</span>
            <span class="kd">let</span> <span class="nv">keyChainQueryDict</span> <span class="p">=</span> <span class="n">getQueryDict</span><span class="p">()</span>

            <span class="kd">let</span> <span class="nv">updateDict</span> <span class="p">=</span> <span class="p">[</span><span class="n">kSecValueData</span><span class="p">:</span><span class="n">data</span><span class="p">]</span>

            <span class="kd">let</span> <span class="nv">status</span><span class="p">:</span> <span class="n">OSStatus</span> <span class="p">=</span> <span class="n">SecItemUpdate</span><span class="p">(</span><span class="n">keyChainQueryDict</span> <span class="k">as</span> <span class="n">CFDictionary</span><span class="p">,</span> <span class="n">updateDict</span> <span class="k">as</span> <span class="n">CFDictionary</span><span class="p">)</span>

            <span class="k">if</span> <span class="n">status</span> <span class="p">==</span> <span class="n">errSecSuccess</span> <span class="p">{</span>
                <span class="bp">print</span><span class="p">(</span><span class="s">&quot;Entry updated.&quot;</span><span class="p">)</span>
            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                <span class="bp">print</span><span class="p">(</span><span class="n">SecCopyErrorMessageString</span><span class="p">(</span><span class="n">status</span><span class="p">,</span> <span class="kc">nil</span><span class="p">)</span> <span class="p">??</span> <span class="s">&quot;Unknown error&quot;</span><span class="p">)</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
</div></code></pre><p>So now we need a second dictionary since calling <code>SecItemUpdate</code>requires us to provide two dictionaries as parameter. The second just contains the data that we want to update for the key <code>kSecValueData</code>.</p><h2>Reading an item from the Keychain</h2><pre><code><div class="highlight"><span></span><span class="kd">static</span> <span class="kd">func</span> <span class="nf">load</span><span class="p">()</span> <span class="p">-&gt;</span> <span class="nb">String</span><span class="p">?</span> <span class="p">{</span>
        <span class="kd">var</span> <span class="nv">keyChainQueryDict</span> <span class="p">=</span> <span class="n">getQueryDict</span><span class="p">()</span>

        <span class="n">keyChainQueryDict</span><span class="p">[</span><span class="n">kSecMatchLimit</span> <span class="k">as</span> <span class="nb">String</span><span class="p">]</span> <span class="p">=</span> <span class="n">kSecMatchLimitOne</span>
        <span class="n">keyChainQueryDict</span><span class="p">[</span><span class="n">kSecReturnData</span> <span class="k">as</span> <span class="nb">String</span><span class="p">]</span> <span class="p">=</span> <span class="n">kCFBooleanTrue</span>

        <span class="kd">var</span> <span class="nv">result</span><span class="p">:</span> <span class="nb">AnyObject</span><span class="p">?</span>
        <span class="kd">let</span> <span class="nv">status</span> <span class="p">=</span> <span class="n">SecItemCopyMatching</span><span class="p">(</span><span class="n">keyChainQueryDict</span> <span class="k">as</span> <span class="n">CFDictionary</span><span class="p">,</span> <span class="p">&amp;</span><span class="n">result</span><span class="p">)</span>

        <span class="k">if</span> <span class="n">status</span> <span class="p">==</span> <span class="n">noErr</span> <span class="p">{</span>
            <span class="k">if</span> <span class="kd">let</span> <span class="nv">data</span> <span class="p">=</span> <span class="n">result</span> <span class="k">as</span><span class="p">?</span> <span class="n">Data</span> <span class="p">{</span>
                <span class="k">return</span> <span class="nb">String</span><span class="p">(</span><span class="n">data</span><span class="p">:</span> <span class="n">data</span><span class="p">,</span> <span class="n">encoding</span><span class="p">:</span> <span class="p">.</span><span class="n">utf8</span><span class="p">)</span>
            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                <span class="bp">print</span><span class="p">(</span><span class="s">&quot;Could not retrieve data&quot;</span><span class="p">)</span>
            <span class="p">}</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="bp">print</span><span class="p">(</span><span class="n">SecCopyErrorMessageString</span><span class="p">(</span><span class="n">status</span><span class="p">,</span> <span class="kc">nil</span><span class="p">)</span> <span class="p">??</span> <span class="s">&quot;Unknown error&quot;</span><span class="p">)</span>
        <span class="p">}</span>

        <span class="k">return</span> <span class="kc">nil</span>
    <span class="p">}</span>
</div></code></pre><p>The function <code>SecItemCopyMatching(_ query: CFDictionary, _ result: UnsafeMutablePointer&lt;CFTypeRef?&gt;?) -&gt; OSStatus</code> copies an Item into its second parameter if the item matches the query dictionary passed in the first parameter. The query dictionary is configured to return only one item and return it as <code>Data</code>. This is configured with the keys <code>kSecMatchLimit</code> and <code>kSecReturnData</code>. If the operations succeeded you can cast the result object to data and build the String you originally saved from it.</p><p>So after looking into this I would suggest you simply use <a href="https://github.com/jrendel/SwiftKeychainWrapper">SwiftKeychainWrapper</a> like everyone else suggests 😃</p><h2>Update: A stripped down version of SwiftKeychainWrapper (only Strings)</h2><pre><code><div class="highlight"><span></span><span class="kd">import</span> <span class="nc">Foundation</span>

<span class="c1">// This is a stripped down version of SwiftKeychainWraper</span>
<span class="c1">// https://github.com/jrendel/SwiftKeychainWrapper</span>
<span class="kd">class</span> <span class="nc">KeychainWrapper</span> <span class="p">{</span>
    <span class="kd">static</span> <span class="kd">let</span> <span class="nv">standard</span> <span class="p">=</span> <span class="n">KeychainWrapper</span><span class="p">()</span>

    <span class="kd">private</span> <span class="kd">init</span><span class="p">()</span> <span class="p">{}</span>

    <span class="kd">func</span> <span class="nf">string</span><span class="p">(</span><span class="n">forKey</span> <span class="n">key</span><span class="p">:</span> <span class="nb">String</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="nb">String</span><span class="p">?</span> <span class="p">{</span>
        <span class="k">guard</span> <span class="kd">let</span> <span class="nv">keychainData</span> <span class="p">=</span> <span class="n">data</span><span class="p">(</span><span class="n">forKey</span><span class="p">:</span> <span class="n">key</span><span class="p">)</span> <span class="k">else</span> <span class="p">{</span>
            <span class="k">return</span> <span class="kc">nil</span>
        <span class="p">}</span>

        <span class="k">return</span> <span class="nb">String</span><span class="p">(</span><span class="n">data</span><span class="p">:</span> <span class="n">keychainData</span><span class="p">,</span> <span class="n">encoding</span><span class="p">:</span> <span class="p">.</span><span class="n">utf8</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="kd">func</span> <span class="nf">set</span><span class="p">(</span><span class="kc">_</span> <span class="n">value</span><span class="p">:</span> <span class="nb">String</span><span class="p">,</span> <span class="n">forKey</span> <span class="n">key</span><span class="p">:</span> <span class="nb">String</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="kd">let</span> <span class="nv">data</span> <span class="p">=</span> <span class="n">value</span><span class="p">.</span><span class="n">data</span><span class="p">(</span><span class="n">using</span><span class="p">:</span> <span class="p">.</span><span class="n">utf8</span><span class="p">)</span> <span class="p">{</span>
            <span class="kr">set</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">forKey</span><span class="p">:</span> <span class="n">key</span><span class="p">)</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="kd">func</span> <span class="nf">removeObject</span><span class="p">(</span><span class="n">forKey</span> <span class="n">key</span><span class="p">:</span> <span class="nb">String</span><span class="p">)</span> <span class="p">{</span>
        <span class="kd">let</span> <span class="nv">keychainQueryDictionary</span> <span class="p">=</span> <span class="n">setupKeychainQueryDictionary</span><span class="p">(</span><span class="n">forKey</span><span class="p">:</span> <span class="n">key</span><span class="p">)</span>
        <span class="n">SecItemDelete</span><span class="p">(</span><span class="n">keychainQueryDictionary</span> <span class="k">as</span> <span class="n">CFDictionary</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="kd">private</span> <span class="kd">func</span> <span class="nf">data</span><span class="p">(</span><span class="n">forKey</span> <span class="n">key</span><span class="p">:</span> <span class="nb">String</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="n">Data</span><span class="p">?</span> <span class="p">{</span>
        <span class="kd">var</span> <span class="nv">keychainQueryDictionary</span> <span class="p">=</span> <span class="n">setupKeychainQueryDictionary</span><span class="p">(</span><span class="n">forKey</span><span class="p">:</span> <span class="n">key</span><span class="p">)</span>
        <span class="n">keychainQueryDictionary</span><span class="p">[</span><span class="n">kSecMatchLimit</span> <span class="k">as</span> <span class="nb">String</span><span class="p">]</span> <span class="p">=</span> <span class="n">kSecMatchLimitOne</span>
        <span class="n">keychainQueryDictionary</span><span class="p">[</span><span class="n">kSecReturnData</span> <span class="k">as</span> <span class="nb">String</span><span class="p">]</span> <span class="p">=</span> <span class="n">kCFBooleanTrue</span>

        <span class="kd">var</span> <span class="nv">result</span><span class="p">:</span> <span class="nb">AnyObject</span><span class="p">?</span>
        <span class="kd">let</span> <span class="nv">status</span> <span class="p">=</span> <span class="n">SecItemCopyMatching</span><span class="p">(</span><span class="n">keychainQueryDictionary</span> <span class="k">as</span> <span class="n">CFDictionary</span><span class="p">,</span> <span class="p">&amp;</span><span class="n">result</span><span class="p">)</span>

        <span class="k">return</span> <span class="n">status</span> <span class="p">==</span> <span class="n">noErr</span> <span class="p">?</span> <span class="n">result</span> <span class="k">as</span><span class="p">?</span> <span class="n">Data</span> <span class="p">:</span> <span class="kc">nil</span>
    <span class="p">}</span>

    <span class="kd">private</span> <span class="kd">func</span> <span class="nf">set</span><span class="p">(</span><span class="kc">_</span> <span class="n">data</span><span class="p">:</span> <span class="n">Data</span><span class="p">,</span> <span class="n">forKey</span> <span class="n">key</span><span class="p">:</span> <span class="nb">String</span><span class="p">)</span> <span class="p">{</span>
        <span class="kd">var</span> <span class="nv">keychainQuerDictionary</span> <span class="p">=</span> <span class="n">setupKeychainQueryDictionary</span><span class="p">(</span><span class="n">forKey</span><span class="p">:</span> <span class="n">key</span><span class="p">)</span>
        <span class="n">keychainQuerDictionary</span><span class="p">[</span><span class="n">kSecValueData</span> <span class="k">as</span> <span class="nb">String</span><span class="p">]</span> <span class="p">=</span> <span class="n">data</span>

        <span class="kd">let</span> <span class="nv">status</span> <span class="p">=</span> <span class="n">SecItemAdd</span><span class="p">(</span><span class="n">keychainQuerDictionary</span> <span class="k">as</span> <span class="n">CFDictionary</span><span class="p">,</span> <span class="kc">nil</span><span class="p">)</span>

        <span class="k">if</span> <span class="n">status</span> <span class="p">==</span> <span class="n">errSecDuplicateItem</span> <span class="p">{</span>
            <span class="n">update</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">forKey</span><span class="p">:</span> <span class="n">key</span><span class="p">)</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="kd">private</span> <span class="kd">func</span> <span class="nf">update</span><span class="p">(</span><span class="kc">_</span> <span class="n">data</span><span class="p">:</span> <span class="n">Data</span><span class="p">,</span> <span class="n">forKey</span> <span class="n">key</span><span class="p">:</span> <span class="nb">String</span><span class="p">)</span> <span class="p">{</span>
        <span class="kd">let</span> <span class="nv">keychainQueryDictionary</span> <span class="p">=</span> <span class="n">setupKeychainQueryDictionary</span><span class="p">(</span><span class="n">forKey</span><span class="p">:</span> <span class="n">key</span><span class="p">)</span>
        <span class="kd">let</span> <span class="nv">updateDictionary</span> <span class="p">=</span> <span class="p">[</span><span class="n">kSecValueData</span><span class="p">:</span><span class="n">data</span><span class="p">]</span>

        <span class="n">SecItemUpdate</span><span class="p">(</span><span class="n">keychainQueryDictionary</span> <span class="k">as</span> <span class="n">CFDictionary</span><span class="p">,</span> <span class="n">updateDictionary</span> <span class="k">as</span> <span class="n">CFDictionary</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="kd">private</span> <span class="kd">func</span> <span class="nf">setupKeychainQueryDictionary</span><span class="p">(</span><span class="n">forKey</span> <span class="n">key</span><span class="p">:</span> <span class="nb">String</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="p">[</span><span class="nb">String</span><span class="p">:</span><span class="nb">Any</span><span class="p">]</span> <span class="p">{</span>
        <span class="kd">var</span> <span class="nv">keychainQueryDictionary</span><span class="p">:</span> <span class="p">[</span><span class="nb">String</span><span class="p">:</span><span class="nb">Any</span><span class="p">]</span> <span class="p">=</span> <span class="p">[</span><span class="n">kSecClass</span> <span class="k">as</span> <span class="nb">String</span><span class="p">:</span><span class="n">kSecClassGenericPassword</span><span class="p">]</span>
        <span class="n">keychainQueryDictionary</span><span class="p">[</span><span class="n">kSecAttrService</span> <span class="k">as</span> <span class="nb">String</span><span class="p">]</span> <span class="p">=</span> <span class="n">Bundle</span><span class="p">.</span><span class="n">main</span><span class="p">.</span><span class="n">bundleIdentifier</span><span class="p">!</span>

        <span class="k">if</span> <span class="kd">let</span> <span class="nv">encodedKey</span> <span class="p">=</span> <span class="n">key</span><span class="p">.</span><span class="n">data</span><span class="p">(</span><span class="n">using</span><span class="p">:</span> <span class="p">.</span><span class="n">utf8</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">keychainQueryDictionary</span><span class="p">[</span><span class="n">kSecAttrAccount</span> <span class="k">as</span> <span class="nb">String</span><span class="p">]</span> <span class="p">=</span> <span class="n">encodedKey</span>
        <span class="p">}</span>

        <span class="k">return</span> <span class="n">keychainQueryDictionary</span>
    <span class="p">}</span>
<span class="p">}</span>
</div></code></pre>]]></content:encoded></item><item><guid isPermaLink="true">https://oliver-epper.de/posts/how-to-create-a-self-sizing-gauge-componen-in-swiftui</guid><title>How to create a self-sizing gauge component in SwiftUI</title><description>How to create a self-sizing gauge component in swiftui</description><link>https://oliver-epper.de/posts/how-to-create-a-self-sizing-gauge-componen-in-swiftui</link><pubDate>Fri, 8 May 2020 09:41:00 +0200</pubDate><content:encoded><![CDATA[<p>SwiftUI is really great and building custom UI is actually pretty straight forward. Let's use <em>function builders</em> and <em>preference keys</em> to build a component that looks like this:</p><figure>
    <picture>
        <source srcset="/images/Gauges-dark.png" media="(prefers-color-scheme: dark)">
        <img src="https://oliver-epper.de/images/Gauges.png" alt="gauges">
    </picture>
</figure><p>The gauge features a center view that the user can either provide or the gauge will automatically show a text presenting it's value. So once we have our gauge component ready it can be used like this:</p><pre><code><div class="highlight"><span></span><span class="c1">// Simplest use possible, the Gauge will construct a centerView that shows: &#39;\(value) %&#39;.</span>
<span class="c1">// To prevent constant resizings when passing in other values the centerView width is calculated</span>
<span class="c1">// from the string: &#39;100 %&#39;</span>
<span class="n">Gauge</span><span class="p">(</span><span class="n">value</span><span class="p">:</span> <span class="n">value</span><span class="p">)</span>

<span class="c1">// provide your own centerView.</span>
<span class="n">Gauge</span><span class="p">(</span><span class="n">value</span><span class="p">:</span> <span class="n">value</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">Text</span><span class="p">(</span><span class="s">&quot;This is a fixed text&quot;</span><span class="p">)</span>
<span class="p">}</span>

<span class="c1">// use an image</span>
<span class="n">Gauge</span><span class="p">(</span><span class="n">value</span><span class="p">:</span> <span class="n">value</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">Image</span><span class="p">(</span><span class="n">systemName</span><span class="p">:</span> <span class="s">&quot;headphones&quot;</span><span class="p">)</span>
        <span class="p">.</span><span class="n">resizable</span><span class="p">()</span>
        <span class="p">.</span><span class="n">frame</span><span class="p">(</span><span class="n">width</span><span class="p">:</span> <span class="mi">55</span><span class="p">,</span> <span class="n">height</span><span class="p">:</span> <span class="mi">55</span><span class="p">)</span>
<span class="p">}</span>
</div></code></pre><p>The gauge will automatically adjust its size depending on the size of the center view.</p><h2>How is this built?</h2><pre><code><div class="highlight"><span></span><span class="kd">import</span> <span class="nc">SwiftUI</span>

<span class="kd">public</span> <span class="kd">struct</span> <span class="nc">Gauge</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;:</span> <span class="n">View</span> <span class="k">where</span> <span class="n">T</span><span class="p">:</span> <span class="n">View</span> <span class="p">{</span>
    <span class="kd">let</span> <span class="nv">centerView</span><span class="p">:</span> <span class="n">T</span>
    <span class="kd">let</span> <span class="nv">value</span><span class="p">:</span> <span class="nb">Double</span>
    
    <span class="kd">let</span> <span class="nv">thickness</span><span class="p">:</span> <span class="n">CGFloat</span> <span class="p">=</span> <span class="mi">5</span>
    <span class="kd">let</span> <span class="nv">scale</span><span class="p">:</span> <span class="n">CGFloat</span> <span class="p">=</span> <span class="mf">1.777</span>
    
    <span class="kd">let</span> <span class="nv">gradient</span> <span class="p">=</span> <span class="n">AngularGradient</span><span class="p">(</span>
        <span class="n">gradient</span><span class="p">:</span> <span class="n">Gradient</span><span class="p">(</span>
            <span class="n">colors</span><span class="p">:</span> <span class="p">[</span>
                <span class="p">.</span><span class="n">red</span><span class="p">,</span>
                <span class="p">.</span><span class="n">green</span>
            <span class="p">]</span>
        <span class="p">),</span>
        <span class="n">center</span><span class="p">:</span> <span class="p">.</span><span class="n">center</span>
    <span class="p">)</span>
    
    <span class="p">@</span><span class="n">State</span> <span class="kd">private</span> <span class="kd">var</span> <span class="nv">diameter</span><span class="p">:</span> <span class="n">CGFloat</span> <span class="p">=</span> <span class="mi">0</span>
    
    <span class="kd">public</span> <span class="kd">init</span><span class="p">(</span><span class="n">value</span><span class="p">:</span> <span class="nb">Double</span><span class="p">,</span> <span class="p">@</span><span class="n">GaugeBuilder</span> <span class="n">builder</span><span class="p">:</span> <span class="p">()</span> <span class="p">-&gt;</span> <span class="n">T</span><span class="p">)</span> <span class="p">{</span>
        <span class="kc">self</span><span class="p">.</span><span class="n">value</span> <span class="p">=</span> <span class="n">value</span>
        <span class="kc">self</span><span class="p">.</span><span class="n">centerView</span> <span class="p">=</span> <span class="n">builder</span><span class="p">()</span>
    <span class="p">}</span>
    
    <span class="kd">public</span> <span class="kd">var</span> <span class="nv">body</span><span class="p">:</span> <span class="n">some</span> <span class="n">View</span> <span class="p">{</span>
        <span class="n">ZStack</span> <span class="p">{</span>
            <span class="n">centerView</span><span class="p">.</span><span class="n">background</span><span class="p">(</span>
                <span class="n">GeometryReader</span> <span class="p">{</span> <span class="n">proxy</span> <span class="k">in</span>
                    <span class="n">Color</span><span class="p">.</span><span class="n">clear</span><span class="p">.</span><span class="n">preference</span><span class="p">(</span><span class="n">key</span><span class="p">:</span> <span class="n">GaugeWidthPreferenceKey</span><span class="p">.</span><span class="kc">self</span><span class="p">,</span> <span class="n">value</span><span class="p">:</span> <span class="n">proxy</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">width</span><span class="p">)</span>
                <span class="p">}</span>
            <span class="p">)</span>
            <span class="n">Group</span> <span class="p">{</span>
                <span class="n">Circle</span><span class="p">()</span>
                    <span class="p">.</span><span class="n">stroke</span><span class="p">(</span><span class="n">Color</span><span class="p">.</span><span class="n">primary</span><span class="p">.</span><span class="n">opacity</span><span class="p">(</span><span class="mf">0.2</span><span class="p">),</span> <span class="n">style</span><span class="p">:</span> <span class="p">.</span><span class="kd">init</span><span class="p">(</span><span class="n">lineWidth</span><span class="p">:</span> <span class="n">thickness</span><span class="o">/</span><span class="n">scale</span><span class="p">,</span> <span class="n">dash</span><span class="p">:</span> <span class="p">[</span><span class="mi">5</span><span class="p">]))</span>
                <span class="n">Circle</span><span class="p">()</span>
                    <span class="p">.</span><span class="n">trim</span><span class="p">(</span><span class="n">from</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="n">to</span><span class="p">:</span> <span class="n">CGFloat</span><span class="p">(</span><span class="n">value</span><span class="o">/</span><span class="mi">100</span><span class="p">))</span>
                    <span class="p">.</span><span class="n">stroke</span><span class="p">(</span><span class="n">gradient</span><span class="p">,</span> <span class="n">style</span><span class="p">:</span> <span class="p">.</span><span class="kd">init</span><span class="p">(</span><span class="n">lineWidth</span><span class="p">:</span> <span class="n">thickness</span><span class="p">))</span>
            <span class="p">}</span>
            <span class="p">.</span><span class="n">padding</span><span class="p">(</span><span class="n">thickness</span><span class="o">/</span><span class="mi">2</span><span class="p">)</span>
            <span class="p">.</span><span class="n">rotationEffect</span><span class="p">(.</span><span class="n">degrees</span><span class="p">(</span><span class="mi">90</span><span class="p">))</span>
            <span class="p">.</span><span class="n">frame</span><span class="p">(</span><span class="n">width</span><span class="p">:</span> <span class="n">diameter</span><span class="p">,</span> <span class="n">height</span><span class="p">:</span> <span class="n">diameter</span><span class="p">)</span>
        <span class="p">}.</span><span class="n">onPreferenceChange</span><span class="p">(</span><span class="n">GaugeWidthPreferenceKey</span><span class="p">.</span><span class="kc">self</span><span class="p">)</span> <span class="p">{</span> <span class="n">width</span> <span class="k">in</span>
            <span class="kc">self</span><span class="p">.</span><span class="n">diameter</span> <span class="p">=</span> <span class="n">width</span> <span class="o">*</span> <span class="kc">self</span><span class="p">.</span><span class="n">scale</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">extension</span> <span class="nc">Gauge</span> <span class="k">where</span> <span class="n">T</span> <span class="p">==</span> <span class="n">ZStack</span><span class="p">&lt;</span><span class="n">TupleView</span><span class="o">&lt;</span><span class="p">(</span><span class="n">Text</span><span class="p">,</span> <span class="n">Text</span><span class="p">)</span><span class="o">&gt;&gt;</span> <span class="p">{</span>
    <span class="kd">public</span> <span class="kd">init</span><span class="p">(</span><span class="n">value</span><span class="p">:</span> <span class="nb">Double</span><span class="p">)</span> <span class="p">{</span>
        <span class="kc">self</span><span class="p">.</span><span class="n">value</span> <span class="p">=</span> <span class="n">value</span>
        <span class="kc">self</span><span class="p">.</span><span class="n">centerView</span> <span class="p">=</span> <span class="n">ZStack</span> <span class="p">{</span>
            <span class="n">Text</span><span class="p">(</span><span class="s">&quot;100 %&quot;</span><span class="p">).</span><span class="n">foregroundColor</span><span class="p">(.</span><span class="n">clear</span><span class="p">)</span>
            <span class="n">Text</span><span class="p">(</span><span class="s">&quot;</span><span class="si">\(</span><span class="n">value</span><span class="p">,</span> <span class="n">specifier</span><span class="p">:</span> <span class="s">&quot;%.0f&quot;</span><span class="si">)</span><span class="s"> %&quot;</span><span class="p">)</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="p">@</span><span class="n">_functionBuilder</span>
<span class="kd">struct</span> <span class="nc">GaugeBuilder</span> <span class="p">{</span>
    <span class="kd">static</span> <span class="kd">func</span> <span class="nf">buildBlock</span><span class="p">&lt;</span><span class="n">T</span><span class="p">:</span> <span class="n">View</span><span class="p">&gt;(</span><span class="kc">_</span> <span class="n">centerView</span><span class="p">:</span> <span class="n">T</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="n">T</span> <span class="p">{</span>
        <span class="n">centerView</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">struct</span> <span class="nc">GaugeWidthPreferenceKey</span><span class="p">:</span> <span class="n">PreferenceKey</span> <span class="p">{</span>
    <span class="kd">typealias</span> <span class="n">Value</span> <span class="p">=</span> <span class="n">CGFloat</span>
    <span class="kd">static</span> <span class="kd">var</span> <span class="nv">defaultValue</span><span class="p">:</span> <span class="n">CGFloat</span> <span class="p">=</span> <span class="mi">0</span>
    
    <span class="kd">static</span> <span class="kd">func</span> <span class="nf">reduce</span><span class="p">(</span><span class="n">value</span><span class="p">:</span> <span class="kr">inout</span> <span class="n">CGFloat</span><span class="p">,</span> <span class="n">nextValue</span><span class="p">:</span> <span class="p">()</span> <span class="p">-&gt;</span> <span class="n">CGFloat</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">value</span> <span class="p">=</span> <span class="n">nextValue</span><span class="p">()</span>
    <span class="p">}</span>
<span class="p">}</span>
</div></code></pre><p>So that's the complete thing. There are a few things worth mentioning.</p><h3>Function Builder</h3><p>This is the magic behind the nice SwiftUI DSL. The <code>buildBlock</code> function returns what gets passed as the trailing closure to the Gauge. So instead of this:</p><pre><code><div class="highlight"><span></span><span class="n">Gauge</span><span class="p">(</span><span class="n">value</span><span class="p">:</span> <span class="n">value</span><span class="p">,</span> <span class="n">centerView</span><span class="p">:</span> <span class="n">Text</span><span class="p">(</span><span class="s">&quot;</span><span class="si">\(</span><span class="n">value</span><span class="si">)</span><span class="s"> %&quot;</span><span class="p">)</span>
</div></code></pre><p>you can write:</p><pre><code><div class="highlight"><span></span><span class="n">Gauge</span><span class="p">(</span><span class="n">value</span><span class="p">:</span> <span class="n">value</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">Text</span><span class="p">(</span><span class="s">&quot;</span><span class="si">\(</span><span class="n">value</span><span class="si">)</span><span class="s"> %&quot;</span><span class="p">)</span>
<span class="p">}</span>
</div></code></pre><h3>Preference Key</h3><p>In SwiftUI preference keys provide the possibility for a child view to pass values up to it's ancestors. While <code>@Environment</code>-objects are visible to child views, <code>PreferenceKeys</code> are visible to parents. What we want to achieve is that the Gauge knows the width of it's <code>centerView</code> and adjusts the circles accordingly. So we add the <code>.background</code>-modifier to the <code>centerView</code> and fill its background with a transparent color. We use the <code>GeometryReader</code>'s proxy to get the size of the invisible Color and save that in the <code>GaugeWidthPreferenceKey</code>.</p><p>Now we can use the <code>.onPreferenceChange</code>-modifier on the outer ZStack to calculate the diameter of our circles. Since diamater is a <code>@State</code>-property the body property of the Gauge will be evaluated and our circles are drawn with the desired diameter. Very cool!</p><h3>Providing a default center view</h3><p>There's one more thing required to make the Gauge work without the need to provide a centerView. We need an initializer that takes only the value as an argument. This can be done with an extension of the Gauge using conditional conformance.</p><h3>Why conformance to <code>ZStack&lt;TupleView&lt;(Text, Text)&gt;&gt;</code>?</h3><p>In order to prevent the Gauge to change its size with every different value between 0 and 100 % I build a default centerView that has the invisible string "100 %" and centered on top of that the string representing the actual value. So the <code>centerView</code> will always have the same width.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://oliver-epper.de/posts/a-deprecated-way-to-save-codables</guid><title>A deprecated way to save Codables – but why?</title><description>Saving one Codable a time directly to a file handle.</description><link>https://oliver-epper.de/posts/a-deprecated-way-to-save-codables</link><pubDate>Fri, 21 Feb 2020 09:41:00 +0100</pubDate><content:encoded><![CDATA[<p>I was looking for a way to save a lot of Codables that emerge over a potentially long timespan. Just keeping them in memory looked like the obvious thing to do but I wanted something failsafe and persistent.</p><p>Saving a Codable to a file in Swift couldn’t be easier: <code>JSONEncoder.encode(T)</code> returns <code>Data</code>. That can be written to an <code>URL</code> via <code>write(to: URL)</code>.</p><p>But what if I want to append?</p><p>I for sure don’t want to load the data from a file, decode it into a JSON array, append the new Codable to the array, encode the array to data and then use that data to overwrite the file.</p><p>I do the following:</p><p>An instance of <code>CodableFileBuffer&lt;T&gt;</code> keeps an open FileHandle on an URL and whenever I call <code>append(codable)</code> on that buffer it encodes to data and writes that data to the file handle.</p><pre><code><div class="highlight"><span></span><span class="kd">public</span> <span class="kd">func</span> <span class="nf">append</span><span class="p">(</span><span class="kc">_</span> <span class="n">codable</span><span class="p">:</span> <span class="n">T</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// encode codable</span>
    <span class="k">guard</span> <span class="kd">let</span> <span class="nv">data</span> <span class="p">=</span> <span class="k">try</span><span class="p">?</span> <span class="n">encoder</span><span class="p">.</span><span class="n">encode</span><span class="p">(</span><span class="n">codable</span><span class="p">)</span> <span class="k">else</span> <span class="p">{</span>
        <span class="bp">fatalError</span><span class="p">(</span><span class="s">&quot;Cannot encode </span><span class="si">\(</span><span class="n">codable</span><span class="si">)</span><span class="s">&quot;</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="c1">// write to FileHandle</span>
    <span class="n">fileHandle</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
    <span class="n">fileHandle</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="s">&quot;,&quot;</span><span class="p">.</span><span class="n">data</span><span class="p">(</span><span class="n">using</span><span class="p">:</span> <span class="p">.</span><span class="n">utf8</span><span class="p">)</span><span class="o">!</span><span class="p">)</span>

    <span class="c1">// log</span>
    <span class="n">os_log</span><span class="p">(</span><span class="s">&quot;Did append codable to CodableFileBuffer at: %@&quot;</span><span class="p">,</span> <span class="n">log</span><span class="p">:</span> <span class="n">OSLog</span><span class="p">.</span><span class="n">CodableFileBuffer</span><span class="p">,</span> <span class="n">type</span><span class="p">:</span> <span class="p">.</span><span class="n">debug</span><span class="p">,</span> <span class="n">fileURL</span><span class="p">.</span><span class="n">lastPathComponent</span><span class="p">)</span>
<span class="p">}</span>
</div></code></pre><p>This could use a little more error handling but it is just for demo purpose. Bare with me.</p><p>The only thing not completely obvious happens on line 9. This ist just the comma that is required to form a JSON array. When I create the FileHandle I immediately write an opening square bracket to the file and the <code>retrieve() -&gt; [Codable]</code> function appends the closing square-bracket to the data before it passes it to the JSONDecoder.</p><p>So the files content loos like this:</p><pre><code><div class="highlight"><span></span><span class="c1">// after initializing</span>
<span class="p">[</span>

<span class="c1">// after writing the first codable</span>
<span class="p">[{</span><span class="s">&quot;id&quot;</span><span class="p">:</span><span class="mi">1</span><span class="p">,</span> <span class="s">&quot;key&quot;</span><span class="p">:</span> <span class="s">&quot;value_one&quot;</span><span class="p">},</span>

<span class="c1">// after writing the second codable</span>
<span class="p">[{</span><span class="s">&quot;id&quot;</span><span class="p">:</span><span class="mi">1</span><span class="p">,</span> <span class="s">&quot;key&quot;</span><span class="p">:</span> <span class="s">&quot;value_one&quot;</span><span class="p">},{</span><span class="s">&quot;id&quot;</span><span class="p">:</span><span class="mi">2</span><span class="p">,</span> <span class="s">&quot;key&quot;</span><span class="p">:</span> <span class="s">&quot;another_value&quot;</span><span class="p">},</span>

<span class="c1">// the data that gets passed to the JSONDecoder looks like this</span>
<span class="p">[{</span><span class="s">&quot;id&quot;</span><span class="p">:</span><span class="mi">1</span><span class="p">,</span> <span class="s">&quot;key&quot;</span><span class="p">:</span> <span class="s">&quot;value_one&quot;</span><span class="p">},{</span><span class="s">&quot;id&quot;</span><span class="p">:</span><span class="mi">2</span><span class="p">,</span> <span class="s">&quot;key&quot;</span><span class="p">:</span> <span class="s">&quot;another_value&quot;</span><span class="p">},]</span>
</div></code></pre><p>I know the trailing comma is ugly and no valid json. It would be an easy fix but actually the <code>JSONDecoder</code> is pretty forgiving, here.</p><p>So what do we have now?</p><p>We have a Buffer that can be used like this:</p><pre><code><div class="highlight"><span></span><span class="kd">struct</span> <span class="nc">MyCodable</span><span class="p">:</span> <span class="n">Codable</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nv">id</span><span class="p">:</span> <span class="nb">Int</span>
    <span class="kd">var</span> <span class="nv">key</span><span class="p">:</span> <span class="nb">String</span>
<span class="p">}</span>

<span class="kd">let</span> <span class="nv">buffer</span> <span class="p">=</span> <span class="n">CodableFileBuffer</span><span class="p">&lt;</span><span class="n">MyCodable</span><span class="p">&gt;()</span>

<span class="n">buffer</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">MyCodable</span><span class="p">(</span><span class="n">id</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="n">key</span><span class="p">:</span> <span class="s">&quot;value_one&quot;</span><span class="p">))</span>
<span class="n">buffer</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">MyCodable</span><span class="p">(</span><span class="n">id</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="n">key</span><span class="p">:</span> <span class="s">&quot;another_value&quot;</span><span class="p">))</span>

<span class="kd">let</span> <span class="nv">myCodables</span> <span class="p">=</span> <span class="n">buffer</span><span class="p">.</span><span class="n">retrieve</span><span class="p">()</span>
</div></code></pre><p>Neat, isn’t it?</p><p>I use it to append thousands of Codables and it works pretty nice, so far. I measured it with instruments using tens of thousands to Codables. And I use it on real devices running for days.</p><p>Here’s the complete thing:</p><p><a href="https://github.com/oliverepper/CodableFileBuffer">CodeableFileBuffer</a></p><p>So what’s next?</p><p>I have a few questions I’d like to discuss:</p><ol><li>Why is <code>FileHandle.write</code> deprecated? It sure doesn’t look swifty. It can throw exceptions without beeing marked as throwing.</li><li>How are we supposed to replace this? How does the <code>writeabilityHandler</code> work? Can anyone provide an example?</li><li>What do you think? I guess there must be other or better ways to buffer Codables on disk.</li></ol><p>I’d really appreciate your ideas.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://oliver-epper.de/posts/how-to-use-coredata-inside-xcframework</guid><title>How to use CoreData inside xcframework</title><description>Use CoreData inside xcframework</description><link>https://oliver-epper.de/posts/how-to-use-coredata-inside-xcframework</link><pubDate>Thu, 20 Feb 2020 09:41:00 +0100</pubDate><content:encoded><![CDATA[<p>The company I work for distributes a binary framework that records data on an iPhone. Since I am in charge of that framework and I enjoy working with CoreData I wanted to use it to store the collected data. Sadly my first attempt of doing this resulted in an error when I tried to use the framework inside an actual app.</p><blockquote><p>@NSManaged not allowed on computed properties</p></blockquote><p>This is coming from the generated .swiftinterface file so there is not much you can do about it. With a little research and some help I found the good news:</p><p>[[ModuleInterfaces] Don't diagnose @NSManaged properties with accessors #27676](https://github.com/apple/swift/pull/27676)</p><p>So there is a fix 🤗</p><h2>Get the fix</h2><p>At the time of writing all you need to do is to download and use the Xcode beta (11.4) which comes with a newer version of the Swift compiler that already has the fix. The rest is then pretty straight forward.</p><h2>Create the DataModel</h2><p>You can use File-&gt;New and then search for „Data Model“ in the template chooser. I will call it `MyDataModel for demo purpose.</p><h2>Create an instance of NSPersistentContainer in your framework code</h2><p>This might not be obvious at first, but it is not hard. When you create an app with core data you get the following code inside your AppDelegate:</p><pre><code><div class="highlight"><span></span><span class="kr">lazy</span> <span class="kd">var</span> <span class="nv">persistentContainer</span><span class="p">:</span> <span class="bp">NSPersistentContainer</span> <span class="p">=</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nv">container</span> <span class="p">=</span> <span class="bp">NSPersistentContainer</span><span class="p">(</span><span class="n">name</span><span class="p">:</span> <span class="s">&quot;DemoApp&quot;</span><span class="p">)</span>
  <span class="n">container</span><span class="p">.</span><span class="n">loadPersistentStores</span><span class="p">(</span><span class="n">completionHandler</span><span class="p">:</span> <span class="p">{</span> <span class="p">(</span><span class="n">storeDescription</span><span class="p">,</span> <span class="n">error</span><span class="p">)</span> <span class="k">in</span>
    <span class="k">if</span> <span class="kd">let</span> <span class="nv">error</span> <span class="p">=</span> <span class="n">error</span> <span class="k">as</span> <span class="bp">NSError</span><span class="p">?</span> <span class="p">{</span>
      <span class="bp">fatalError</span><span class="p">(</span><span class="s">&quot;Unresolved error </span><span class="si">\(</span><span class="n">error</span><span class="si">)</span><span class="s">, </span><span class="si">\(</span><span class="n">error</span><span class="p">.</span><span class="n">userInfo</span><span class="si">)</span><span class="s">&quot;</span><span class="p">)</span>
    <span class="p">}</span>
  <span class="p">})</span>
  <span class="k">return</span> <span class="n">container</span>
<span class="p">}()</span>
</div></code></pre><p>While the initializer <code>init(name: String)</code> of <code>NSPersistentContainer</code> is pretty convenient we can’t use it, because in the context of the running app it simply couldn’t find the model. We need to use <code>init(name: String, managedObjectModel: NSManagedObjectModel)</code> to get the container. <code>NSManagedObjectModel</code> has an initializer that takes an <code>URL</code>.</p><p>So update the above to this instead:</p><pre><code><div class="highlight"><span></span><span class="kr">lazy</span> <span class="kd">var</span> <span class="nv">persistentContainer</span><span class="p">:</span> <span class="bp">NSPersistentContainer</span> <span class="p">=</span> <span class="p">{</span>
    <span class="kd">let</span> <span class="nv">modelName</span> <span class="p">=</span> <span class="s">&quot;MyDataModel&quot;</span>
    <span class="k">guard</span> <span class="kd">let</span> <span class="nv">modelDir</span> <span class="p">=</span> <span class="n">Bundle</span><span class="p">(</span><span class="k">for</span><span class="p">:</span> <span class="n">type</span><span class="p">(</span><span class="n">of</span><span class="p">:</span> <span class="kc">self</span><span class="p">)).</span><span class="n">url</span><span class="p">(</span><span class="n">forResource</span><span class="p">:</span> <span class="n">modelName</span><span class="p">,</span> <span class="n">withExtension</span><span class="p">:</span> <span class="s">&quot;momd&quot;</span><span class="p">)</span> <span class="k">else</span> <span class="p">{</span> <span class="bp">fatalError</span><span class="p">()</span> <span class="p">}</span>
    <span class="k">guard</span> <span class="kd">let</span> <span class="nv">mom</span> <span class="p">=</span> <span class="bp">NSManagedObjectModel</span><span class="p">(</span><span class="n">contentsOf</span><span class="p">:</span> <span class="n">modelDir</span><span class="p">)</span> <span class="k">else</span> <span class="p">{</span> <span class="bp">fatalError</span><span class="p">()</span> <span class="p">}</span>

    <span class="kd">let</span> <span class="nv">container</span> <span class="p">=</span> <span class="bp">NSPersistentContainer</span><span class="p">(</span><span class="n">name</span><span class="p">:</span> <span class="n">modelName</span><span class="p">,</span> <span class="n">managedObjectModel</span><span class="p">:</span> <span class="n">mom</span><span class="p">)</span>
    <span class="n">container</span><span class="p">.</span><span class="n">loadPersistentStores</span><span class="p">(</span><span class="n">completionHandler</span><span class="p">:</span> <span class="p">{</span> <span class="p">(</span><span class="n">storeDescription</span><span class="p">,</span> <span class="n">error</span><span class="p">)</span> <span class="k">in</span>
        <span class="k">if</span> <span class="kd">let</span> <span class="nv">error</span> <span class="p">=</span> <span class="n">error</span> <span class="k">as</span> <span class="bp">NSError</span><span class="p">?</span> <span class="p">{</span>
            <span class="bp">fatalError</span><span class="p">(</span><span class="s">&quot;Unresolved error </span><span class="si">\(</span><span class="n">error</span><span class="si">)</span><span class="s">, </span><span class="si">\(</span><span class="n">error</span><span class="p">.</span><span class="n">userInfo</span><span class="si">)</span><span class="s">&quot;</span><span class="p">)</span>
        <span class="p">}</span>
    <span class="p">})</span>
    <span class="k">return</span> <span class="n">container</span>
<span class="p">}()</span>
</div></code></pre><h2>Final</h2><p>Please be aware, that a CoreData App has a <code>saveContext</code> function that gets automatically called by the <code>SceneDelegate</code> when the scene enters the background. If you want to use CoreData in a framework I guess you’ll decide when to save by yourself, anyways.</p>]]></content:encoded></item></channel></rss>